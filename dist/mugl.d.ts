// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@assemblyscript/loader
//   ../ts-essentials
//   ../munum

declare module 'mugl' {
    /**
      * mugl - minimalistic WebGL 3D rendering library
      * @packageDocumentation
      * @module mugl
      */
    export * from 'mugl/js';
}

declare module 'mugl/js' {
    export * from 'mugl/js/bind';
    export * from 'mugl/js/device';
    export * from 'mugl/js/gl2';
    export * from 'mugl/js/nano';
}

declare module 'mugl/js/bind' {
    export * from 'mugl/js/bind/bind';
}

declare module 'mugl/js/device' {
    /**
      * Micro WebGL rendering interface, in WebGPU API style.
      * @packageDocumentation
      */
    export * from 'mugl/common/device';
    export * from 'mugl/js/device/webgl';
}

declare module 'mugl/js/gl2' {
    /**
      * WebGL implementation of the mugl API. Both WebGL 1.0 and 2.0 are supported.
      * @packageDocumentation
      */
    export * from 'mugl/js/gl2/device';
}

declare module 'mugl/js/nano' {
    /**
      * A 3KB (gzipped) implementation of the mugl API that is optimized for file size. Some features may be unsupported.
      * This is useful for e.g. JS13K where you need a minimal file size.
      * @packageDocumentation
      * @module mugl/n
      */
    export * from 'mugl/js/nano/device';
}

declare module 'mugl/js/bind/bind' {
    import { ASUtil } from '@assemblyscript/loader';
    import { Buffer, ImageSource, Pipeline, RenderingDevice, RenderPass, RenderPassContext, Shader, Texture } from 'mugl/common';
    import { UniformBindings } from 'mugl/common/device/descriptor';
    import { Canvas, GLRenderingDeviceFactory } from 'mugl/js/device';
    type Ptr = number;
    type Uint = number;
    type ImageId = Uint;
    type CanvasId = Uint;
    type RenderingDeviceId = Uint;
    type RenderPassContextId = Uint;
    type BufferId = Uint;
    type TextureId = Uint;
    type RenderPassId = Uint;
    type ShaderId = Uint;
    type PipelineId = Uint;
    /**
        * mugl-WASM binding object.
        */
    export interface MuglBind {
            /**
                * Bind mugl to WASM module exports.
                * @param exports module exports
                */
            bindModule(exports: ASUtil & Record<string, unknown>): void;
            /**
                * Register a canvas for use in WASM.
                * @param id ID of the canvas
                * @param canvas the canvas
                * @returns pointer to the given canvas
                */
            addCanvas(id: string, canvas: Canvas): CanvasId;
            /**
                * Register an image for use in WASM.
                * @param id ID of the image
                * @param image the image
                * @returns pointer to the given image
                */
            addImage(id: string, image: ImageSource): ImageId;
            pinned: Record<Ptr, Ptr>;
            canvasIdMap: Record<string, CanvasId>;
            canvas: Record<CanvasId, Canvas>;
            imageIdMap: Record<string, ImageId>;
            images: Record<ImageId, ImageSource>;
            devices: Record<RenderingDeviceId, RenderingDevice>;
            renderPassContexts: Record<RenderPassContextId, RenderPassContext>;
            boundUniforms: Record<RenderPassContextId, UniformBindings>;
            buffers: Record<BufferId, Buffer>;
            textures: Record<TextureId, Texture>;
            shaders: Record<ShaderId, Shader>;
            renderPasses: Record<RenderPassId, RenderPass>;
            pipelines: Record<PipelineId, Pipeline>;
    }
    /**
        * Bind mugl device library to WASM module.
        */
    export function muglBind(imports: Record<string, unknown>, deviceFactory?: GLRenderingDeviceFactory): MuglBind;
    export {};
}

declare module 'mugl/common/device' {
    /**
      * Micro WebGL rendering interface, in WebGPU API style.
      * @packageDocumentation
      */
    export * from 'mugl/common/device/descriptor';
    export * from 'mugl/common/device/device';
    export * from 'mugl/common/device/enums';
    export * from 'mugl/common/device/resources';
    export * from 'mugl/common/device/types';
    export * from 'mugl/common/device/utils';
}

declare module 'mugl/js/device/webgl' {
    import { ValueOf } from 'ts-essentials';
    import { BufferDescriptor, TextureDescriptor, SamplerDescriptor, PipelineDescriptor, RenderPassDescriptor, Shader, ShaderDescriptor } from 'mugl/common/device';
    import { RenderingDevice, RenderPassContext } from 'mugl/common/device';
    import { Buffer, Pipeline, RenderPass, Texture } from 'mugl/common/device';
    /**
        * Interface for a provider of WebGLRenderingContext provider.
        * Useful for non-Web environments where HTML Canvas element does not exist.
        */
    export interface WebGLRenderingContextProvider {
            /**
                * Get a WebGLRenderingContext.
                *
                * @param type WebGL version. Use 'webgl2' for WebGL 2.0, or 'webgl' for WebGL 1.0
                * @param options optional WebGL rendering context attributes
                * @returns a WebGLRenderingContext or WebGL2RenderingContext depending on requested type, or null if unsupported.
                */
            getContext(type: 'webgl' | 'webgl2', options?: WebGLContextAttributes): WebGLRenderingContext | null;
    }
    /**
        * A canvas element from which a WebGLRenderingContext can be retrieved.
        */
    export type Canvas = HTMLCanvasElement | OffscreenCanvas | WebGLRenderingContextProvider;
    /**
        * WebGL1 feature used by mugl.
        */
    export const GL1Feature: {
            readonly Aniso: string;
            readonly TexFP16Lin: string;
            readonly TexFPLin: string;
            readonly DFfx: "OES_standard_derivatives";
            readonly Instancing: "ANGLE_instanced_arrays";
            readonly UintIndex: "OES_element_index_uint";
            readonly BlendMinMax: "EXT_blend_minmax";
            readonly DrawBuffers: "WEBGL_draw_buffers";
            readonly DepthTex: "WEBGL_depth_texture";
            readonly TexFP16: "OES_texture_half_float";
            readonly TexFP: "OES_texture_float";
    };
    /**
        * WebGL1 features used by mugl.
        */
    export type GL1Feature = ValueOf<typeof GL1Feature>;
    /**
        * WebGL2 features used by mugl.
        */
    export const GL2Feature: {
            readonly Aniso: string;
            readonly TexFP16Lin: string;
            readonly TexFPLin: string;
            readonly BufFP: "EXT_color_buffer_float";
    };
    /**
        * WebGL2 features used by mugl.
        */
    export type GL2Feature = ValueOf<typeof GL2Feature>;
    /**
        * A WebGL buffer resource.
        */
    export interface GLBuffer extends Buffer {
            /** The underlying WebGL buffer object. null if destroyed. */
            readonly glb: WebGLBuffer | null;
    }
    /**
        * A WebGL texture resource.
        */
    export interface GLTexture extends Texture {
            /** The underlying WebGL texture object. null if destroyed. */
            readonly glt: WebGLTexture | null;
            /** The underlying WebGL renderbuffer for depth/stencil, if applicable. */
            readonly glrb: WebGLRenderbuffer | null;
    }
    /**
        * WebGL render pass object.
        */
    export interface GLRenderPass extends RenderPass {
            /** The underlying WebGL framebuffer for offscreen pass. null if destroyed. */
            readonly glfb: WebGLFramebuffer | null;
            /** The underlying WebGL MSAA resolve framebuffers for offscreen pass. */
            readonly glrfb: readonly (WebGLFramebuffer | null)[];
    }
    /**
        * WebGL shader object.
        */
    export interface GLShader extends Shader {
            /** The underlying WebGL shader object. null if destroyed. */
            readonly gls: WebGLShader | null;
    }
    /**
        * WebGL render pipeline object.
        */
    export interface GLPipeline extends Pipeline {
            /** The underlying WebGL shader program object. null if destroyed. */
            readonly glp: WebGLProgram | null;
    }
    /**
        * WebGL-based rendering device.
        * WebGL2 can optionally be used if available.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
        */
    export interface GLRenderingDevice extends RenderingDevice {
            /** The canvas */
            readonly canvas: Canvas;
            /** WebGL context */
            readonly gl: WebGLRenderingContext;
            /** Indicates if WebGL2 context is used */
            readonly webgl2: boolean;
            /**
                * Creates a new buffer object.
                * @param desc the buffer descriptor
                * @returns new buffer object
                */
            buffer(desc: BufferDescriptor): GLBuffer;
            /**
                * Creates a new texture object.
                * @param desc the texture descriptor
                * @param sampler the sampler descriptor
                * @returns new texture object
                */
            texture(desc: TextureDescriptor, sampler?: SamplerDescriptor): GLTexture;
            /**
                * Creates a new shader module object.
                * @param desc the shader descriptor
                * @returns new shader object
                */
            shader(desc: ShaderDescriptor): GLShader;
            /**
                * Creates a new Pipeline state object.
                * @param desc the pipeline descriptor
                * @returns new pipeline state object
                */
            pipeline(desc: PipelineDescriptor): GLPipeline;
            /**
                * Creates a new render pass object.
                * @param desc the render pass descriptor.
                * @returns new render pass
                */
            pass(desc?: RenderPassDescriptor): GLRenderPass;
            /**
                * Start a render pass.
                * @param pass the render pass
                * @returns the pass rendering context.
                */
            render(pass: GLRenderPass): RenderPassContext;
            /**
                * Query and enable a WebGL extension.
                * @param feature WebGL extension name to enable.
                * @returns the extension object, or null if not supported
                */
            feature<F>(feature: string): F;
    }
    /**
        * Options for creating a {@link GLRenderingDevice}.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
        */
    export interface GLRenderingDeviceOptions extends WebGLContextAttributes {
            /**
                * Specify whether WebGL2 should be used if available. Defaults to false.
                */
            webgl2?: boolean;
    }
    /**
        * Factory of {@link WebGLRenderingDevice}.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
        */
    export interface GLRenderingDeviceFactory {
            /**
                * Factory method to create a {@link GLRenderingDevice}.
                * @param canvas the canvas to be used
                * @param options context initialization options
                * @returns Context instance, or null if WebGL is not supported
                */
            (canvas: Canvas, options?: GLRenderingDeviceOptions): GLRenderingDevice | null;
    }
}

declare module 'mugl/js/gl2/device' {
    import { GLRenderingDeviceFactory } from 'mugl/js/device';
    /**
      * Create a {@link GLRenderingDevice}.
      * @param canvas the canvas to be used
      * @param options context initialization options
      * @returns rendering device instance, or null if WebGL is not supported
      */
    export const getGLDevice: GLRenderingDeviceFactory;
}

declare module 'mugl/js/nano/device' {
    import { GLRenderingDeviceFactory } from 'mugl/js/device';
    /**
      * Create a {@link GLRenderingDevice}.
      * @param canvas the canvas to be used
      * @param options context initialization options
      * @returns rendering device instance, or null if WebGL is not supported
      */
    export const getNGLDevice: GLRenderingDeviceFactory;
}

declare module 'mugl/common' {
    export * from 'mugl/common/device';
    export * from 'mugl/common/gl';
}

declare module 'mugl/common/device/descriptor' {
    import {
        AddressMode, BlendFactor, BlendOp, BufferType, ColorMask, CompareFunc, CullMode, FilterMode, FrontFace, IndexFormat,
        MinFilterMode, PixelFormat, PrimitiveType, StencilOp, TexType, UniformFormat, UniformType, Usage, VertexFormat
    } from '../enums';
    import { Buffer, Shader, Texture } from 'mugl/common/device/resources';
    import { Float, ImageSource, ReadonlyColor, ReadonlyFloatList, Uint } from 'mugl/common/device/types';
    
    /**
        * Descriptor of a Buffer.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpubufferdescriptor
        */
    export interface BufferDescriptor {
        /** The buffer type. Defaults to {@link BufferType.Vertex} */
        type?: BufferType;
    
        /** Buffer usage hint. Defaults to {@link Usage.Static} */
        usage?: Usage;
    
        /** Buffer size in bytes */
        size: Uint;
    }
    
    /**
        * Readonly descriptor of a created Buffer. All properties are defined.
        */
    export type BufferProperties = Readonly<Required<BufferDescriptor>>;
    
    /**
        * Descriptor of a Texture.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gputexturedescriptor
        */
    export interface TextureDescriptor {
        /** Textue type. Defaults to {@link TexType.Tex2D}. */
        type?: TexType;
    
        /** Pixel format of the texture. Defaults to {@link PixelFormat.RGBA8}. */
        format?: PixelFormat;
    
        /** Width of texture. Defaults to 1. */
        width?: Uint;
    
        /** Height of texture. Defaults to 1. */
        height?: Uint;
    
        /** Depth of texture. Defaults to 1. */
        depth?: Uint;
    
        /** The number of mipmap levels. Defaults to 1. */
        mipLevels?: Uint;
    
        /** The number of samples for MSAA render targets. Defaults to 1. WebGL2 only. */
        samples?: Uint;
    
        /**
            * Specifies if renderbuffer should be used for depth/stencil textures.
            * Defaults to false, which will use a depth texture.
            */
        renderTarget?: boolean;
    }
    
    /**
        * Readonly descriptor of a created texture. All properties are defined.
        */
     export type TextureProperties = Readonly<Required<TextureDescriptor>>;
    
    /**
        * Descriptor of a texture sampler.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter
        * @see https://gpuweb.github.io/gpuweb/#GPUSamplerDescriptor
        */
    export interface SamplerDescriptor {
        /** Texture address mode for texture width coordinates. Defaults to {@link AddressMode.Clamp} */
        wrapU?: AddressMode;
    
        /** Texture address mode for texture height coordinates. Defaults to {@link AddressMode.Clamp} */
        wrapV?: AddressMode;
    
        /** Texture address mode for texture depth coordinates. Defaults to {@link AddressMode.Clamp} */
        wrapW?: AddressMode;
    
        /** Texture filter mode for magnification. Defaults to {@link FilterMode.Nearest} */
        magFilter?: FilterMode;
    
        /** Texture filter mode for minimifaction. Defaults to {@link MinFilterMode.Nearest} */
        minFilter?: MinFilterMode;
    
        /** Minimum levels of detail. Defaults to -1000. WebGL2 only. */
        minLOD?: Float;
    
        /** Maximum levels of detail. Defaults to 1000. WebGL2 only. */
        maxLOD?: Float;
    
        /** Max anisotropy level. Defaults to 1. Requires EXT_texture_filter_anisotropic extension. */
        maxAniso?: Float;
    }
    
    /**
        * Readonly descriptor of a created texture sampler. All properties are defined.
        */
     export type SamplerProperties = Readonly<Required<SamplerDescriptor>>;
    
    /**
        * Descriptor of a Render Pass.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpassdescriptor
        */
    export interface RenderPassDescriptor {
        /** List of color attachments. If null or empty, defaults to render to screen. */
        color?: TextureView[];
    
        /** The depth/stencil attachment. Defaults to null. */
        depth?: TextureView | null;
    
        /**
            * The color load operation. Defaults to null, which does not clear the buffer.
            * If a color is specified, it represents the clear color.
            */
        clearColor?: ReadonlyColor | null;
    
        /**
            * The depth load operation. Defaults to NaN, which does not clear the buffer.
            * If a number is specified, it represents the clear value.
            */
        clearDepth?: Float;
    
        /**
            * The stencil load operation. Defaults to NaN, which does not clear the buffer.
            * If a number is specified, it represents the clear value.
            */
        clearStencil?: Float;
    }
    
    /**
        * Readonly descriptor of a created render pass. All properties are defined.
        */
     export interface RenderPassProperties {
        /** List of color attachments. */
        readonly color: readonly ReadonlyTextureView[];
    
        /** The depth/stencil attachment. */
        readonly depth: ReadonlyTextureView | null;
    
        /**
            * The color load operation.
            */
        readonly clearColor: ReadonlyColor | null;
    
        /**
            * The depth load operation. If NaN, does not clear the buffer.
            */
        readonly clearDepth: Float;
    
        /**
            * The stencil load operation. If NaN, which does not clear the buffer.
            */
        readonly clearStencil: Float;
     }
    
    /**
        * Descriptor of a shader.
        * @see https://www.w3.org/TR/webgpu/#shader-module-creation
        */
    export interface ShaderDescriptor {
        /** The shader type. */
        type: ShaderType;
    
        /** The shader source code. */
        source: string;
    }
    
    /**
        * Descriptor of Pipeline states.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpipelinedescriptor
        */
    export interface PipelineState {
        /** The rasterization states. Defaults to empty. */
        raster?: RasterizationState;
    
        /** The depth states. Defaults to null, which disables depth test. */
        depth?: DepthState | null;
    
        /** The stencil states. Defaults to null, which disables stencil test. */
        stencil?: StencilState | null;
    
        /** The blend states. Defaults to null, which disables blending. */
        blend?: BlendState | null;
    }
    
    /**
        * Readonly descriptor of pipeline state. All properties are defined.
        */
    export interface ReadonlyPipelineState {
        /** The rasterization states. */
        readonly raster: Readonly<Required<RasterizationState>>;
    
        /** The depth states. */
        readonly depth: Readonly<Required<DepthState>> | null;
    
        /** The stencil states. */
        readonly stencil: Readonly<Required<StencilState>> | null;
    
        /** The blend states. */
        readonly blend: Readonly<Required<BlendState>> | null;
    }
    
    /**
        * Descriptor of a GPU pipeline resource.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpipelinedescriptor
        */
    export interface PipelineDescriptor extends PipelineState {
        /** The vertex shader. */
        vert: Shader;
    
        /** The fragment shader. */
        frag: Shader;
    
        /** The index format. Defaults to {@link IndexFormat.Uint16} */
        indexFormat?: IndexFormat;
    
        /** The primitive rendering mode. Defaults to {@link PrimitiveType.Triangles} */
        mode?: PrimitiveType;
    
        /** The vertex buffer layouts. */
        buffers: VertexBufferLayout[];
    
        /** The uniform layouts. Defaults to empty. */
        uniforms?: UniformLayout;
    }
    
    /**
        * Readonly descriptor of a created pipeline. All properties are defined.
        */
    export interface PipelineProperties extends ReadonlyPipelineState {
        /** The vertex shader. */
        readonly vert: Shader;
    
        /** The fragment shader. */
        readonly frag: Shader;
    
        /** The index format. */
        readonly indexFormat: IndexFormat;
    
        /** The primitive rendering mode. */
        readonly mode: PrimitiveType;
    
        /** The vertex buffer layouts. */
        readonly buffers: readonly ReadonlyVertexBufferLayout[];
    
        /** The uniform layouts. Defaults to empty. */
        readonly uniforms: readonly Readonly<Required<UniformLayoutEntry>>[];
    }
    
    /**
        * Descriptor of vertex buffer layout.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpuvertexbufferlayoutdescriptor
        */
    export interface VertexBufferLayout {
        /** The attribute descriptors */
        attrs: VertexAttribute[];
    
        /** Stride in bytes. Defaults to be auto calculated. */
        stride?: Uint;
    
        /** Specify if this buffer's data is instanced. Defaults to false. */
        instanced?: boolean;
    }
    
    /**
        * Readonly descriptor of vertex buffer layout. All properties are defined.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpuvertexbufferlayoutdescriptor
        */
     export interface ReadonlyVertexBufferLayout {
        /** The attribute descriptors */
        readonly attrs: readonly ReadonlyVertexAttribute[];
    
        /** Stride in bytes. */
        stride: Uint;
    
        /** Specify if this buffer's data is instanced. */
        instanced: boolean;
    }
    
    /**
        * Descriptor of vertex attributes.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpuvertexattributedescriptor
        */
    export interface VertexAttribute {
        /** Attribute name. */
        name: string;
    
        /** Vertex format */
        format: VertexFormat;
    
        /** Shader location to bind to. Defaults to be auto calculated. */
        shaderLoc?: Uint;
    
        /** Offset in buffer in bytes. Defaults to be auto calculated. */
        offset?: Uint;
    }
    
    /**
        * Readonly descriptor of vertex attribute. All properties are defined.
        */
    export type ReadonlyVertexAttribute = Readonly<Required<VertexAttribute>>;
    
    /**
        * Descriptor of the rasterization state.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurasterizationstatedescriptor
        */
    export interface RasterizationState {
        /** The front face. Default to {@link FrontFace.CCW} */
        frontFace?: FrontFace;
    
        /** The face culling mode. Default to {@link CullMode.None} */
        cullMode?: CullMode;
    
        /** The depth bias aka polygonOffsetUnits. Defaults to 0. */
        depthBias?: Float;
    
        /** The depth bias slope scale aka polygonOffsetFactor. Defaults to 0. */
        depthBiasSlopeScale?: Float;
    
        /** Enables alpha to coverage mode. Defaults to false. */
        alphaToCoverage?: boolean;
    }
    
    /**
        * Descriptor of the depth state.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpudepthstencilstatedescriptor
        */
    export interface DepthState {
        /** Depth-writes enabled? Defaults to false */
        write: boolean;
    
        /** Depth-compare function. Defaults to {@link CompareFunc.Always} */
        compare?: CompareFunc;
    }
    
    /**
        * Descriptor of the stencil state.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpudepthstencilstatedescriptor
        */
    export interface StencilState {
        /** Front stencil compare function. Defaults to {@link CompareFunc.Always} */
        frontCompare?: CompareFunc;
    
        /** Front stencil fail operation. Defaults to {@link StencilOp.Keep} */
        frontFailOp?: StencilOp;
    
        /** Front stencil depth fail operation. Defaults to {@link StencilOp.Keep} */
        frontZFailOp?: StencilOp;
    
        /** Front stencil pass operation. Defaults to {@link StencilOp.Keep} */
        frontPassOp?: StencilOp;
    
        /** Back stencil compare function. Defaults to {@link CompareFunc.Always} */
        backCompare?: CompareFunc;
    
        /** Back stencil fail operation. Defaults to {@link StencilOp.Keep} */
        backFailOp?: StencilOp;
    
        /** Back stencil depth fail operation. Defaults to {@link StencilOp.Keep} */
        backZFailOp?: StencilOp;
    
        /** Back stencil pass operation. Defaults to {@link StencilOp.Keep} */
        backPassOp?: StencilOp;
    
        /** Stencil read mask. Defaults to 0xFF */
        readMask?: Uint;
    
        /** Stencil write mask. Defaults to 0xFF */
        writeMask?: Uint;
    }
    
    /**
        * Descriptor of the blend state.
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpucolorstatedescriptor
        */
    export interface BlendState {
        /** Blend source factor for RGB color. Defaults to {@link BlendFactor.One} */
        srcFactorRGB?: BlendFactor;
    
        /** Blend destination factor for RGB color. Defaults to {@link BlendFactor.Zero} */
        dstFactorRGB?: BlendFactor;
    
        /** Blend operation for alpha channel. Defaults to {@link BlendOp.Add} */
        opRGB?: BlendOp;
    
        /** Blend source factor for alpha channel. Defaults to {@link BlendFactor.One} */
        srcFactorAlpha?: BlendFactor;
    
        /** Blend destination factor for alpha channel. Defaults to {@link BlendFactor.Zero} */
        dstFactorAlpha?: BlendFactor;
    
        /** Blend operation for alpha channel. Defaults to {@link BlendOp.Add} */
        opAlpha?: BlendOp;
    
        /** Color-channels to write. Defaults to {@link ColorMask.All} */
        colorMask?: ColorMask;
    }
    
    /**
        * Descriptor of the layout of a uniform.
        */
    export interface UniformLayoutEntry {
        /** Uniform name. */
        // @ts-ignore: Valid in AssemblyScript
        name: string;
    
        /** Uniform type. Defaults to {@link UniformType.Value} */
        type?: UniformType;
    
        /** Texture type. Defaults to {@link TexType.Tex2D} */
        texType?: TexType;
    
        /** Uniform value format. Defaults to {@link UniformFormat.Float} */
        valueFormat?: UniformFormat;
    }
    
    /**
        * Descriptor of uniform layout.
        */
    export type UniformLayout = UniformLayoutEntry[];
    
    /**
     * The uniform resource binding.
     * @see https://gpuweb.github.io/gpuweb/#bind-group-creation
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferRange
     */
    export interface UniformBinding {
        /** Uniform name. */
        name: string;
    
        /** The uniform value to bind */
        value?: Float;
    
        /** The uniform array value to bind */
        values?: ReadonlyFloatList | null;
    
        /** The texture to bind */
        tex?: Texture | null;
    
        /** The uniform buffer to bind */
        buffer?: Buffer | null;
    
        /** The starting offset of the uniform buffer. Defaults to 0 */
        bufferOffset?: Uint;
    
        /**
            * The byte size of data to read from the buffer.
            * Defaults to the range starting at offset and ending at the end of the buffer.
            */
        bufferSize?: Uint;
    }
    
    /**
        * Descriptor of uniform bindings.
        */
    export type UniformBindings = UniformBinding[];
    
    /**
     * Texture data type.
     */
    export interface TextureData {
        /** Texture data buffer. */
        buffer?: ArrayBufferView | null;
    
        /** Array textures data buffer. */
        buffers?: ArrayBufferView[] | null;
    
        /** Texture image pointer. */
        image?: ImageSource;
    
        /** Array textures array image pointer. */
        images?: ImageSource[] | null;
    }
    
    /**
     * The texture view for render pass attachment.
     * @see https://gpuweb.github.io/gpuweb/#dictdef-gputextureviewdescriptor
     */
    export interface TextureView {
        /** The texture to bind */
        tex: Texture;
    
        /** Rendering mip level. Defaults to 0 */
        mipLevel?: Uint;
    
        /** Rendering texture slice. Defaults to 0 */
        slice?: Uint;
    }
    
    /**
        * Readonly descriptor of a texture view. All proerties are defined.
        */
     export type ReadonlyTextureView = Readonly<Required<TextureView>>;
}

declare module 'mugl/common/device/device' {
    import { TextureDescriptor, SamplerDescriptor, RenderPassDescriptor, UniformBindings } from 'mugl/common/device/descriptor';
    import { Buffer, Pipeline, RenderPass, Texture } from 'mugl/common/device/resources';
    import { RenderingDevice as BaseRenderingDevice, RenderPassContext as BaseRenderPassContext } from 'mugl/common/device/device/device';
    import { Int, ReadonlyColor, Uint } from 'mugl/common/device/types';
    
    /**
        * The rendering device, in WebGPU API style.
        * The APIs are designed to be simplified version of WebGPU APIs, and without features unsupported by WebGL.
        * @see https://gpuweb.github.io/gpuweb/#gpudevice
        */
    export interface RenderingDevice extends BaseRenderingDevice {
        /**
            * Creates a new texture object.
            * @param desc the texture descriptor
            * @param sampler optional sampler descriptor
            * @returns new texture object
            */
        texture(desc: TextureDescriptor, sampler?: SamplerDescriptor): Texture;
    
        /**
            * Creates a new render pass object.
            * @param desc optional render pass descriptor.
            * @returns new render pass
            */
        pass(desc?: RenderPassDescriptor): RenderPass;
    
        /**
            * Start a render pass.
            * @param pass the render pass
            * @returns the pass rendering context.
            */
        render(pass: RenderPass): RenderPassContext;
    }
    
    /**
        * The render pass context object for submitting render commands.
        * @see https://gpuweb.github.io/gpuweb/#gpurenderpassencoder
        */
    export interface RenderPassContext extends BaseRenderPassContext {
        /**
            * Bind a pipeline.
            * @param pipeline the pipeline to bind
            * @returns this context for chaining
            */
        pipeline(pipeline: Pipeline): RenderPassContext;
    
        /**
            * Bind an index buffer.
            * @param buffer the buffer to bind
            * @returns this context for chaining
            */
        index(buffer: Buffer): RenderPassContext;
    
        /**
            * Bind a vertex buffer to a slot.
            * @param slot the vertex slot to bind to
            * @param buffer the buffer to bind
            * @returns this context for chaining
            */
        vertex(slot: Uint, buffer: Buffer): RenderPassContext;
    
        /**
            * Set the shader uniforms.
            * @param desc descriptor of the uniforms
            * @returns this context for chaining
            */
        uniforms(bindings: UniformBindings): RenderPassContext;
    
        /**
            * Submite a draw call.
            * @param vertexCount the number of vertices to draw
            * @param instanceCount the number of instances to draw. Defaults to 1
            * @param firstVertex the offset to the first vertex to draw. Defaults to 0
            * @returns this context for chaining
            */
        draw(vertexCount: Uint, instanceCount?: Uint, firstVertex?: Uint): RenderPassContext;
    
        /**
            * Submite an indexed draw call.
            * @param indexCount the number of vertices to draw
            * @param instanceCount the number of instances to draw. Defaults to 1
            * @param firstVertex the offset to the first vertex to draw. Defaults to 0
            * @returns this context for chaining
            */
        drawIndexed(
            indexCount: Uint, instanceCount?: Uint, firstIndex?: Uint): RenderPassContext;
    
        /**
            * Set the 3D viewport area.
            * @param x x offset
            * @param y y offset
            * @param width width
            * @param height height
            * @param minDepth min depth. Defaults to 0
            * @param maxDepth max depth. Defaults to 1
            * @returns this context for chaining
            */
        viewport(
            x: Int, y: Int, width: Int, height: Int, minDepth?: Int, maxDepth?: Int): RenderPassContext;
    
        /**
            * Set the scissor rectangle.
            * @param x x offset
            * @param y y offset
            * @param width width
            * @param height height
            * @returns this context for chaining
            */
        scissor(x: Int, y: Int, width: Int, height: Int): RenderPassContext;
    
        /**
            * Set the blend-constant color.
            * @param color the blend color
            * @returns this context for chaining
            */
        blendColor(color: ReadonlyColor): RenderPassContext;
    
        /**
            * Set the stencil reference value.
            * @param ref the stencil reference value.
            * @returns this context for chaining
            */
        stencilRef(ref: Uint): RenderPassContext;
    
        /**
            * End the render pass.
            */
        end(): void;
    }
}

declare module 'mugl/common/device/enums' {
    /**
        * Texture addressing wrap mode (aka UV wrap).
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpuaddressmode
        */
    export enum AddressMode {
            /** Clamp texture coords to (0.0 .. 1.0) */
            Clamp,
            /** Repeat texture coords within (0.0 .. 1.0) */
            Repeat,
            /** Mirror-repeat texture coords (0.0 .. 1.0 .. 0.0) */
            Mirror
    }
    /**
        * Alpha-blending factors.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpublendfactor
        */
    export enum BlendFactor {
            /** blend factor of zero */
            Zero,
            /** blend factor of one */
            One,
            /** blend factor of source color */
            SrcColor,
            /** blend factor of one minus source color */
            OneMinusSrcColor,
            /** blend factor of source alpha */
            SrcAlpha,
            /** blend factor of one minus source alpha */
            OneMinusSrcAlpha,
            /** blend factor of destination color */
            DstColor,
            /** blend factor of one minus destination alpha */
            OneMinusDstColor,
            /** blend factor of destination alpha */
            DstAlpha,
            /** blend factor of one minus destination alpha */
            OneMinusDstAlpha,
            /** blend factor of the minimum of either source alpha or one minus destination alpha */
            SrcAlphaSaturate,
            /** blend factor of constant color */
            BlendColor,
            /** blend factor of one minus constant color */
            OneMinusBlendColor
    }
    /**
        * Blend operation.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquation
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpublendoperation
        */
    export enum BlendOp {
            /** Add source and destination pixel values */
            Add,
            /** Subtract destination from source pixel values */
            Sub,
            /** Subtract source from destination pixel values */
            RevSub,
            /**
                * The minimum of the source and destination pixel values.
                * For WebGL1, this requires EXT_blend_minmax extension.
                */
            Min,
            /**
                * The maximum of the source and destination pixel values.
                * For WebGL1, this requires EXT_blend_minmax extension.
                */
            Max
    }
    /**
        * Buffer type (vertex or index buffers).
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer
        * @see https://gpuweb.github.io/gpuweb/#typedefdef-gpubufferusageflags
        */
    export enum BufferType {
            /** Vertex buffer */
            Vertex,
            /** Index buffer */
            Index,
            /** Uniform buffer */
            Uniform
    }
    /**
        * A color write mask.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/colorMask
        * @see https://gpuweb.github.io/gpuweb/#typedefdef-gpucolorwriteflags
        */
    export enum ColorMask {
            R = 1,
            G = 2,
            B = 4,
            A = 8,
            RGB = 7,
            All = 15
    }
    /**
        * Comparision functions for depth and stencil checks.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpucomparefunction
        */
    export enum CompareFunc {
            /** new value never passes comparion test */
            Never,
            /** new value passses if it is less than the existing value */
            Less,
            /** new value passes if it is equal to existing value */
            Equal,
            /** new value passes if it is less than or equal to existing value */
            LEqual,
            /** new value passes if it is greater than existing value */
            Greater,
            /** new value passes if it is not equal to existing value */
            NotEqual,
            /** new value passes if it is greater than or equal to existing value */
            GEqual,
            /** new value always passes */
            Always
    }
    /**
        * Cube map face.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D
        */
    export enum CubeFace {
            /** Positive X face */
            PosX,
            /** Negative X face */
            NegX,
            /** Positive Y face */
            PosY,
            /** Negative Y face */
            NegY,
            /** Positive Z face */
            PosZ,
            /** Negative Z face */
            NegZ
    }
    /**
        * Specify the face to cull.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace
        * @see https://gpuweb.github.io/gpuweb/#dom-gpurasterizationstatedescriptor-cullmode
        */
    export enum CullMode {
            /** Disable culling */
            None,
            /** Cull front face */
            Front,
            /** Cull back face */
            Back
    }
    /**
        * Texture sampler filter mode.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpufiltermode
        */
    export enum FilterMode {
            /** use nearest-filtering (aka point-filtering) */
            Nearest,
            /** use linear filtering */
            Linear
    }
    /**
        * Identify which side is the front face by setting a winding orientation.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpufrontface
        */
    export enum FrontFace {
            /** Counter-clockwise winding. */
            CCW,
            /** Clockwise winding. */
            CW
    }
    /**
        * Vertex index formats.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpuindexformat
        */
    export enum IndexFormat {
            /** 16-bit indices */
            UInt16,
            /** 32-bit indices. For WebGL1, this requires OES_element_index_uint extension. */
            UInt32
    }
    /**
        * Hint for mipmap generation.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/hint
        */
    export enum MipmapHint {
            /** No preference. */
            None,
            /** The most efficient option should be chosen. */
            Fast,
            /** The most correct, or highest quality, option should be chosen. */
            Nice
    }
    /**
        * Texture sampler minification filter mode.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpufiltermode
        */
    export enum MinFilterMode {
            /** use nearest-filtering (aka point-filtering) */
            Nearest,
            /** use linear filtering */
            Linear,
            /** nearest within mipmap and between mipmaps */
            NearestMipmapNearest,
            /** nearest within mipmap, linear between mipmaps */
            NearestMipmapLinear,
            /** linear within mipmap, nearest between mipmaps */
            LinearMipmapNearest,
            /** linear within and between mipmaps */
            LinearMipmapLinear
    }
    /**
        * Texture pixel format.
        * Lower 8 bits of the enum values encode the distinct size types;
        * Bits 8-15 encode the distinct formats;
        * Bits 16-23 encode the distinct internal formats;
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/renderbufferStorage
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat
        */
    export enum PixelFormat {
            /** 16-32 bits depth */
            Depth = 65796,
            /** 8-bit stencil. */
            Stencil = 131589,
            /** 16-24 bits depth with 8-bit stencil */
            DepthStencil = 197381,
            /** RGBA with 8 bits per channel */
            RGBA8 = 263169,
            /**
                * RGBA with 32-bit floating point channels.
                * For WebGL1, this requires OES_texture_float extension.
                */
            RGBA32F = 328706,
            /**
                * RGBA with 16-bit floating point channels.
                * For WebGL1, this requires OES_texture_half_float extension.
                */
            RGBA16F = 394243,
            /**
                * R component only, 32-bit floating point. WebGL2 only.
                */
            R32F = 460034,
            /**
                * R component only, 16-bit floating point. WebGL2 only.
                */
            R16F = 525571,
            /**
                * RG component only, 32-bit floating point. WebGL2 only.
                */
            RG32F = 591362,
            /**
                * RG component only, 16-bit floating point. WebGL2 only.
                */
            RG16F = 656899
    }
    /**
        * Primitive topology.
        * @see https://gpuweb.github.io/gpuweb/#primitive-topology
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements
        */
    export enum PrimitiveType {
            /** Point list */
            Points,
            /** Line list */
            Lines,
            /** Line strip */
            LineStrip,
            /** Triangle list */
            Tri,
            /** Triangle strip */
            TriStrip
    }
    export enum ShaderType {
            /** Vertex shader */
            Vertex,
            /** Fragment shader */
            Fragment
    }
    /**
        * Stencil-buffer operation.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOpSeparate
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpustenciloperation
        */
    export enum StencilOp {
            /** keep the current stencil value */
            Keep,
            /** set the stencil value to zero */
            Zero,
            /** replace the stencil value with stencil reference value */
            Replace,
            /** increment the current stencil value, clamp to max */
            Incr,
            /** decrement the current stencil value, clamp to zero */
            Decr,
            /** perform a logical bitwise invert operation on the stencil value */
            Invert,
            /** increment the current stencil value, with wrap-around */
            IncrWrap,
            /** decrement the current stencil value, with wrap-around */
            DecrWrap
    }
    /**
        * Texture view dimension type.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gputextureviewdimension
        */
    export enum TexType {
            /** 2D texture */
            Tex2D,
            /** Cube map texture */
            Cube,
            /** 3D texture. WebGL2 only. */
            Tex3D,
            /** 2D array texture. WebGL2 only. */
            Array
    }
    /**
        * Uniform value format.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix
        */
    export enum UniformFormat {
            /** float type */
            Float,
            /** 2D vector */
            Vec2,
            /** 3D vector */
            Vec3,
            /** 4D vector */
            Vec4,
            /** 2x2 matrix */
            Mat2,
            /** 3x3 matrix */
            Mat3,
            /** 4x4 matrix */
            Mat4
    }
    /**
        * Uniform type (uniform value or texture).
        * TODO = [Feature] Support uniform buffer object
        */
    export enum UniformType {
            /** Uniform value type */
            Value = 1,
            /** Uniform texture type */
            Tex = 2,
            /** Uniform buffer type */
            Buffer = 4
    }
    /**
        * Buffer data usage hint.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData
        */
    export enum Usage {
            /** Data is static, cannot be modified after creation */
            Static,
            /** Data is updated infrequently */
            Dynamic,
            /** Data is overwritten each frame */
            Stream
    }
    /**
        * Vertex component format.
        * Enum values encode the properties of the formats:
        *  - bits 0 - 7 encodes the data type
        *  - bits 8 - 15 encodes the number of components
        *  - bits 16 encodes if the type is normalized (1 for normalized, 0 otherwise)
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer
        * @see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
        */
    export enum VertexFormat {
            /** 32-bit float, single component in X */
            Float = 256,
            /** 32-bit floats, 2 components in XY */
            Float2 = 512,
            /** 32-bit floats, 3 components in XYZ */
            Float3 = 768,
            /** 32-bit floats, 4 components in XYZW */
            Float4 = 1024,
            /** 2 packed bytes, signed (-128 .. 127) */
            Char2 = 513,
            /** 2 packed bytes, signed, normalized (-1.0 .. +1.0) */
            Char2N = 66049,
            /** 2 packed bytes, unsigned (0 .. 255) */
            UChar2 = 514,
            /** 2 packed bytes, unsigned, normalized (0.0 .. +1.0) */
            UChar2N = 66050,
            /** 4 packed bytes, signed (-128 .. 127) */
            Char4 = 1025,
            /** 4 packed bytes, signed, normalized (-1.0 .. +1.0) */
            Char4N = 66561,
            /** 4 packed bytes, unsigned (0 .. 255) */
            UChar4 = 1026,
            /** 4 packed bytes, unsigned, normalized (0.0 .. +1.0) */
            UChar4N = 66562,
            /** 2 packed 16-bit shorts, signed (-32767 .. +32768) */
            Short2 = 515,
            /** 2 packed 16-bit shorts, signed, normalized (-1.0 .. +1.0) */
            Short2N = 66051,
            /** 4 packed 16-bit shorts, signed (-32767 .. +32768) */
            Short4 = 1027,
            /** 4 packed 16-bit shorts, signed, normalized (-1.0 .. +1.0) */
            Short4N = 66563,
            /** 2 packed 16-bit shorts, unsigned (0 .. +65535) */
            UShort2 = 516,
            /** 2 packed 16-bit shorts, unsigned, normalized (0.0 .. +1.0) */
            UShort2N = 66052,
            /** 4 packed 16-bit shorts, unsigned (0 .. +65535) */
            UShort4 = 1028,
            /** 4 packed 16-bit shorts, unsigned, normalized (0.0 .. +1.0) */
            UShort4N = 66564
    }
}

declare module 'mugl/common/device/resources' {
    import { TextureData } from 'mugl/common/device/descriptor';
    import { MipmapHint } from 'mugl/common/device/enums';
    import { ReadonlyExtent2D, ReadonlyExtent3D, ReadonlyOrigin2D, ReadonlyOrigin3D, Uint } from 'mugl/common/device/types';
    import {
        Buffer as BaseBuffer, Pipeline as BasePipeline, Resource, RenderPass as BaseRenderPass, Shader as BaseShader,
        Texture as BaseTexture 
    } from './resources';
    
    export { Resource } from 'mugl/common/device/resources/resources';
    
    /**
        * A GPU buffer resource.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpubufferdescriptor
        */
    export interface Buffer extends BaseBuffer, Resource {
        /**
            * Write data to the buffer.
            * @param data the data to write
            * @param offset offset into GPU buffer to begin writing from. Defaults to 0
            * @return this
            * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData
            * @see https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writebuffer
            */
        data(data: ArrayBufferView, offset?: Uint): Buffer;
    }
    
    /**
        * A GPU texture resource.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture
        * @see https://gpuweb.github.io/gpuweb/#gputexture
        */
     export interface Texture extends BaseTexture, Resource {
        /**
            * Write data to the texture.
            * @param data the data to write
            * @param offset the offset to the GPU texture to write data to. Defaults to [0, 0, 0].
            * @param size the size of the content to write from data to texture
            * @param mipLevel the mipmap level to use. Defaults to 0.
            * @return this
            * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D
            * @see https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture
            */
        data(data: TextureData, offset?: ReadonlyOrigin2D | ReadonlyOrigin3D, size?: ReadonlyExtent2D | ReadonlyExtent3D, mipLevel?: Uint): Texture;
    
        /**
            * Generate mipmap for a texture object.
            * @param hint optional mipmap hint
            * @return this
            * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap
            */
        mipmap(hint?: MipmapHint): Texture;
    }
    
    /**
        * A GPU render pass object.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpassdescriptor
        */
     export interface RenderPass extends BaseRenderPass, Resource {}
    
    /**
        * A GPU shader object.
        * @see https://www.w3.org/TR/webgpu/#shader-module-creation
        */
    export interface Shader extends BaseShader, Resource {}
    
    /**
        * A GPU render pipeline object.
        * @see https://gpuweb.github.io/gpuweb/#gpurenderpipeline
        */
    export interface Pipeline extends BasePipeline, Resource {}
}

declare module 'mugl/common/device/types' {
    /**
        * Float type.
        */
    export type Float = number;
    
    /**
        * Int32 type.
        */
    export type Int = number;
    
    /**
        * Unsigned int32 type.
        */
    export type Uint = number;
    
    /**
        * Texture image source type.
        */
    export type ImageSource = TexImageSource;
    
    /**
        * Float list type.
        */
    export type FloatList = Float32Array | number[];
    
    /**
        * Float list type.
        */
     export type ReadonlyFloatList = Float32Array | readonly number[];
    
    /**
        * RGBA color type.
        * @see https://gpuweb.github.io/gpuweb/#typedefdef-gpucolor
        */
    export type Color = [r: number, g: number, b: number, a: number];
    
    /**
        * Readonly RGBA color type.
        */
    export type ReadonlyColor = Readonly<Color>;
    
    /**
        * A (width, height) 2D extent.
        * @see https://gpuweb.github.io/gpuweb/#typedefdef-gpuextent3d
        */
    export type Extent2D = [width: number, height: number];
    
    /**
        * A readonly (width, height) 2D extent.
        */
    export type ReadonlyExtent2D = Readonly<Extent2D>;
    
    /**
        * An (width, height, depth) 3D extent.
        * @see https://gpuweb.github.io/gpuweb/#typedefdef-gpuextent3d
        */
    export type Extent3D = [width: number, height: number, depth: number];
    
    /**
        * A readonly (width, height, depth) 3D extent.
        * @see https://gpuweb.github.io/gpuweb/#typedefdef-gpuextent3d
        */
    export type ReadonlyExtent3D = Readonly<Extent3D>;
    
    /**
        * A (x, y) 2D point.
        */
     export type Origin2D = [x: number, y: number];
    
     /**
         * A readonly (x, y) 2D point.
         */
     export type ReadonlyOrigin2D = Readonly<Origin2D>;
    
    /**
        * A (x, y, z) 3D point.
        * @see https://gpuweb.github.io/gpuweb/#typedefdef-gpuorigin3d
        */
    export type Origin3D = [x: number, y: number, z: number];
    
    /**
        * A readonly (x, y, z) 3D point.
        */
    export type ReadonlyOrigin3D = Readonly<Origin3D>;
}

declare module 'mugl/common/device/utils' {
    import { Int } from 'munum';
    import { IndexFormat, PixelFormat, TexType, VertexFormat } from 'mugl/common/device/enums';
    /**
        * Byte mask = 0xFF.
        * @internal
        */
    export const BYTE_MASK = 255;
    /**
        * Check if given texture type is a 3D or 2D array texture.
        *
        * @param type texture type
        * @return whether the texture type is 3D
        */
    export function is3DTexture(type: TexType): boolean;
    /**
        * Check if given pixel format is a depth/stencil format.
        *
        * @param format pixel format
        * @returns whether the pixel format is a depth/stencil format
        */
    export function isDepthStencil(format: PixelFormat): boolean;
    /**
        * Check if given pixel format has stencil component.
        *
        * @param format pixel format
        * @returns whether the pixel format has stencil component
        */
    export function hasStencil(format: PixelFormat): boolean;
    /**
        * Returns the byte size of a vertex format.
        * @internal
        * @param format vertex format
        * @returns byte size
        */
    export function vertexByteSize(format: VertexFormat): Int;
    /**
        * Returns the number of components of a vertex format.
        * @internal
        * @param format vertex format
        * @returns number of components
        */
    export function vertexSize(format: VertexFormat): Int;
    /**
        * Returns the data type of a vertex format.
        * @internal
        * @param format vertex format
        * @returns GL data type
        */
    export function vertexType(format: VertexFormat): Int;
    /**
        * Returns if a vertex format is normalized.
        * @internal
        * @param format vertex format
        * @returns number of components
        */
    export function vertexNormalized(format: VertexFormat): boolean;
    /**
        * Returns the byte size of a index format.
        * @internal
        * @param format index format
        * @returns byte size of the format
        */
    export function indexSize(format: IndexFormat): Int;
    /**
        * Convert PixelFormat to GL texture internal format.
        * @internal
        * @param format pixel format
        * @param isRenderbuffer if this is a renderbuffer
        * @param isWebGL2 if WebGL2 is used
        * @returns GL texture internal format
        */
    export function glTexInternalFormat(format: PixelFormat, isWebGL2?: boolean): Int;
    /**
        * Convert PixelFormat to GL texture image format.
        * @internal
        * @param format pixel format
        * @returns GL texture image format
        */
    export function glTexFormat(format: PixelFormat): Int;
    /**
        * Convert PixelFormat to GL texture size type.
        * @internal
        * @param format pixel format
        * @param isWebGL2 if WebGL2 is used
        * @returns GL texture size type
        */
    export function glTexType(format: PixelFormat, isWebGL2?: boolean): Int;
}

declare module 'mugl/common/gl' {
    /**
      * WebGL API and constant definitions.
      * @packageDocumentation
      */
    import * as GLenum from 'mugl/common/gl/const';
    export { GLenum };
}

declare module 'mugl/common/device/device/device' {
    import { ShaderDescriptor } from 'mugl/common/device/descriptor';
    import { BufferDescriptor, PipelineDescriptor, RenderPassDescriptor, SamplerDescriptor, TextureDescriptor, UniformBindings } from 'mugl/common/device/descriptor';
    import { Buffer, Pipeline, RenderPass, Shader, Texture } from 'mugl/common/device/resources';
    import { Int, ReadonlyColor, Uint } from 'mugl/common/device/types';
    /**
        * The rendering device, in WebGPU API style.
        * The APIs are designed to be simplified version of WebGPU APIs, and without features unsupported by WebGL.
        * @see https://gpuweb.github.io/gpuweb/#gpudevice
        */
    export interface RenderingDevice {
            /**
                * Width of the drawing buffer.
                */
            readonly width: Uint;
            /**
                * Height of the drawing buffer.
                */
            readonly height: Uint;
            /**
                * Creates a new buffer object.
                * @param desc the buffer descriptor
                * @returns new buffer object
                */
            buffer(desc: BufferDescriptor): Buffer;
            /**
                * Creates a new texture object.
                * @param desc the texture descriptor
                * @param sampler the sampler descriptor
                * @returns new texture object
                */
            texture(desc: TextureDescriptor, sampler: SamplerDescriptor): Texture;
            /**
                * Creates a new shader module object.
                * @param desc the shader descriptor
                * @returns new shader object
                */
            shader(desc: ShaderDescriptor): Shader;
            /**
                * Creates a new pipeline state object.
                * @param desc the pipeline descriptor
                * @returns new pipeline state object
                */
            pipeline(desc: PipelineDescriptor): Pipeline;
            /**
                * Creates a new render pass object.
                * @param desc the render pass descriptor.
                * @returns new render pass
                */
            pass(desc: RenderPassDescriptor): RenderPass;
            /**
                * Start a render pass.
                * @param pass the render pass
                * @returns the pass rendering context.
                */
            render(pass: RenderPass): RenderPassContext;
            /**
                * Reset the state of the rendering context.
                */
            reset(): void;
            /**
                * Query the availability of optional features.
                * @param feature feature type
                * @returns the feature object, or null if not supported
                */
            feature<F>(feature: string): F;
    }
    /**
        * The render pass context object for submitting render commands.
        * @see https://gpuweb.github.io/gpuweb/#gpurenderpassencoder
        */
    export interface RenderPassContext {
            /**
                * Bind a pipeline.
                * @param pipeline the pipeline to bind
                * @returns this context for chaining
                */
            pipeline(pipeline: Pipeline): RenderPassContext;
            /**
                * Bind an index buffer.
                * @param buffer the buffer to bind
                * @returns this context for chaining
                */
            index(buffer: Buffer): RenderPassContext;
            /**
                * Bind a vertex buffer to a slot.
                * @param slot the vertex slot to bind to
                * @param buffer the buffer to bind
                * @returns this context for chaining
                */
            vertex(slot: Uint, buffer: Buffer): RenderPassContext;
            /**
                * Set the shader uniforms.
                * @param desc descriptor of the uniforms
                * @returns this context for chaining
                */
            uniforms(bindings: UniformBindings): RenderPassContext;
            /**
                * Submite a draw call.
                * @param vertexCount the number of vertices to draw
                * @param instanceCount the number of instances to draw. Defaults to 1
                * @param firstVertex the offset to the first vertex to draw. Defaults to 0
                * @returns this context for chaining
                */
            draw(vertexCount: Uint, instanceCount: Uint, firstVertex: Uint): RenderPassContext;
            /**
                * Submite an indexed draw call.
                * @param indexCount the number of vertices to draw
                * @param instanceCount the number of instances to draw. Defaults to 1
                * @param firstVertex the offset to the first vertex to draw. Defaults to 0
                * @returns this context for chaining
                */
            drawIndexed(indexCount: Uint, instanceCount: Uint, firstIndex: Uint): RenderPassContext;
            /**
                * Set the 3D viewport area.
                * @param x x offset
                * @param y y offset
                * @param width width
                * @param height height
                * @param minDepth min depth. Defaults to 0
                * @param maxDepth max depth. Defaults to 1
                * @returns this context for chaining
                */
            viewport(x: Int, y: Int, width: Int, height: Int, minDepth: Int, maxDepth: Int): RenderPassContext;
            /**
                * Set the scissor rectangle.
                * @param x x offset
                * @param y y offset
                * @param width width
                * @param height height
                * @returns this context for chaining
                */
            scissor(x: Int, y: Int, width: Int, height: Int): RenderPassContext;
            /**
                * Set the blend-constant color.
                * @param color the blend color
                * @returns this context for chaining
                */
            blendColor(color: ReadonlyColor): RenderPassContext;
            /**
                * Set the stencil reference value.
                * @param ref the stencil reference value.
                * @returns this context for chaining
                */
            stencilRef(ref: Uint): RenderPassContext;
            /**
                * End the render pass.
                */
            end(): void;
    }
}

declare module 'mugl/common/device/resources/resources' {
    import { BufferProperties, PipelineProperties, RenderPassProperties, SamplerProperties, TextureData, TextureProperties } from 'mugl/common/device/descriptor';
    import { MipmapHint, ShaderType } from 'mugl/common/device/enums';
    import { ReadonlyExtent3D, ReadonlyOrigin3D, Uint } from 'mugl/common/device/types';
    /**
        * A resource that can be destroyed.
        */
    export interface Resource {
            /**
                * Destroy the resource.
                */
            destroy(): void;
    }
    /**
        * A GPU buffer resource.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpubufferdescriptor
        */
    export interface Buffer {
            /** The buffer properties. */
            readonly props: BufferProperties;
            /**
                * Write data to the buffer.
                * @param data the data to write
                * @param offset offset into GPU buffer to begin writing from. Defaults to 0
                * @return this
                * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData
                * @see https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writebuffer
                */
            data(data: ArrayBufferView, offset: Uint): Buffer;
    }
    /**
        * A GPU texture resource.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture
        * @see https://gpuweb.github.io/gpuweb/#gputexture
        */
    export interface Texture {
            /** The texture descriptor */
            readonly props: TextureProperties;
            /** The sampler descriptor */
            readonly sampler: SamplerProperties;
            /**
                * Write data to the texture.
                * @param data the data to write
                * @param offset the offset to the GPU texture to write data to. Defaults to [0, 0, 0].
                * @param size the size of the content to write from data to texture
                * @param mipLevel the mipmap level to use. Defaults to 0.
                * @return this
                * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D
                * @see https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture
                */
            data(data: TextureData, offset: ReadonlyOrigin3D, size: ReadonlyExtent3D, mipLevel: Uint): Texture;
            /**
                * Generate mipmap for a texture object.
                * @param hint mipmap hint
                * @return this
                * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap
                */
            mipmap(hint: MipmapHint): Texture;
    }
    /**
        * A GPU render pass object.
        * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer
        * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpassdescriptor
        */
    export interface RenderPass {
            /** The render pass descriptor. */
            readonly props: RenderPassProperties;
            /**
                * Perform MSAA framebuffer resolve.
                */
            resolve(): void;
    }
    /**
        * A GPU shader object.
        * @see https://www.w3.org/TR/webgpu/#shader-module-creation
        */
    export interface Shader {
            /** The shader type. */
            readonly type: ShaderType;
            /** The shader source code. */
            readonly source: string;
    }
    /**
        * A GPU render pipeline object.
        * @see https://gpuweb.github.io/gpuweb/#gpurenderpipeline
        */
    export interface Pipeline {
            /** The pipeline descriptor. */
            readonly props: PipelineProperties;
    }
}

declare module 'mugl/common/gl/const' {
    /**
      * All WebGL core and extension constants.
      * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants
      * @see https://github.com/KhronosGroup/WebGL/blob/main/specs/latest/1.0/webgl.idl
      * @see https://github.com/KhronosGroup/WebGL/blob/main/specs/latest/2.0/webgl.idl
      * @see https://github.com/KhronosGroup/WebGL/tree/main/extensions
      * @packageDocumentation
      */
    export const DEPTH_BUFFER_BIT = 256;
    export const STENCIL_BUFFER_BIT = 1024;
    export const COLOR_BUFFER_BIT = 16384;
    export const POINTS = 0;
    export const LINES = 1;
    export const LINE_LOOP = 2;
    export const LINE_STRIP = 3;
    export const TRIANGLES = 4;
    export const TRIANGLE_STRIP = 5;
    export const TRIANGLE_FAN = 6;
    export const ZERO = 0;
    export const ONE = 1;
    export const SRC_COLOR = 768;
    export const ONE_MINUS_SRC_COLOR = 769;
    export const SRC_ALPHA = 770;
    export const ONE_MINUS_SRC_ALPHA = 771;
    export const DST_ALPHA = 772;
    export const ONE_MINUS_DST_ALPHA = 773;
    export const DST_COLOR = 774;
    export const ONE_MINUS_DST_COLOR = 775;
    export const SRC_ALPHA_SATURATE = 776;
    export const FUNC_ADD = 32774;
    export const BLEND_EQUATION = 32777;
    export const BLEND_EQUATION_RGB = 32777;
    export const BLEND_EQUATION_ALPHA = 34877;
    export const FUNC_SUBTRACT = 32778;
    export const FUNC_REVERSE_SUBTRACT = 32779;
    export const BLEND_DST_RGB = 32968;
    export const BLEND_SRC_RGB = 32969;
    export const BLEND_DST_ALPHA = 32970;
    export const BLEND_SRC_ALPHA = 32971;
    export const CONSTANT_COLOR = 32769;
    export const ONE_MINUS_CONSTANT_COLOR = 32770;
    export const CONSTANT_ALPHA = 32771;
    export const ONE_MINUS_CONSTANT_ALPHA = 32772;
    export const BLEND_COLOR = 32773;
    export const ARRAY_BUFFER = 34962;
    export const ELEMENT_ARRAY_BUFFER = 34963;
    export const ARRAY_BUFFER_BINDING = 34964;
    export const ELEMENT_ARRAY_BUFFER_BINDING = 34965;
    export const STREAM_DRAW = 35040;
    export const STATIC_DRAW = 35044;
    export const DYNAMIC_DRAW = 35048;
    export const BUFFER_SIZE = 34660;
    export const BUFFER_USAGE = 34661;
    export const CURRENT_VERTEX_ATTRIB = 34342;
    export const FRONT = 1028;
    export const BACK = 1029;
    export const FRONT_AND_BACK = 1032;
    export const CULL_FACE = 2884;
    export const BLEND = 3042;
    export const DITHER = 3024;
    export const STENCIL_TEST = 2960;
    export const DEPTH_TEST = 2929;
    export const SCISSOR_TEST = 3089;
    export const POLYGON_OFFSET_FILL = 32823;
    export const SAMPLE_ALPHA_TO_COVERAGE = 32926;
    export const SAMPLE_COVERAGE = 32928;
    export const NO_ERROR = 0;
    export const INVALID_ENUM = 1280;
    export const INVALID_VALUE = 1281;
    export const INVALID_OPERATION = 1282;
    export const OUT_OF_MEMORY = 1285;
    export const CW = 2304;
    export const CCW = 2305;
    export const LINE_WIDTH = 2849;
    export const ALIASED_POINT_SIZE_RANGE = 33901;
    export const ALIASED_LINE_WIDTH_RANGE = 33902;
    export const CULL_FACE_MODE = 2885;
    export const FRONT_FACE = 2886;
    export const DEPTH_RANGE = 2928;
    export const DEPTH_WRITEMASK = 2930;
    export const DEPTH_CLEAR_VALUE = 2931;
    export const DEPTH_FUNC = 2932;
    export const STENCIL_CLEAR_VALUE = 2961;
    export const STENCIL_FUNC = 2962;
    export const STENCIL_FAIL = 2964;
    export const STENCIL_PASS_DEPTH_FAIL = 2965;
    export const STENCIL_PASS_DEPTH_PASS = 2966;
    export const STENCIL_REF = 2967;
    export const STENCIL_VALUE_MASK = 2963;
    export const STENCIL_WRITEMASK = 2968;
    export const STENCIL_BACK_FUNC = 34816;
    export const STENCIL_BACK_FAIL = 34817;
    export const STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
    export const STENCIL_BACK_PASS_DEPTH_PASS = 34819;
    export const STENCIL_BACK_REF = 36003;
    export const STENCIL_BACK_VALUE_MASK = 36004;
    export const STENCIL_BACK_WRITEMASK = 36005;
    export const VIEWPORT = 2978;
    export const SCISSOR_BOX = 3088;
    export const COLOR_CLEAR_VALUE = 3106;
    export const COLOR_WRITEMASK = 3107;
    export const UNPACK_ALIGNMENT = 3317;
    export const PACK_ALIGNMENT = 3333;
    export const MAX_TEXTURE_SIZE = 3379;
    export const MAX_VIEWPORT_DIMS = 3386;
    export const SUBPIXEL_BITS = 3408;
    export const RED_BITS = 3410;
    export const GREEN_BITS = 3411;
    export const BLUE_BITS = 3412;
    export const ALPHA_BITS = 3413;
    export const DEPTH_BITS = 3414;
    export const STENCIL_BITS = 3415;
    export const POLYGON_OFFSET_UNITS = 10752;
    export const POLYGON_OFFSET_FACTOR = 32824;
    export const TEXTURE_BINDING_2D = 32873;
    export const SAMPLE_BUFFERS = 32936;
    export const SAMPLES = 32937;
    export const SAMPLE_COVERAGE_VALUE = 32938;
    export const SAMPLE_COVERAGE_INVERT = 32939;
    export const COMPRESSED_TEXTURE_FORMATS = 34467;
    export const DONT_CARE = 4352;
    export const FASTEST = 4353;
    export const NICEST = 4354;
    export const GENERATE_MIPMAP_HINT = 33170;
    export const BYTE = 5120;
    export const UNSIGNED_BYTE = 5121;
    export const SHORT = 5122;
    export const UNSIGNED_SHORT = 5123;
    export const INT = 5124;
    export const UNSIGNED_INT = 5125;
    export const FLOAT = 5126;
    export const DEPTH_COMPONENT = 6402;
    export const ALPHA = 6406;
    export const RGB = 6407;
    export const RGBA = 6408;
    export const LUMINANCE = 6409;
    export const LUMINANCE_ALPHA = 6410;
    export const UNSIGNED_SHORT_4_4_4_4 = 32819;
    export const UNSIGNED_SHORT_5_5_5_1 = 32820;
    export const UNSIGNED_SHORT_5_6_5 = 33635;
    export const FRAGMENT_SHADER = 35632;
    export const VERTEX_SHADER = 35633;
    export const MAX_VERTEX_ATTRIBS = 34921;
    export const MAX_VERTEX_UNIFORM_VECTORS = 36347;
    export const MAX_VARYING_VECTORS = 36348;
    export const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
    export const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
    export const MAX_TEXTURE_IMAGE_UNITS = 34930;
    export const MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
    export const SHADER_TYPE = 35663;
    export const DELETE_STATUS = 35712;
    export const LINK_STATUS = 35714;
    export const VALIDATE_STATUS = 35715;
    export const ATTACHED_SHADERS = 35717;
    export const ACTIVE_UNIFORMS = 35718;
    export const ACTIVE_ATTRIBUTES = 35721;
    export const SHADING_LANGUAGE_VERSION = 35724;
    export const CURRENT_PROGRAM = 35725;
    export const NEVER = 512;
    export const LESS = 513;
    export const EQUAL = 514;
    export const LEQUAL = 515;
    export const GREATER = 516;
    export const NOTEQUAL = 517;
    export const GEQUAL = 518;
    export const ALWAYS = 519;
    export const KEEP = 7680;
    export const REPLACE = 7681;
    export const INCR = 7682;
    export const DECR = 7683;
    export const INVERT = 5386;
    export const INCR_WRAP = 34055;
    export const DECR_WRAP = 34056;
    export const VENDOR = 7936;
    export const RENDERER = 7937;
    export const VERSION = 7938;
    export const NEAREST = 9728;
    export const LINEAR = 9729;
    export const NEAREST_MIPMAP_NEAREST = 9984;
    export const LINEAR_MIPMAP_NEAREST = 9985;
    export const NEAREST_MIPMAP_LINEAR = 9986;
    export const LINEAR_MIPMAP_LINEAR = 9987;
    export const TEXTURE_MAG_FILTER = 10240;
    export const TEXTURE_MIN_FILTER = 10241;
    export const TEXTURE_WRAP_S = 10242;
    export const TEXTURE_WRAP_T = 10243;
    export const TEXTURE_2D = 3553;
    export const TEXTURE = 5890;
    export const TEXTURE_CUBE_MAP = 34067;
    export const TEXTURE_BINDING_CUBE_MAP = 34068;
    export const TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
    export const TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
    export const TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
    export const TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
    export const TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
    export const TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
    export const MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
    export const TEXTURE0 = 33984;
    export const TEXTURE1 = 33985;
    export const TEXTURE2 = 33986;
    export const TEXTURE3 = 33987;
    export const TEXTURE4 = 33988;
    export const TEXTURE5 = 33989;
    export const TEXTURE6 = 33990;
    export const TEXTURE7 = 33991;
    export const TEXTURE8 = 33992;
    export const TEXTURE9 = 33993;
    export const TEXTURE10 = 33994;
    export const TEXTURE11 = 33995;
    export const TEXTURE12 = 33996;
    export const TEXTURE13 = 33997;
    export const TEXTURE14 = 33998;
    export const TEXTURE15 = 33999;
    export const TEXTURE16 = 34000;
    export const TEXTURE17 = 34001;
    export const TEXTURE18 = 34002;
    export const TEXTURE19 = 34003;
    export const TEXTURE20 = 34004;
    export const TEXTURE21 = 34005;
    export const TEXTURE22 = 34006;
    export const TEXTURE23 = 34007;
    export const TEXTURE24 = 34008;
    export const TEXTURE25 = 34009;
    export const TEXTURE26 = 34010;
    export const TEXTURE27 = 34011;
    export const TEXTURE28 = 34012;
    export const TEXTURE29 = 34013;
    export const TEXTURE30 = 34014;
    export const TEXTURE31 = 34015;
    export const ACTIVE_TEXTURE = 34016;
    export const REPEAT = 10497;
    export const CLAMP_TO_EDGE = 33071;
    export const MIRRORED_REPEAT = 33648;
    export const FLOAT_VEC2 = 35664;
    export const FLOAT_VEC3 = 35665;
    export const FLOAT_VEC4 = 35666;
    export const INT_VEC2 = 35667;
    export const INT_VEC3 = 35668;
    export const INT_VEC4 = 35669;
    export const BOOL = 35670;
    export const BOOL_VEC2 = 35671;
    export const BOOL_VEC3 = 35672;
    export const BOOL_VEC4 = 35673;
    export const FLOAT_MAT2 = 35674;
    export const FLOAT_MAT3 = 35675;
    export const FLOAT_MAT4 = 35676;
    export const SAMPLER_2D = 35678;
    export const SAMPLER_CUBE = 35680;
    export const VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
    export const VERTEX_ATTRIB_ARRAY_SIZE = 34339;
    export const VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
    export const VERTEX_ATTRIB_ARRAY_TYPE = 34341;
    export const VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
    export const VERTEX_ATTRIB_ARRAY_POINTER = 34373;
    export const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
    export const IMPLEMENTATION_COLOR_READ_TYPE = 35738;
    export const IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
    export const COMPILE_STATUS = 35713;
    export const LOW_FLOAT = 36336;
    export const MEDIUM_FLOAT = 36337;
    export const HIGH_FLOAT = 36338;
    export const LOW_INT = 36339;
    export const MEDIUM_INT = 36340;
    export const HIGH_INT = 36341;
    export const FRAMEBUFFER = 36160;
    export const RENDERBUFFER = 36161;
    export const RGBA4 = 32854;
    export const RGB5_A1 = 32855;
    export const RGB565 = 36194;
    export const DEPTH_COMPONENT16 = 33189;
    export const STENCIL_INDEX = 6401;
    export const STENCIL_INDEX8 = 36168;
    export const DEPTH_STENCIL = 34041;
    export const RENDERBUFFER_WIDTH = 36162;
    export const RENDERBUFFER_HEIGHT = 36163;
    export const RENDERBUFFER_INTERNAL_FORMAT = 36164;
    export const RENDERBUFFER_RED_SIZE = 36176;
    export const RENDERBUFFER_GREEN_SIZE = 36177;
    export const RENDERBUFFER_BLUE_SIZE = 36178;
    export const RENDERBUFFER_ALPHA_SIZE = 36179;
    export const RENDERBUFFER_DEPTH_SIZE = 36180;
    export const RENDERBUFFER_STENCIL_SIZE = 36181;
    export const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
    export const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
    export const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
    export const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
    export const COLOR_ATTACHMENT0 = 36064;
    export const DEPTH_ATTACHMENT = 36096;
    export const STENCIL_ATTACHMENT = 36128;
    export const DEPTH_STENCIL_ATTACHMENT = 33306;
    export const NONE = 0;
    export const FRAMEBUFFER_COMPLETE = 36053;
    export const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
    export const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
    export const FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
    export const FRAMEBUFFER_UNSUPPORTED = 36061;
    export const FRAMEBUFFER_BINDING = 36006;
    export const RENDERBUFFER_BINDING = 36007;
    export const MAX_RENDERBUFFER_SIZE = 34024;
    export const INVALID_FRAMEBUFFER_OPERATION = 1286;
    export const UNPACK_FLIP_Y_WEBGL = 37440;
    export const UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
    export const CONTEXT_LOST_WEBGL = 37442;
    export const UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
    export const BROWSER_DEFAULT_WEBGL = 37444;
    export const READ_BUFFER = 3074;
    export const UNPACK_ROW_LENGTH = 3314;
    export const UNPACK_SKIP_ROWS = 3315;
    export const UNPACK_SKIP_PIXELS = 3316;
    export const PACK_ROW_LENGTH = 3330;
    export const PACK_SKIP_ROWS = 3331;
    export const PACK_SKIP_PIXELS = 3332;
    export const COLOR = 6144;
    export const DEPTH = 6145;
    export const STENCIL = 6146;
    export const RED = 6403;
    export const RGB8 = 32849;
    export const RGBA8 = 32856;
    export const RGB10_A2 = 32857;
    export const TEXTURE_BINDING_3D = 32874;
    export const UNPACK_SKIP_IMAGES = 32877;
    export const UNPACK_IMAGE_HEIGHT = 32878;
    export const TEXTURE_3D = 32879;
    export const TEXTURE_WRAP_R = 32882;
    export const MAX_3D_TEXTURE_SIZE = 32883;
    export const UNSIGNED_INT_2_10_10_10_REV = 33640;
    export const MAX_ELEMENTS_VERTICES = 33000;
    export const MAX_ELEMENTS_INDICES = 33001;
    export const TEXTURE_MIN_LOD = 33082;
    export const TEXTURE_MAX_LOD = 33083;
    export const TEXTURE_BASE_LEVEL = 33084;
    export const TEXTURE_MAX_LEVEL = 33085;
    export const MIN = 32775;
    export const MAX = 32776;
    export const DEPTH_COMPONENT24 = 33190;
    export const MAX_TEXTURE_LOD_BIAS = 34045;
    export const TEXTURE_COMPARE_MODE = 34892;
    export const TEXTURE_COMPARE_FUNC = 34893;
    export const CURRENT_QUERY = 34917;
    export const QUERY_RESULT = 34918;
    export const QUERY_RESULT_AVAILABLE = 34919;
    export const STREAM_READ = 35041;
    export const STREAM_COPY = 35042;
    export const STATIC_READ = 35045;
    export const STATIC_COPY = 35046;
    export const DYNAMIC_READ = 35049;
    export const DYNAMIC_COPY = 35050;
    export const MAX_DRAW_BUFFERS = 34852;
    export const DRAW_BUFFER0 = 34853;
    export const DRAW_BUFFER1 = 34854;
    export const DRAW_BUFFER2 = 34855;
    export const DRAW_BUFFER3 = 34856;
    export const DRAW_BUFFER4 = 34857;
    export const DRAW_BUFFER5 = 34858;
    export const DRAW_BUFFER6 = 34859;
    export const DRAW_BUFFER7 = 34860;
    export const DRAW_BUFFER8 = 34861;
    export const DRAW_BUFFER9 = 34862;
    export const DRAW_BUFFER10 = 34863;
    export const DRAW_BUFFER11 = 34864;
    export const DRAW_BUFFER12 = 34865;
    export const DRAW_BUFFER13 = 34866;
    export const DRAW_BUFFER14 = 34867;
    export const DRAW_BUFFER15 = 34868;
    export const MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
    export const MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
    export const SAMPLER_3D = 35679;
    export const SAMPLER_2D_SHADOW = 35682;
    export const FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
    export const PIXEL_PACK_BUFFER = 35051;
    export const PIXEL_UNPACK_BUFFER = 35052;
    export const PIXEL_PACK_BUFFER_BINDING = 35053;
    export const PIXEL_UNPACK_BUFFER_BINDING = 35055;
    export const FLOAT_MAT2x3 = 35685;
    export const FLOAT_MAT2x4 = 35686;
    export const FLOAT_MAT3x2 = 35687;
    export const FLOAT_MAT3x4 = 35688;
    export const FLOAT_MAT4x2 = 35689;
    export const FLOAT_MAT4x3 = 35690;
    export const SRGB = 35904;
    export const SRGB8 = 35905;
    export const SRGB8_ALPHA8 = 35907;
    export const COMPARE_REF_TO_TEXTURE = 34894;
    export const RGBA32F = 34836;
    export const RGB32F = 34837;
    export const RGBA16F = 34842;
    export const RGB16F = 34843;
    export const VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
    export const MAX_ARRAY_TEXTURE_LAYERS = 35071;
    export const MIN_PROGRAM_TEXEL_OFFSET = 35076;
    export const MAX_PROGRAM_TEXEL_OFFSET = 35077;
    export const MAX_VARYING_COMPONENTS = 35659;
    export const TEXTURE_2D_ARRAY = 35866;
    export const TEXTURE_BINDING_2D_ARRAY = 35869;
    export const R11F_G11F_B10F = 35898;
    export const UNSIGNED_INT_10F_11F_11F_REV = 35899;
    export const RGB9_E5 = 35901;
    export const UNSIGNED_INT_5_9_9_9_REV = 35902;
    export const TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
    export const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
    export const TRANSFORM_FEEDBACK_VARYINGS = 35971;
    export const TRANSFORM_FEEDBACK_BUFFER_START = 35972;
    export const TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
    export const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
    export const RASTERIZER_DISCARD = 35977;
    export const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
    export const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
    export const INTERLEAVED_ATTRIBS = 35980;
    export const SEPARATE_ATTRIBS = 35981;
    export const TRANSFORM_FEEDBACK_BUFFER = 35982;
    export const TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
    export const RGBA32UI = 36208;
    export const RGB32UI = 36209;
    export const RGBA16UI = 36214;
    export const RGB16UI = 36215;
    export const RGBA8UI = 36220;
    export const RGB8UI = 36221;
    export const RGBA32I = 36226;
    export const RGB32I = 36227;
    export const RGBA16I = 36232;
    export const RGB16I = 36233;
    export const RGBA8I = 36238;
    export const RGB8I = 36239;
    export const RED_INTEGER = 36244;
    export const RGB_INTEGER = 36248;
    export const RGBA_INTEGER = 36249;
    export const SAMPLER_2D_ARRAY = 36289;
    export const SAMPLER_2D_ARRAY_SHADOW = 36292;
    export const SAMPLER_CUBE_SHADOW = 36293;
    export const UNSIGNED_INT_VEC2 = 36294;
    export const UNSIGNED_INT_VEC3 = 36295;
    export const UNSIGNED_INT_VEC4 = 36296;
    export const INT_SAMPLER_2D = 36298;
    export const INT_SAMPLER_3D = 36299;
    export const INT_SAMPLER_CUBE = 36300;
    export const INT_SAMPLER_2D_ARRAY = 36303;
    export const UNSIGNED_INT_SAMPLER_2D = 36306;
    export const UNSIGNED_INT_SAMPLER_3D = 36307;
    export const UNSIGNED_INT_SAMPLER_CUBE = 36308;
    export const UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
    export const DEPTH_COMPONENT32F = 36012;
    export const DEPTH32F_STENCIL8 = 36013;
    export const FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
    export const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
    export const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
    export const FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
    export const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
    export const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
    export const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
    export const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
    export const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
    export const FRAMEBUFFER_DEFAULT = 33304;
    export const UNSIGNED_INT_24_8 = 34042;
    export const DEPTH24_STENCIL8 = 35056;
    export const UNSIGNED_NORMALIZED = 35863;
    export const DRAW_FRAMEBUFFER_BINDING = 36006;
    export const READ_FRAMEBUFFER = 36008;
    export const DRAW_FRAMEBUFFER = 36009;
    export const READ_FRAMEBUFFER_BINDING = 36010;
    export const RENDERBUFFER_SAMPLES = 36011;
    export const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
    export const MAX_COLOR_ATTACHMENTS = 36063;
    export const COLOR_ATTACHMENT1 = 36065;
    export const COLOR_ATTACHMENT2 = 36066;
    export const COLOR_ATTACHMENT3 = 36067;
    export const COLOR_ATTACHMENT4 = 36068;
    export const COLOR_ATTACHMENT5 = 36069;
    export const COLOR_ATTACHMENT6 = 36070;
    export const COLOR_ATTACHMENT7 = 36071;
    export const COLOR_ATTACHMENT8 = 36072;
    export const COLOR_ATTACHMENT9 = 36073;
    export const COLOR_ATTACHMENT10 = 36074;
    export const COLOR_ATTACHMENT11 = 36075;
    export const COLOR_ATTACHMENT12 = 36076;
    export const COLOR_ATTACHMENT13 = 36077;
    export const COLOR_ATTACHMENT14 = 36078;
    export const COLOR_ATTACHMENT15 = 36079;
    export const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
    export const MAX_SAMPLES = 36183;
    export const HALF_FLOAT = 5131;
    export const RG = 33319;
    export const RG_INTEGER = 33320;
    export const R8 = 33321;
    export const RG8 = 33323;
    export const R16F = 33325;
    export const R32F = 33326;
    export const RG16F = 33327;
    export const RG32F = 33328;
    export const R8I = 33329;
    export const R8UI = 33330;
    export const R16I = 33331;
    export const R16UI = 33332;
    export const R32I = 33333;
    export const R32UI = 33334;
    export const RG8I = 33335;
    export const RG8UI = 33336;
    export const RG16I = 33337;
    export const RG16UI = 33338;
    export const RG32I = 33339;
    export const RG32UI = 33340;
    export const VERTEX_ARRAY_BINDING = 34229;
    export const R8_SNORM = 36756;
    export const RG8_SNORM = 36757;
    export const RGB8_SNORM = 36758;
    export const RGBA8_SNORM = 36759;
    export const SIGNED_NORMALIZED = 36764;
    export const COPY_READ_BUFFER = 36662;
    export const COPY_WRITE_BUFFER = 36663;
    export const COPY_READ_BUFFER_BINDING = 36662;
    export const COPY_WRITE_BUFFER_BINDING = 36663;
    export const UNIFORM_BUFFER = 35345;
    export const UNIFORM_BUFFER_BINDING = 35368;
    export const UNIFORM_BUFFER_START = 35369;
    export const UNIFORM_BUFFER_SIZE = 35370;
    export const MAX_VERTEX_UNIFORM_BLOCKS = 35371;
    export const MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
    export const MAX_COMBINED_UNIFORM_BLOCKS = 35374;
    export const MAX_UNIFORM_BUFFER_BINDINGS = 35375;
    export const MAX_UNIFORM_BLOCK_SIZE = 35376;
    export const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
    export const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
    export const UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
    export const ACTIVE_UNIFORM_BLOCKS = 35382;
    export const UNIFORM_TYPE = 35383;
    export const UNIFORM_SIZE = 35384;
    export const UNIFORM_BLOCK_INDEX = 35386;
    export const UNIFORM_OFFSET = 35387;
    export const UNIFORM_ARRAY_STRIDE = 35388;
    export const UNIFORM_MATRIX_STRIDE = 35389;
    export const UNIFORM_IS_ROW_MAJOR = 35390;
    export const UNIFORM_BLOCK_BINDING = 35391;
    export const UNIFORM_BLOCK_DATA_SIZE = 35392;
    export const UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
    export const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
    export const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
    export const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
    export const INVALID_INDEX = 4294967295;
    export const MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
    export const MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
    export const MAX_SERVER_WAIT_TIMEOUT = 37137;
    export const OBJECT_TYPE = 37138;
    export const SYNC_CONDITION = 37139;
    export const SYNC_STATUS = 37140;
    export const SYNC_FLAGS = 37141;
    export const SYNC_FENCE = 37142;
    export const SYNC_GPU_COMMANDS_COMPLETE = 37143;
    export const UNSIGNALED = 37144;
    export const SIGNALED = 37145;
    export const ALREADY_SIGNALED = 37146;
    export const TIMEOUT_EXPIRED = 37147;
    export const CONDITION_SATISFIED = 37148;
    export const WAIT_FAILED = 37149;
    export const SYNC_FLUSH_COMMANDS_BIT = 1;
    export const VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
    export const ANY_SAMPLES_PASSED = 35887;
    export const ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
    export const SAMPLER_BINDING = 35097;
    export const RGB10_A2UI = 36975;
    export const INT_2_10_10_10_REV = 36255;
    export const TRANSFORM_FEEDBACK = 36386;
    export const TRANSFORM_FEEDBACK_PAUSED = 36387;
    export const TRANSFORM_FEEDBACK_ACTIVE = 36388;
    export const TRANSFORM_FEEDBACK_BINDING = 36389;
    export const TEXTURE_IMMUTABLE_FORMAT = 37167;
    export const MAX_ELEMENT_INDEX = 36203;
    export const TEXTURE_IMMUTABLE_LEVELS = 33503;
    export const TIMEOUT_IGNORED = -1;
    export const MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
    export const VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 35070;
    export const MIN_EXT = 32775;
    export const MAX_EXT = 32776;
    export const MAX_CLIP_DISTANCES_EXT = 3378;
    export const MAX_CULL_DISTANCES_EXT = 33529;
    export const MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 33530;
    export const CLIP_DISTANCE0_EXT = 12288;
    export const CLIP_DISTANCE1_EXT = 12289;
    export const CLIP_DISTANCE2_EXT = 12290;
    export const CLIP_DISTANCE3_EXT = 12291;
    export const CLIP_DISTANCE4_EXT = 12292;
    export const CLIP_DISTANCE5_EXT = 12293;
    export const CLIP_DISTANCE6_EXT = 12294;
    export const CLIP_DISTANCE7_EXT = 12295;
    export const RGBA16F_EXT = 34842;
    export const RGB16F_EXT = 34843;
    export const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 33297;
    export const UNSIGNED_NORMALIZED_EXT = 35863;
    export const QUERY_COUNTER_BITS_EXT = 34916;
    export const CURRENT_QUERY_EXT = 34917;
    export const QUERY_RESULT_EXT = 34918;
    export const QUERY_RESULT_AVAILABLE_EXT = 34919;
    export const TIME_ELAPSED_EXT = 35007;
    export const TIMESTAMP_EXT = 36392;
    export const GPU_DISJOINT_EXT = 36795;
    export const SRGB_EXT = 35904;
    export const SRGB_ALPHA_EXT = 35906;
    export const SRGB8_ALPHA8_EXT = 35907;
    export const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 33296;
    export const COMPRESSED_RGBA_BPTC_UNORM_EXT = 36492;
    export const COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 36493;
    export const COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 36494;
    export const COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 36495;
    export const COMPRESSED_RED_RGTC1_EXT = 36283;
    export const COMPRESSED_SIGNED_RED_RGTC1_EXT = 36284;
    export const COMPRESSED_RED_GREEN_RGTC2_EXT = 36285;
    export const COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286;
    export const TEXTURE_MAX_ANISOTROPY_EXT = 34046;
    export const MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
    export const R16_EXT = 33322;
    export const RG16_EXT = 33324;
    export const RGB16_EXT = 32852;
    export const RGBA16_EXT = 32859;
    export const R16_SNORM_EXT = 36760;
    export const RG16_SNORM_EXT = 36761;
    export const RGB16_SNORM_EXT = 36762;
    export const RGBA16_SNORM_EXT = 36763;
    export const COMPLETION_STATUS_KHR = 37297;
    export const FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 35723;
    export const HALF_FLOAT_OES = 36193;
    export const VERTEX_ARRAY_BINDING_OES = 34229;
    export const FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448;
    export const FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450;
    export const MAX_VIEWS_OVR = 38449;
    export const FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451;
    export const MULTIPLY = 37524;
    export const SCREEN = 37525;
    export const OVERLAY = 37526;
    export const DARKEN = 37527;
    export const LIGHTEN = 37528;
    export const COLORDODGE = 37529;
    export const COLORBURN = 37530;
    export const HARDLIGHT = 37531;
    export const SOFTLIGHT = 37532;
    export const DIFFERENCE = 37534;
    export const EXCLUSION = 37536;
    export const HSL_HUE = 37549;
    export const HSL_SATURATION = 37550;
    export const HSL_COLOR = 37551;
    export const HSL_LUMINOSITY = 37552;
    export const RGBA32F_EXT = 34836;
    export const COMPRESSED_RGBA_ASTC_4x4_KHR = 37808;
    export const COMPRESSED_RGBA_ASTC_5x4_KHR = 37809;
    export const COMPRESSED_RGBA_ASTC_5x5_KHR = 37810;
    export const COMPRESSED_RGBA_ASTC_6x5_KHR = 37811;
    export const COMPRESSED_RGBA_ASTC_6x6_KHR = 37812;
    export const COMPRESSED_RGBA_ASTC_8x5_KHR = 37813;
    export const COMPRESSED_RGBA_ASTC_8x6_KHR = 37814;
    export const COMPRESSED_RGBA_ASTC_8x8_KHR = 37815;
    export const COMPRESSED_RGBA_ASTC_10x5_KHR = 37816;
    export const COMPRESSED_RGBA_ASTC_10x6_KHR = 37817;
    export const COMPRESSED_RGBA_ASTC_10x8_KHR = 37818;
    export const COMPRESSED_RGBA_ASTC_10x10_KHR = 37819;
    export const COMPRESSED_RGBA_ASTC_12x10_KHR = 37820;
    export const COMPRESSED_RGBA_ASTC_12x12_KHR = 37821;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852;
    export const COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853;
    export const COMPRESSED_R11_EAC = 37488;
    export const COMPRESSED_SIGNED_R11_EAC = 37489;
    export const COMPRESSED_RG11_EAC = 37490;
    export const COMPRESSED_SIGNED_RG11_EAC = 37491;
    export const COMPRESSED_RGB8_ETC2 = 37492;
    export const COMPRESSED_SRGB8_ETC2 = 37493;
    export const COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;
    export const COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;
    export const COMPRESSED_RGBA8_ETC2_EAC = 37496;
    export const COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;
    export const COMPRESSED_RGB_ETC1_WEBGL = 36196;
    export const COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
    export const COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
    export const COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
    export const COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
    export const COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
    export const COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
    export const COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
    export const COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
    export const COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;
    export const COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;
    export const COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;
    export const COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;
    export const UNMASKED_VENDOR_WEBGL = 37445;
    export const UNMASKED_RENDERER_WEBGL = 37446;
    export const UNSIGNED_INT_24_8_WEBGL = 34042;
    export const COLOR_ATTACHMENT0_WEBGL = 36064;
    export const COLOR_ATTACHMENT1_WEBGL = 36065;
    export const COLOR_ATTACHMENT2_WEBGL = 36066;
    export const COLOR_ATTACHMENT3_WEBGL = 36067;
    export const COLOR_ATTACHMENT4_WEBGL = 36068;
    export const COLOR_ATTACHMENT5_WEBGL = 36069;
    export const COLOR_ATTACHMENT6_WEBGL = 36070;
    export const COLOR_ATTACHMENT7_WEBGL = 36071;
    export const COLOR_ATTACHMENT8_WEBGL = 36072;
    export const COLOR_ATTACHMENT9_WEBGL = 36073;
    export const COLOR_ATTACHMENT10_WEBGL = 36074;
    export const COLOR_ATTACHMENT11_WEBGL = 36075;
    export const COLOR_ATTACHMENT12_WEBGL = 36076;
    export const COLOR_ATTACHMENT13_WEBGL = 36077;
    export const COLOR_ATTACHMENT14_WEBGL = 36078;
    export const COLOR_ATTACHMENT15_WEBGL = 36079;
    export const DRAW_BUFFER0_WEBGL = 34853;
    export const DRAW_BUFFER1_WEBGL = 34854;
    export const DRAW_BUFFER2_WEBGL = 34855;
    export const DRAW_BUFFER3_WEBGL = 34856;
    export const DRAW_BUFFER4_WEBGL = 34857;
    export const DRAW_BUFFER5_WEBGL = 34858;
    export const DRAW_BUFFER6_WEBGL = 34859;
    export const DRAW_BUFFER7_WEBGL = 34860;
    export const DRAW_BUFFER8_WEBGL = 34861;
    export const DRAW_BUFFER9_WEBGL = 34862;
    export const DRAW_BUFFER10_WEBGL = 34863;
    export const DRAW_BUFFER11_WEBGL = 34864;
    export const DRAW_BUFFER12_WEBGL = 34865;
    export const DRAW_BUFFER13_WEBGL = 34866;
    export const DRAW_BUFFER14_WEBGL = 34867;
    export const DRAW_BUFFER15_WEBGL = 34868;
    export const MAX_COLOR_ATTACHMENTS_WEBGL = 36063;
    export const MAX_DRAW_BUFFERS_WEBGL = 34852;
}

