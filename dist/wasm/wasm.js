import{BindingType,SamplerBindingType,TextureDimension,TextureSampleType,WebGL}from"../gpu/index.js";import{IdArena}from"./id.js";import{dataView,decodeStr,toWebGLContextAttributes}from"./deserialize.js";const API=WebGL;export function WebAssemblyGL(){const futures=new IdArena;const images=new IdArena;const imageMap={};const canvases=new IdArena;const canvasMap={};const resources=new IdArena;function deleteResource(id){const resource=resources.get(id);if(resource){resource.destroy();resources.delete(id)}}const self={memory:null,["is-future-done"](future){const f=futures.get(future);if(f){if(!f.done){return false}else{futures.delete(future)}}return true},["create-image"](ptr,len){const img=new Image;img.crossOrigin="anonymous";img.src=decodeStr(self.memory,ptr,len);return images.add(img)},["get-image-by-id"](ptr,len){const id=decodeStr(self.memory,ptr,len);if(imageMap[id]){return imageMap[id]}const image=document.getElementById(id);if(!image){return 0}return imageMap[id]=images.add(image)},["delete-image"](img){images.delete(img)},["get-image-width"](img){var _images$get;return((_images$get=images.get(img))===null||_images$get===void 0?void 0:_images$get.width)||0},["get-image-height"](img){var _images$get2;return((_images$get2=images.get(img))===null||_images$get2===void 0?void 0:_images$get2.height)||0},["get-canvas-by-id"](ptr,len){const id=decodeStr(self.memory,ptr,len);if(canvasMap[id]){return canvasMap[id]}const canvas=document.getElementById(id);if(!canvas){return 0}return canvasMap[id]=canvases.add(canvas)},["get-canvas-width"](canvas){var _canvases$get;return((_canvases$get=canvases.get(canvas))===null||_canvases$get===void 0?void 0:_canvases$get.width)||0},["get-canvas-height"](canvas){var _canvases$get2;return((_canvases$get2=canvases.get(canvas))===null||_canvases$get2===void 0?void 0:_canvases$get2.height)||0},["webgl-request-device"](canvasId,attrs,features){const canvas=canvases.get(canvasId);if(canvas){const device=WebGL.requestWebGL2Device(canvas,toWebGLContextAttributes(attrs),features);if(device){return resources.add(device)}}return 0},["webgl-generate-mipmap"](device,tex,hint){WebGL.generateMipmap(resources.get(device),resources.get(tex),hint)},["reset-device"](device){API.resetDevice(resources.get(device))},["delete-device"]:deleteResource,["is-device-lost"](device){return API.isDeviceLost(resources.get(device))},["get-device-features"](device){return API.getDeviceFeatures(resources.get(device))},["create-buffer"](device,size,usage){const ret=API.createBuffer(resources.get(device),{size:size>>>0,usage:usage>>>0});return resources.add(ret)},["delete-buffer"]:deleteResource,["create-texture"](device,width,height,depth,mipLevelCount,sampleCount,dimension,format,usage){const ret=API.createTexture(resources.get(device),{size:[width>>>0,height>>>0,depth>>>0],mipLevelCount:mipLevelCount>>>0,sampleCount:sampleCount>>>0,dimension:dimension>>>0,format:format>>>0,usage:usage>>>0});return resources.add(ret)},["delete-texture"]:deleteResource,["create-sampler"](device,addressModeU,addressModeV,addressModeW,magFilter,minFilter,mipmapFilter,lodMinClamp,lodMaxClamp,compare,maxAnisotropy){const ret=API.createSampler(resources.get(device),{addressModeU:addressModeU>>>0,addressModeV:addressModeV>>>0,addressModeW:addressModeW>>>0,magFilter:magFilter>>>0,minFilter:minFilter>>>0,mipmapFilter:mipmapFilter>>>0,lodMinClamp,lodMaxClamp,compare:compare>>>0,maxAnisotropy:maxAnisotropy>>>0});return resources.add(ret)},["delete-sampler"]:deleteResource,["create-shader"](device,codePtr,codeLen,usage){const ret=API.createShader(resources.get(device),{code:decodeStr(self.memory,codePtr,codeLen),usage:usage>>>0});return resources.add(ret)},["delete-shader"]:deleteResource,["create-bind-group-layout"](device,entriesPtr,entriesLen){const entries=[];for(let i=0;i<entriesLen;i++){const base=entriesPtr+i*32;const ptr0=dataView(self.memory).getUint32(base+0,true);const len0=dataView(self.memory).getUint32(base+4,true);const type=dataView(self.memory).getUint8(base+16);let bufferDynamicOffset=false;let samplerType=SamplerBindingType.Filtering;let textureSampleType=TextureSampleType.Float;let textureDimension=TextureDimension.D2;let textureMultisampled=false;switch(type){case BindingType.Buffer:bufferDynamicOffset=!!dataView(self.memory).getUint8(base+20);break;case BindingType.Sampler:samplerType=dataView(self.memory).getUint32(base+20,true)>>>0;break;case BindingType.Texture:textureSampleType=dataView(self.memory).getUint32(base+20,true)>>>0;textureDimension=dataView(self.memory).getUint32(base+24,true)>>>0;textureMultisampled=!!dataView(self.memory).getUint8(base+28);break;default:throw new RangeError("invalid variant discriminant for BindingType");}entries.push({label:decodeStr(self.memory,ptr0,len0),binding:dataView(self.memory).getUint32(base+8,true)>>>0,visibility:dataView(self.memory).getUint32(base+12,true)>>>0,type,bufferDynamicOffset,samplerType,textureSampleType,textureDimension,textureMultisampled})}const ret=API.createBindGroupLayout(resources.get(device),{entries});return resources.add(ret)},["delete-bind-group-layout"]:deleteResource,["create-bind-group"](device,layout,entriesPtr,entriesLen){const entries=[];for(let i=0;i<entriesLen;i++){const base=entriesPtr+i*24;const type=dataView(self.memory).getUint8(base+4);let buffer=null;let bufferOffset=0;let bufferSize=0;let sampler=null;let texture=null;switch(type){case BindingType.Buffer:buffer=resources.get(dataView(self.memory).getFloat64(base+8,true));bufferOffset=dataView(self.memory).getUint32(base+16,true);bufferSize=dataView(self.memory).getUint32(base+20,true);break;case BindingType.Sampler:sampler=resources.get(dataView(self.memory).getFloat64(base+8,true));break;case BindingType.Texture:texture=resources.get(dataView(self.memory).getFloat64(base+8,true));break;default:throw new RangeError("invalid variant discriminant for BindingResource");}entries.push({binding:dataView(self.memory).getUint32(base+0,true),buffer,bufferOffset,bufferSize,sampler,texture})}const ret=API.createBindGroup(resources.get(device),{layout:resources.get(layout),entries});return resources.add(ret)},["delete-bind-group"]:deleteResource,["create-render-pipeline"](device,vertex,fragment,attributesPtr,attributesLen,buffersPtr,buffersLen,bindGroupsPtr,bindGroupsLen,topology,indexFormat,frontFace,cullMode,sampleCount,alphaToCoverage,hasDepthStencil,depthStencilFormat,depthWrite,depthCompare,stencilFrontCompare,stencilFrontFailOp,stencilFrontDepthFailOp,stencilFrontPassOp,stencilBackCompare,stencilBackFailOp,stencilBackDepthFailOp,stencilBackPassOp,stencilReadMask,stencilWriteMask,depthBias,depthBiasSlopeScale,depthBiasClamp,colorsPtr,colorsLen,colorWriteMask,blendColorOperation,blendColorSrcFactor,blendColorDstFactor,blendAlphaOperation,blendAlphaSrcFactor,blendAlphaDstFactor){const attributes=[];for(let i=0;i<attributesLen;i++){const base=attributesPtr+i*12;attributes.push({format:dataView(self.memory).getUint32(base+0,true),offset:dataView(self.memory).getUint32(base+4,true),shaderLocation:dataView(self.memory).getUint32(base+8,true)})}const buffers=[];for(let i=0;i<buffersLen;i++){const base=buffersPtr+i*16;const start=dataView(self.memory).getUint32(base+0,true);const len=dataView(self.memory).getUint32(base+4,true);buffers.push({attributes:attributes.slice(start,start+len),stride:dataView(self.memory).getUint32(base+8,true),stepMode:dataView(self.memory).getUint32(base+12,true)})}const bindGroups=[];for(let i=0;i<bindGroupsLen;i++){const base=bindGroupsPtr+i*8;bindGroups.push(resources.get(dataView(self.memory).getFloat64(base+0,true)))}const targets=[];for(let i=0;i<colorsLen;i++){const base=colorsPtr+i*32;targets.push({format:dataView(self.memory).getUint32(base+0,true)>>>0,writeMask:dataView(self.memory).getUint32(base+4,true)>>>0,blendColor:{operation:dataView(self.memory).getUint32(base+8,true)>>>0,srcFactor:dataView(self.memory).getUint32(base+12,true)>>>0,dstFactor:dataView(self.memory).getUint32(base+16,true)>>>0},blendAlpha:{operation:dataView(self.memory).getUint32(base+20,true)>>>0,srcFactor:dataView(self.memory).getUint32(base+24,true)>>>0,dstFactor:dataView(self.memory).getUint32(base+28,true)>>>0}})}const ret=API.createRenderPipeline(resources.get(device),{vertex:resources.get(vertex),fragment:resources.get(fragment),buffers,bindGroups,primitive:{topology:topology>>>0,indexFormat:indexFormat>>>0,frontFace:frontFace>>>0,cullMode:cullMode>>>0},multisample:{sampleCount:sampleCount>>>0,alphaToCoverage:!!alphaToCoverage},depthStencil:hasDepthStencil?{format:depthStencilFormat>>>0,depthWrite:!!depthWrite,depthCompare:depthCompare>>>0,stencilFront:{compare:stencilFrontCompare>>>0,failOp:stencilFrontFailOp>>>0,depthFailOp:stencilFrontDepthFailOp>>>0,passOp:stencilFrontPassOp>>>0},stencilBack:{compare:stencilBackCompare>>>0,failOp:stencilBackFailOp>>>0,depthFailOp:stencilBackDepthFailOp>>>0,passOp:stencilBackPassOp>>>0},stencilReadMask:stencilReadMask>>>0,stencilWriteMask:stencilWriteMask>>>0,depthBias,depthBiasSlopeScale,depthBiasClamp}:null,targets:{writeMask:colorWriteMask>>>0,blendColor:{operation:blendColorOperation>>>0,srcFactor:blendColorSrcFactor>>>0,dstFactor:blendColorDstFactor>>>0},blendAlpha:{operation:blendAlphaOperation>>>0,srcFactor:blendAlphaSrcFactor>>>0,dstFactor:blendAlphaDstFactor>>>0},targets}});return resources.add(ret)},["delete-render-pipeline"]:deleteResource,["create-render-pass"](device,clearDepth,clearStencil,clearColorRed,clearColorGreen,clearColorBlue,clearColorAlpha,isOffscreen,depthStencilTexture,depthStecilMipLevel,depthStecilSlice,colorsPtr,colorsLen){let desc;switch(isOffscreen){case 0:desc={clearDepth,clearStencil,clearColor:isNaN(clearColorRed)?null:[clearColorRed,clearColorGreen,clearColorBlue,clearColorAlpha]};break;case 1:{const colors=[];for(let i=0;i<colorsLen;i++){const base=colorsPtr+i*32;const clear=[dataView(self.memory).getFloat32(base+16,true),dataView(self.memory).getFloat32(base+20,true),dataView(self.memory).getFloat32(base+24,true),dataView(self.memory).getFloat32(base+28,true)];colors.push({view:{texture:resources.get(dataView(self.memory).getFloat64(base+0,true)),mipLevel:dataView(self.memory).getUint32(base+8,true),slice:dataView(self.memory).getUint32(base+12,true)},clear:isNaN(clear[0])?null:clear})}desc={clearDepth,clearStencil,colors,depthStencil:{texture:resources.get(depthStencilTexture),mipLevel:depthStecilMipLevel>>>0,slice:depthStecilSlice>>>0}};break}default:throw new RangeError("invalid variant discriminant for RenderPassDescriptor");}const ret=API.createRenderPass(resources.get(device),desc);return resources.add(ret)},["delete-render-pass"]:deleteResource,["read-buffer"](device,buffer,offset,outPtr,size){const ret=API.readBuffer(resources.get(device),resources.get(buffer),new Uint8Array(self.memory.buffer.slice(outPtr,outPtr+size*1),offset>>>0));return futures.add(ret)},["write-buffer"](device,buffer,dataPtr,size,offset){API.writeBuffer(resources.get(device),resources.get(buffer),new Uint8Array(self.memory.buffer.slice(dataPtr,dataPtr+size*1)),offset>>>0)},["copy-buffer"](device,src,dst,size,srcOffset,dstOffset){API.copyBuffer(resources.get(device),resources.get(src),resources.get(dst),size>>>0,srcOffset>>>0,dstOffset>>>0)},["write-texture"](device,texture,mipLevel,x,y,z,dataPtr,dataLen,offset,bytesPerRow,rowsPerImage,width,height,depth){API.writeTexture(resources.get(device),{texture:resources.get(texture),mipLevel:mipLevel>>>0,origin:[x>>>0,y>>>0,z>>>0]},new Uint8Array(self.memory.buffer.slice(dataPtr,dataPtr+dataLen*1)),{offset:offset>>>0,bytesPerRow:bytesPerRow>>>0,rowsPerImage:rowsPerImage>>>0},[width>>>0,height>>>0,depth>>>0])},["copy-external-image-to-texture"](device,src,srcX,srcY,dst,mipLevel,dstX,dstY,dstZ,width,height){API.copyExternalImageToTexture(resources.get(device),{src:images.get(src),origin:[srcX>>>0,srcY>>>0]},{texture:resources.get(dst),mipLevel:mipLevel>>>0,origin:[dstX>>>0,dstY>>>0,dstZ>>>0]},[width>>>0,height>>>0])},["copy-texture"](device,src,srcMipLevel,srcX,srcY,srcZ,dst,dstMipLevel,dstX,dstY,dstZ,width,height,depth){API.copyTexture(resources.get(device),{texture:resources.get(src),mipLevel:srcMipLevel>>>0,origin:[srcX>>>0,srcY>>>0,srcZ>>>0]},{texture:resources.get(dst),mipLevel:dstMipLevel>>>0,origin:[dstX>>>0,dstY>>>0,dstZ>>>0]},[width>>>0,height>>>0,depth>>>0])},["copy-texture-to-buffer"](device,src,srcMipLevel,srcX,srcY,srcZ,dst,offset,bytesPerRow,rowsPerImage,width,height,depth){API.copyTextureToBuffer(resources.get(device),{texture:resources.get(src),mipLevel:srcMipLevel>>>0,origin:[srcX>>>0,srcY>>>0,srcZ>>>0]},resources.get(dst),{offset:offset>>>0,bytesPerRow:bytesPerRow>>>0,rowsPerImage:rowsPerImage>>>0},[width>>>0,height>>>0,depth>>>0])},["begin-render-pass"](device,pass){API.beginRenderPass(resources.get(device),resources.get(pass))},["begin-default-pass"](device,clearDepth,clearStencil,clearColorRed,clearColorGreen,clearColorBlue,clearColorAlpha){API.beginDefaultPass(resources.get(device),{clearColor:isNaN(clearColorRed)?null:[clearColorRed,clearColorGreen,clearColorBlue,clearColorAlpha],clearDepth,clearStencil})},["submit-render-pass"](device){API.submitRenderPass(resources.get(device))},["set-render-pipeline"](device,pipeline){API.setRenderPipeline(resources.get(device),resources.get(pipeline))},["set-index"](device,index){API.setIndex(resources.get(device),resources.get(index))},["set-vertex"](device,slot,vertex,offset){API.setVertex(resources.get(device),slot>>>0,resources.get(vertex),offset>>>0)},["set-bind-group"](device,slot,bindGroup,offsetsPtr,offsetsLen){API.setBindGroup(resources.get(device),slot>>>0,resources.get(bindGroup),new Uint32Array(self.memory.buffer.slice(offsetsPtr,offsetsPtr+offsetsLen*4)))},["draw"](device,vertexCount,instanceCount,firstVertex,firstInstance){API.draw(resources.get(device),vertexCount>>>0,instanceCount>>>0,firstVertex>>>0,firstInstance>>>0)},["draw-indexed"](device,indexCount,instanceCount,firstIndex,firstInstance){API.drawIndexed(resources.get(device),indexCount>>>0,instanceCount>>>0,firstIndex>>>0,firstInstance>>>0)},["set-viewport"](device,x,y,width,height,minDepth,maxDepth){API.setViewport(resources.get(device),x>>>0,y>>>0,width>>>0,height>>>0,minDepth>>>0,maxDepth>>>0)},["set-scissor-rect"](device,x,y,width,height){API.setScissorRect(resources.get(device),x>>>0,y>>>0,width>>>0,height>>>0)},["set-blend-const"](device,red,green,blue,alpha){API.setBlendConst(resources.get(device),[red,green,blue,alpha])},["set-stencil-ref"](device,ref){API.setStencilRef(resources.get(device),ref>>>0)}};return self}
//# sourceMappingURL=wasm.js.map