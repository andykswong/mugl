{"version":3,"sources":["../../js/wasm/deserialize.ts"],"names":["UTF8_DECODER","TextDecoder","DATA_VIEW","DataView","ArrayBuffer","dataView","mem","buffer","decodeStr","ptr","len","decode","Uint8Array","toWebGLContextAttributes","flags","alpha","antialias","depth","desynchronized","failIfMajorPerformanceCaveat","powerPreference","premultipliedAlpha","preserveDrawingBuffer","stencil"],"mappings":"AAEA,MAAO,MAAMA,CAAAA,YAAY,CAAG,GAAIC,CAAAA,WAAJ,CAAgB,OAAhB,CAArB,CAEP,GAAIC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,QAAJ,CAAa,GAAIC,CAAAA,WAAJ,CAAgB,CAAhB,CAAb,CAAhB,CAEA,MAAO,SAASC,CAAAA,QAAT,CAAkBC,GAAlB,CAAqD,CAC1D,GAAIJ,SAAS,CAACK,MAAV,GAAqBD,GAAG,CAACC,MAA7B,CAAqC,CACnCL,SAAS,CAAG,GAAIC,CAAAA,QAAJ,CAAaG,GAAG,CAACC,MAAjB,CACb,CACD,MAAOL,CAAAA,SACR,CAED,MAAO,SAASM,CAAAA,SAAT,CAAmBF,GAAnB,CAA4CG,GAA5C,CAAyDC,GAAzD,CAA8E,CACnF,MAAOV,CAAAA,YAAY,CAACW,MAAb,CAAoB,GAAIC,CAAAA,UAAJ,CAAeN,GAAG,CAACC,MAAnB,CAA2BE,GAA3B,CAAgCC,GAAhC,CAApB,CACR,CAED,MAAO,SAASG,CAAAA,wBAAT,CAAkCC,KAAlC,CAAsE,CAC3E,MAAO,CACLC,KAAK,CAAE,CAAC,EAAGD,KAAD,CAAkB,CAApB,CADH,CAELE,SAAS,CAAE,CAAC,EAAGF,KAAD,CAAmB,GAAK,CAA1B,CAFP,CAGLG,KAAK,CAAE,CAAC,EAAGH,KAAD,CAAmB,GAAK,CAA1B,CAHH,CAILI,cAAc,CAAE,CAAC,EAAGJ,KAAD,CAAmB,GAAK,CAA1B,CAJZ,CAKLK,4BAA4B,CAAE,CAAC,EAAGL,KAAD,CAAmB,GAAK,CAA1B,CAL1B,CAMLM,eAAe,CAAIN,KAAD,CAAmB,GAAK,CAAzB,CAA+B,kBAA/B,CAAoD,WANhE,CAOLO,kBAAkB,CAAE,CAAC,EAAGP,KAAD,CAAmB,GAAK,CAA1B,CAPhB,CAQLQ,qBAAqB,CAAE,CAAC,EAAGR,KAAD,CAAmB,GAAK,CAA1B,CARnB,CASLS,OAAO,CAAE,CAAC,EAAGT,KAAD,CAAmB,GAAK,CAA1B,CATL,CAWR","sourcesContent":["import { Num, UInt } from '../gpu';\n\nexport const UTF8_DECODER = new TextDecoder('utf-8');\n\nlet DATA_VIEW = new DataView(new ArrayBuffer(0));\n\nexport function dataView(mem: WebAssembly.Memory): DataView {\n  if (DATA_VIEW.buffer !== mem.buffer) {\n    DATA_VIEW = new DataView(mem.buffer);\n  }\n  return DATA_VIEW;\n}\n\nexport function decodeStr(mem: WebAssembly.Memory, ptr: number, len: number): string {\n  return UTF8_DECODER.decode(new Uint8Array(mem.buffer, ptr, len));\n}\n\nexport function toWebGLContextAttributes(flags: Num): WebGLContextAttributes {\n  return {\n    alpha: !!((flags as UInt) & 1),\n    antialias: !!((flags as UInt) & (1 << 1)),\n    depth: !!((flags as UInt) & (1 << 2)),\n    desynchronized: !!((flags as UInt) & (1 << 3)),\n    failIfMajorPerformanceCaveat: !!((flags as UInt) & (1 << 4)),\n    powerPreference: ((flags as UInt) & (1 << 5)) ? 'high-performance' : 'low-power',\n    premultipliedAlpha: !!((flags as UInt) & (1 << 6)),\n    preserveDrawingBuffer: !!((flags as UInt) & (1 << 7)),\n    stencil: !!((flags as UInt) & (1 << 8)),\n  };\n}\n"],"file":"deserialize.js"}