{"version":3,"sources":["../../js/wasm/id.ts"],"names":["MAX_SAFE_GENERATION","UNIT_GENERATION","id","index","generation","indexOf","generationOf","Symbol","iterator","IdAllocator","generations","freeList","values","size","length","clear","create","pop","Math","abs","push","delete","has","forEach","callbackFn","thisArg","call","i","IdArena","allocator","data","entries","add","value","get","undefined","keys"],"mappings":"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","sourcesContent":["const MAX_SAFE_GENERATION = (1 << 21) - 1;\nconst UNIT_GENERATION = 2 ** 32;\n\n/** Newtype that represents an ID. Wraps a number. */\nexport type Id<T> = number & { readonly __type: T };\n\n/** Creates a generational index ID from index and generation parts. */\nexport function id<T>(index: number, generation: number): Id<T> {\n  return ((generation & MAX_SAFE_GENERATION) * UNIT_GENERATION + (index >>> 0)) as Id<T>;\n}\n\n/** Returns the index part (lower 32bit) of a generational index ID. */\nexport function indexOf<T>(id: Id<T>): number {\n  return id >>> 0;\n}\n\n/** Returns the generation part (upper 21bit) of a generational index ID. */\nexport function generationOf<T>(id: Id<T>): number {\n  return (id / UNIT_GENERATION) & MAX_SAFE_GENERATION;\n}\n\n/** Allocator of generational index IDs. */\nexport class IdAllocator<T> {\n  private generations: number[] = [];\n  private freeList: number[] = [];\n\n  public [Symbol.iterator](): Iterable<Id<T>> {\n    return this.values();\n  }\n\n  public get size(): number {\n    return this.generations.length - this.freeList.length;\n  }\n\n  public clear(): void {\n    this.generations.length = 0;\n    this.freeList.length = 0;\n  }\n\n  public create(): Id<T> {\n    let index: number;\n    let generation: number;\n\n    if (this.freeList.length > 0) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      index = this.freeList.pop()!;\n      generation = Math.abs(this.generations[index]);\n      this.generations[index] = generation;\n    } else {\n      index = this.generations.length;\n      generation = index ? 0 : 1; // avoids 0 Id as it is usually reserved for null.\n      this.generations.push(generation);\n    }\n\n    return id(index, generation);\n  }\n\n  public delete(id: Id<T>): boolean {\n    if (!this.has(id)) {\n      return false;\n    }\n\n    const index = indexOf(id);\n    // Use negative sign to indicate free space\n    let generation = -((this.generations[index] + 1) & MAX_SAFE_GENERATION);\n    if (!index && !generation) {\n      ++generation; // avoids 0 Id as it is usually reserved for null.\n    }\n\n    this.generations[index] = generation;\n    this.freeList.push(index);\n\n    return true;\n  }\n\n  public forEach<C>(callbackFn: (id: Id<T>, index: number, self: IdAllocator<T>) => void, thisArg?: C): void {\n    let index = 0;\n    for (const id of this.values()) {\n      callbackFn.call(thisArg, id, index, this);\n      index += 1;\n    }\n  }\n\n  public has(id: Id<T>): boolean {\n    return (indexOf(id) < this.generations.length\n      && generationOf(id) === this.generations[indexOf(id)]);\n  }\n\n  public * values(): Iterable<Id<T>> {\n    for (let i = 0; i < this.generations.length; ++i) {\n      const generation = this.generations[i];\n      if (this.generations[i] >= 0) {\n        yield id(i, generation);\n      }\n    }\n  }\n}\n\n/** Value Arena that uses generational index as key. */\nexport class IdArena<K, V> {\n  private allocator: IdAllocator<K> = new IdAllocator<K>();\n  private data: V[] = [];\n\n  public [Symbol.iterator](): Iterable<[Id<K>, V]> {\n    return this.entries();\n  }\n\n  public add(value: V): Id<K> {\n    const id = this.allocator.create();\n    this.data[indexOf(id)] = value;\n    return id;\n  }\n\n  public clear(): void {\n    this.allocator.clear();\n    this.data.length = 0;\n  }\n\n  public delete(id: Id<K>): boolean {\n    if (this.allocator.delete(id)) {\n      delete this.data[indexOf(id)];\n      return true;\n    }\n    return false;\n  }\n\n  public * entries(): Iterable<[Id<K>, V]> {\n    for (const id of this.allocator.values()) {\n      yield [id, this.data[indexOf(id)]];\n    }\n  }\n\n  public forEach<C>(callbackFn: (value: V, id: Id<K>, self: IdArena<K, V>) => void, thisArg?: C): void {\n    this.allocator.forEach((id) => {\n      callbackFn.call(thisArg, this.data[indexOf(id)], id, this);\n    }, thisArg);\n  }\n\n  public get(id: Id<K>): V | undefined {\n    return this.has(id) ? this.data[indexOf(id)] : undefined;\n  }\n\n  public has(id: Id<K>): boolean {\n    return this.allocator.has(id);\n  }\n\n  public keys(): Iterable<Id<K>> {\n    return this.allocator.values();\n  }\n\n  public * values(): Iterable<V> {\n    for (const id of this.allocator.values()) {\n      yield this.data[indexOf(id)];\n    }\n  }\n}\n"],"file":"id.js"}