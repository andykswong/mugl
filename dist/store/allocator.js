let _Symbol$iterator;import{create as id,generationOf,indexOf,MAX_SAFE_GENERATION}from"./id.js";_Symbol$iterator=Symbol.iterator;export class IdAllocator{constructor(){this.generations=[];this.freeList=[]}get size(){return this.generations.length-this.freeList.length}clear(){this.generations.length=0;this.freeList.length=0}create(){let index;let generation;if(this.freeList.length>0){index=this.freeList.pop();generation=Math.abs(this.generations[index]);this.generations[index]=generation}else{index=this.generations.length;generation=index?0:1;this.generations.push(generation)}return id(index,generation)}delete(id){if(!this.has(id)){return false}const index=indexOf(id);let generation=-(this.generations[index]+1&MAX_SAFE_GENERATION);if(!index&&!generation){++generation}this.generations[index]=generation;this.freeList.push(index);return true}forEach(callbackFn,thisArg){let index=0;for(const id of this.values()){callbackFn.call(thisArg,id,index,this);index+=1}}has(id){return indexOf(id)<this.generations.length&&generationOf(id)===this.generations[indexOf(id)]}*values(){for(let i=0;i<this.generations.length;++i){const generation=this.generations[i];if(this.generations[i]>=0){yield id(i,generation)}}}[_Symbol$iterator](){return this.values()}}
//# sourceMappingURL=allocator.js.map