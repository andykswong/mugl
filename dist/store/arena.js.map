{"version":3,"sources":["../../js/store/arena.ts"],"names":["indexOf","IdAllocator","Symbol","iterator","Arena","allocator","data","add","value","id","create","clear","length","delete","entries","values","forEach","callbackFn","thisArg","call","get","has","undefined","keys"],"mappings":"4BAASA,O,sBACAC,W,uCAwDGC,MAAM,CAACC,Q,CArDnB,MAAO,MAAMC,CAAAA,KAAS,oBACVC,SADU,CACe,GAAIJ,CAAAA,WADnB,MAEVK,IAFU,CAEE,EAFF,CAIXC,GAAG,CAACC,KAAD,CAAmB,CACzB,KAAMC,CAAAA,EAAE,CAAG,KAAKJ,SAAL,CAAeK,MAAf,EAAX,CACA,KAAKJ,IAAL,CAAUN,OAAO,CAACS,EAAD,CAAjB,EAAyBD,KAAzB,CACA,MAAOC,CAAAA,EACV,CAEME,KAAK,EAAS,CACjB,KAAKN,SAAL,CAAeM,KAAf,GACA,KAAKL,IAAL,CAAUM,MAAV,CAAmB,CACtB,CAEMC,MAAM,CAACJ,EAAD,CAAsB,CAC/B,GAAI,KAAKJ,SAAL,CAAeQ,MAAf,CAAsBJ,EAAtB,CAAJ,CAA+B,CAC3B,MAAO,MAAKH,IAAL,CAAUN,OAAO,CAACS,EAAD,CAAjB,CAAP,CACA,MAAO,KACV,CACD,MAAO,MACV,CAEe,CAAPK,OAAO,EAA0B,CACtC,IAAK,KAAML,CAAAA,EAAX,GAAiB,MAAKJ,SAAL,CAAeU,MAAf,EAAjB,CAA0C,CACtC,KAAM,CAACN,EAAD,CAAK,KAAKH,IAAL,CAAUN,OAAO,CAACS,EAAD,CAAjB,CAAL,CACT,CACJ,CAEMO,OAAO,CAAIC,UAAJ,CAAgEC,OAAhE,CAAmF,CAC7F,KAAKb,SAAL,CAAeW,OAAf,CAAwBP,EAAD,EAAQ,CAC3BQ,UAAU,CAACE,IAAX,CAAgBD,OAAhB,CAAyB,KAAKZ,IAAL,CAAUN,OAAO,CAACS,EAAD,CAAjB,CAAzB,CAAiDA,EAAjD,CAAqD,IAArD,CACH,CAFD,CAEGS,OAFH,CAGH,CAEME,GAAG,CAACX,EAAD,CAA4B,CAClC,MAAO,MAAKY,GAAL,CAASZ,EAAT,EAAe,KAAKH,IAAL,CAAUN,OAAO,CAACS,EAAD,CAAjB,CAAf,CAAwCa,SAClD,CAEMD,GAAG,CAACZ,EAAD,CAAsB,CAC5B,MAAO,MAAKJ,SAAL,CAAegB,GAAf,CAAmBZ,EAAnB,CACV,CAEMc,IAAI,EAAqB,CAC5B,MAAO,MAAKlB,SAAL,CAAeU,MAAf,EACV,CAEc,CAANA,MAAM,EAAgB,CAC3B,IAAK,KAAMN,CAAAA,EAAX,GAAiB,MAAKJ,SAAL,CAAeU,MAAf,EAAjB,CAA0C,CACtC,KAAM,MAAKT,IAAL,CAAUN,OAAO,CAACS,EAAD,CAAjB,CACT,CACJ,CAED,oBAAkD,CAC9C,MAAO,MAAKK,OAAL,EACV,CAvDiB","sourcesContent":["import { indexOf } from \"./id\";\nimport { IdAllocator } from \"./allocator\";\n\n/** Value Arena that uses generational index as key. */\nexport class Arena<V> {\n    private allocator: IdAllocator = new IdAllocator();\n    private data: V[] = [];\n\n    public add(value: V): number {\n        const id = this.allocator.create();\n        this.data[indexOf(id)] = value;\n        return id;\n    }\n\n    public clear(): void {\n        this.allocator.clear();\n        this.data.length = 0;\n    }\n\n    public delete(id: number): boolean {\n        if (this.allocator.delete(id)) {\n            delete this.data[indexOf(id)];\n            return true;\n        }\n        return false;\n    }\n\n    public * entries(): Iterable<[number, V]> {\n        for (const id of this.allocator.values()) {\n            yield [id, this.data[indexOf(id)]];\n        }\n    }\n\n    public forEach<C>(callbackFn: (value: V, id: number, self: Arena<V>) => void, thisArg?: C): void {\n        this.allocator.forEach((id) => {\n            callbackFn.call(thisArg, this.data[indexOf(id)], id, this);\n        }, thisArg);\n    }\n\n    public get(id: number): V | undefined {\n        return this.has(id) ? this.data[indexOf(id)] : undefined;\n    }\n\n    public has(id: number): boolean {\n        return this.allocator.has(id);\n    }\n\n    public keys(): Iterable<number> {\n        return this.allocator.values();\n    }\n\n    public * values(): Iterable<V> {\n        for (const id of this.allocator.values()) {\n            yield this.data[indexOf(id)];\n        }\n    }\n\n    public [Symbol.iterator](): Iterable<[number, V]> {\n        return this.entries();\n    }\n}\n"],"file":"arena.js"}