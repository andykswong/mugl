{"version":3,"sources":["../../js/store/maps.ts"],"names":["indexOf","Symbol","iterator","GenIdMap","map","Map","size","clear","delete","id","entry","get","entries","values","forEach","callbackFn","thisArg","call","undefined","has","keys","set","value","SparseSetMap","sparse","ids","dense","length","index","denseIndex","pop","i","isNaN","push"],"mappings":"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","sourcesContent":["import { indexOf } from \"./id\";\n\n/** Generational index map backend by a Map. */\nexport class GenIdMap<V> {\n  private map: Map<number, [number, V]> = new Map();\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public clear(): void {\n    this.map.clear();\n  }\n\n  public delete(id: number): boolean {\n    const entry = this.map.get(indexOf(id));\n    if (entry && entry[0] === id) {\n      this.map.delete(indexOf(id));\n      return true;\n    }\n    return false;\n  }\n\n  public entries(): Iterable<[number, V]> {\n    return this.map.values();\n  }\n\n  public forEach<C>(callbackFn: (value: V, id: number, self: GenIdMap<V>) => void, thisArg?: C): void {\n    this.map.forEach((entry) => {\n      callbackFn.call(thisArg, entry[1], entry[0], this);\n    });\n  }\n\n  public get(id: number): V | undefined {\n    const entry = this.map.get(indexOf(id));\n    if (entry && entry[0] === id) {\n      return entry[1];\n    }\n    return undefined;\n  }\n\n  public has(id: number): boolean {\n    const entry = this.map.get(indexOf(id));\n    return !!entry && entry[0] === id;\n  }\n\n  public * keys(): Iterable<number> {\n    for (const entry of this.map.values()) {\n      yield entry[0];\n    }\n  }\n\n  public set(id: number, value: V): GenIdMap<V> {\n    this.map.set(indexOf(id), [id, value]);\n    return this;\n  }\n\n  public * values(): Iterable<V> {\n    for (const entry of this.map.values()) {\n      yield entry[1];\n    }\n  }\n\n  public [Symbol.iterator](): Iterable<[number, V]> {\n      return this.entries();\n  }\n}\n\n/** Sparse set based map with generational index as key. */\nexport class SparseSetMap<V> {\n  private sparse: number[] = [];\n  private ids: number[] = [];\n  private dense: V[] = [];\n\n  public get size(): number {\n    return this.dense.length;\n  }\n\n  public clear(): void {\n    this.sparse.length = 0;\n    this.ids.length = 0;\n    this.dense.length = 0;\n  }\n\n  public delete(id: number): boolean {\n    if (this.has(id)) {\n      const index = indexOf(id);\n      const denseIndex = this.sparse[index];\n\n      this.sparse[indexOf(this.ids[this.size - 1])] = denseIndex;\n      this.ids[denseIndex] = this.ids[this.size - 1];\n      this.dense[denseIndex] = this.dense[this.size - 1];\n\n      this.sparse[index] = -1;\n      this.ids.pop();\n      this.dense.pop();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public * entries(): Iterable<[number, V]> {\n    for (let i = 0; i < this.ids.length; ++i) {\n      yield [this.ids[i], this.dense[i]];\n    }\n  }\n\n  public forEach<C>(callbackFn: (value: V, id: number, self: SparseSetMap<V>) => void, thisArg?: C): void {\n    this.ids.forEach((id, i) => {\n      callbackFn.call(thisArg, this.dense[i], id, this);\n    });\n  }\n\n  public get(id: number): V | undefined {\n    return this.has(id) ? this.dense[this.sparse[indexOf(id)]] : undefined;\n  }\n\n  public has(id: number): boolean {\n    return (this.ids[this.sparse[indexOf(id)]] === id);\n  }\n\n  public * keys(): Iterable<number> {\n    for (let i = 0; i < this.ids.length; ++i) {\n      yield this.ids[i];\n    }\n  }\n\n  public set(id: number, value: V): SparseSetMap<V> {\n    const denseIndex = this.sparse[indexOf(id)];\n    if (!isNaN(denseIndex) && denseIndex >= 0) {\n      this.ids[denseIndex] = id;\n      this.dense[denseIndex] = value;\n    } else {\n      this.sparse[indexOf(id)] = this.ids.length;\n      this.ids.push(id);\n      this.dense.push(value);\n    }\n    return this;\n  }\n\n  public * values(): Iterable<V> {\n    for (let i = 0; i < this.ids.length; ++i) {\n      yield this.dense[i];\n    }\n  }\n\n  public [Symbol.iterator](): Iterable<[number, V]> {\n      return this.entries();\n  }\n}\n"],"file":"maps.js"}