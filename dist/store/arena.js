let _Symbol$iterator;import{indexOf}from"./id.js";import{IdAllocator}from"./allocator.js";_Symbol$iterator=Symbol.iterator;export class Arena{constructor(){this.allocator=new IdAllocator;this.data=[]}add(value){const id=this.allocator.create();this.data[indexOf(id)]=value;return id}clear(){this.allocator.clear();this.data.length=0}delete(id){if(this.allocator.delete(id)){delete this.data[indexOf(id)];return true}return false}*entries(){for(const id of this.allocator.values()){yield[id,this.data[indexOf(id)]]}}forEach(callbackFn,thisArg){this.allocator.forEach(id=>{callbackFn.call(thisArg,this.data[indexOf(id)],id,this)},thisArg)}get(id){return this.has(id)?this.data[indexOf(id)]:undefined}has(id){return this.allocator.has(id)}keys(){return this.allocator.values()}*values(){for(const id of this.allocator.values()){yield this.data[indexOf(id)]}}[_Symbol$iterator](){return this.entries()}}
//# sourceMappingURL=arena.js.map