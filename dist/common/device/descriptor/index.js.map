{"version":3,"sources":["../../../../src/common/device/descriptor/index.ts"],"names":["AddressMode","BlendFactor","BlendOp","BufferType","ColorMask","CompareFunc","CullMode","FilterMode","FrontFace","IndexFormat","MinFilterMode","PixelFormat","PrimitiveType","StencilOp","TexType","UniformFormat","UniformType","Usage","BufferDescriptor","type","Vertex","usage","Static","TextureDescriptor","Tex2D","format","RGBA8","width","height","depth","mipLevels","samples","renderTarget","SamplerDescriptor","wrapU","Clamp","wrapV","wrapW","magFilter","Nearest","minFilter","minLOD","maxLOD","maxAniso","RenderPassDescriptor","color","clearColor","clearDepth","NaN","clearStencil","ShaderDescriptor","source","PipelineState","raster","stencil","blend","PipelineDescriptor","indexFormat","UInt16","mode","Tri","buffers","uniforms","VertexBufferLayout","attrs","stride","instanced","VertexAttribute","name","shaderLoc","offset","RasterizationState","frontFace","CCW","cullMode","None","depthBias","depthBiasSlopeScale","alphaToCoverage","DepthState","write","compare","Always","StencilState","frontCompare","frontFailOp","Keep","frontZFailOp","frontPassOp","backCompare","backFailOp","backZFailOp","backPassOp","readMask","writeMask","BlendState","srcFactorRGB","One","dstFactorRGB","Zero","opRGB","Add","srcFactorAlpha","dstFactorAlpha","opAlpha","colorMask","All","UniformLayoutEntry","Value","texType","valueFormat","Float","UniformBinding","value","values","tex","buffer","bufferOffset","bufferSize","TextureData","image","images","TextureView","mipLevel","slice"],"mappings":"OACEA,W,CAAaC,W,CAAaC,O,CAASC,U,CAAYC,S,CAAWC,W,CAAaC,Q,CAAUC,U,CAAYC,S,CAAWC,W,CACxGC,a,CAAeC,W,CAAaC,a,CAA2BC,S,CAAWC,O,CAASC,a,CAAeC,W,CAAaC,K,mBAWzG,MAAO,MAAMC,CAAAA,gBAAiB,oBAE5BC,IAF4B,CAEThB,UAAU,CAACiB,MAFF,MAK5BC,KAL4B,CAKbJ,KAAK,CAACK,MALO,EAkB9B,MAAO,MAAMC,CAAAA,iBAAkB,oBAE7BJ,IAF6B,CAEbL,OAAO,CAACU,KAFK,MAK7BC,MAL6B,CAKPd,WAAW,CAACe,KALL,MAQ7BC,KAR6B,CAQf,CARe,MAW7BC,MAX6B,CAWd,CAXc,MAc7BC,KAd6B,CAcf,CAde,MAiB7BC,SAjB6B,CAiBX,CAjBW,MAoB7BC,OApB6B,CAoBb,CApBa,MA0B7BC,YA1B6B,CA0BL,KA1BK,EAoC/B,MAAO,MAAMC,CAAAA,iBAAkB,oBAE7BC,KAF6B,CAERlC,WAAW,CAACmC,KAFJ,MAK7BC,KAL6B,CAKRpC,WAAW,CAACmC,KALJ,MAQ7BE,KAR6B,CAQRrC,WAAW,CAACmC,KARJ,MAW7BG,SAX6B,CAWL/B,UAAU,CAACgC,OAXN,MAc7BC,SAd6B,CAcF9B,aAAa,CAAC6B,OAdZ,MAiB7BE,MAjB6B,CAiBb,CAAC,IAjBY,MAoB7BC,MApB6B,CAoBb,IApBa,MAuB7BC,QAvB6B,CAuBX,CAvBW,EAgC/B,MAAO,MAAMC,CAAAA,oBAAqB,oBAEhCC,KAFgC,CAET,EAFS,MAKhChB,KALgC,CAKJ,IALI,MAWhCiB,UAXgC,CAWG,IAXH,MAiBhCC,UAjBgC,CAiBZC,GAjBY,MAuBhCC,YAvBgC,CAuBVD,GAvBU,EAgClC,MAAO,MAAME,CAAAA,gBAAiB,oBAM5BC,MAN4B,CAMX,EANW,EAa9B,MAAO,MAAMC,CAAAA,aAAc,oBAGzBC,MAHyB,CAGI,EAHJ,MAMzBxB,KANyB,CAME,IANF,MASzByB,OATyB,CASM,IATN,MAYzBC,KAZyB,CAYE,IAZF,EAqB3B,MAAO,MAAMC,CAAAA,kBAAN,QAAiCJ,CAAAA,aAAc,0CAUpDK,WAVoD,CAUzBhD,WAAW,CAACiD,MAVa,MAapDC,IAboD,CAa9B/C,aAAa,CAACgD,GAbgB,MAgBpDC,OAhBoD,CAgBpB,EAhBoB,MAmBpDC,QAnBoD,CAmB1B,EAnB0B,EA4BtD,MAAO,MAAMC,CAAAA,kBAAmB,oBAE9BC,KAF8B,CAEH,EAFG,MAK9BC,MAL8B,CAKf,CALe,MAQ9BC,SAR8B,CAQT,KARS,EAiBhC,MAAO,MAAMC,CAAAA,eAAgB,oBAE3BC,IAF2B,CAEZ,EAFY,MAS3BC,SAT2B,CAST,CAAC,CATQ,MAY3BC,MAZ2B,CAYZ,CAAC,CAZW,EAqB7B,MAAO,MAAMC,CAAAA,kBAAmB,oBAE9BC,SAF8B,CAEPhE,SAAS,CAACiE,GAFH,MAK9BC,QAL8B,CAKTpE,QAAQ,CAACqE,IALA,MAQ9BC,SAR8B,CAQX,CARW,MAW9BC,mBAX8B,CAWD,CAXC,MAc9BC,eAd8B,CAcH,KAdG,EAqBhC,MAAO,MAAMC,CAAAA,UAAW,oBAEtBC,KAFsB,CAEL,KAFK,MAKtBC,OALsB,CAKC5E,WAAW,CAAC6E,MALb,EAYxB,MAAO,MAAMC,CAAAA,YAAa,oBAExBC,YAFwB,CAEI/E,WAAW,CAAC6E,MAFhB,MAKxBG,WALwB,CAKCxE,SAAS,CAACyE,IALX,MAQxBC,YARwB,CAQE1E,SAAS,CAACyE,IARZ,MAWxBE,WAXwB,CAWC3E,SAAS,CAACyE,IAXX,MAcxBG,WAdwB,CAcGpF,WAAW,CAAC6E,MAdf,MAiBxBQ,UAjBwB,CAiBA7E,SAAS,CAACyE,IAjBV,MAoBxBK,WApBwB,CAoBC9E,SAAS,CAACyE,IApBX,MAuBxBM,UAvBwB,CAuBA/E,SAAS,CAACyE,IAvBV,MA0BxBO,QA1BwB,CA0BP,GA1BO,MA6BxBC,SA7BwB,CA6BN,GA7BM,EAoC1B,MAAO,MAAMC,CAAAA,UAAW,oBAEtBC,YAFsB,CAEM/F,WAAW,CAACgG,GAFlB,MAKtBC,YALsB,CAKMjG,WAAW,CAACkG,IALlB,MAQtBC,KARsB,CAQLlG,OAAO,CAACmG,GARH,MAWtBC,cAXsB,CAWQrG,WAAW,CAACgG,GAXpB,MActBM,cAdsB,CAcQtG,WAAW,CAACkG,IAdpB,MAiBtBK,OAjBsB,CAiBHtG,OAAO,CAACmG,GAjBL,MAoBtBI,SApBsB,CAoBCrG,SAAS,CAACsG,GApBX,EA0BxB,MAAO,MAAMC,CAAAA,kBAAmB,oBAE9BvC,IAF8B,CAEf,EAFe,MAK9BjD,IAL8B,CAKVH,WAAW,CAAC4F,KALF,MAQ9BC,OAR8B,CAQX/F,OAAO,CAACU,KARG,MAW9BsF,WAX8B,CAWD/F,aAAa,CAACgG,KAXb,EA0BhC,MAAO,MAAMC,CAAAA,cAAe,oBAE1B5C,IAF0B,CAEX,EAFW,MAK1B6C,KAL0B,CAKX,CALW,MAQ1BC,MAR0B,CAQS,IART,MAW1BC,GAX0B,CAWJ,IAXI,MAc1BC,MAd0B,CAcF,IAdE,MAiB1BC,YAjB0B,CAiBL,CAjBK,MAuB1BC,UAvB0B,CAuBP,CAvBO,EAkC5B,MAAO,MAAMC,CAAAA,WAAY,oBAEvBH,MAFuB,CAEU,IAFV,MAMvBI,KANuB,CAMF,CANE,MASvBC,MATuB,CASC,EATD,EAgBzB,MAAO,MAAMC,CAAAA,WAAY,oBAEvBP,GAFuB,CAED,IAFC,MAKvBQ,QALuB,CAKN,CALM,MAQvBC,KARuB,CAQT,CARS","sourcesContent":["import {\r\n  AddressMode, BlendFactor, BlendOp, BufferType, ColorMask, CompareFunc, CullMode, FilterMode, FrontFace, IndexFormat,\r\n  MinFilterMode, PixelFormat, PrimitiveType, ShaderType, StencilOp, TexType, UniformFormat, UniformType, Usage, VertexFormat\r\n} from '../enums';\r\nimport { Buffer, Shader, Texture } from '../resources';\r\nimport { Float, ImageSource, ReadonlyColor, ReadonlyFloatList, Uint } from '../types';\r\n\r\n/**\r\n * Descriptor of a Buffer.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpubufferdescriptor\r\n */\r\nexport class BufferDescriptor {\r\n  /** The buffer type. Defaults to {@link BufferType.Vertex} */\r\n  type: BufferType = BufferType.Vertex;\r\n\r\n  /** Buffer usage hint. Defaults to {@link Usage.Static} */\r\n  usage: Usage = Usage.Static;\r\n\r\n  /** Buffer size in bytes */\r\n  // @ts-ignore: Valid in AssemblyScript\r\n  size: Uint;\r\n}\r\n\r\nexport type BufferProperties = BufferDescriptor;\r\n\r\n/**\r\n * Descriptor of a Texture.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gputexturedescriptor\r\n */\r\nexport class TextureDescriptor {\r\n  /** Textue type. Defaults to {@link TexType.Tex2D}. */\r\n  type: TexType = TexType.Tex2D;\r\n\r\n  /** Pixel format of the texture. Defaults to {@link PixelFormat.RGBA8}. */\r\n  format: PixelFormat = PixelFormat.RGBA8;\r\n\r\n  /** Width of texture. */\r\n  width: Uint = 1;\r\n\r\n  /** Height of texture. */\r\n  height: Uint = 1;\r\n\r\n  /** Depth of texture. */\r\n  depth: Uint = 1;\r\n\r\n  /** Number of mipmap levels. Defaults to 1. */\r\n  mipLevels: Uint = 1;\r\n\r\n  /** The number of samples for MSAA render targets. Defaults to 1. WebGL2 only. */\r\n  samples: Uint = 1;\r\n\r\n  /**\r\n   * Specifies if renderbuffer should be used for depth/stencil textures.\r\n   * Defaults to false, which will use a depth texture.\r\n   */\r\n  renderTarget: boolean = false;\r\n}\r\n\r\nexport type TextureProperties = TextureDescriptor;\r\n\r\n/**\r\n * Descriptor of a texture sampler.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\r\n * @see https://gpuweb.github.io/gpuweb/#GPUSamplerDescriptor\r\n */\r\nexport class SamplerDescriptor {\r\n  /** Texture address mode for texture width coordinates. Defaults to {@link AddressMode.Clamp} */\r\n  wrapU: AddressMode = AddressMode.Clamp;\r\n\r\n  /** Texture address mode for texture height coordinates. Defaults to {@link AddressMode.Clamp} */\r\n  wrapV: AddressMode = AddressMode.Clamp;\r\n\r\n  /** Texture address mode for texture depth coordinates. Defaults to {@link AddressMode.Clamp} */\r\n  wrapW: AddressMode = AddressMode.Clamp;\r\n\r\n  /** Texture filter mode for magnification. Defaults to {@link FilterMode.Nearest} */\r\n  magFilter: FilterMode = FilterMode.Nearest;\r\n\r\n  /** Texture filter mode for minimifaction. Defaults to {@link MinFilterMode.Nearest} */\r\n  minFilter: MinFilterMode = MinFilterMode.Nearest;\r\n\r\n  /** Minimum levels of detail. Defaults to -1000. WebGL2 only. */\r\n  minLOD: Float = -1000;\r\n\r\n  /** Maximum levels of detail. Defaults to 1000. WebGL2 only. */\r\n  maxLOD: Float = 1000;\r\n\r\n  /** Max anisotropy level. Defaults to 1. Requires EXT_texture_filter_anisotropic extension. */\r\n  maxAniso: Float = 1;\r\n}\r\n\r\nexport type SamplerProperties = SamplerDescriptor;\r\n\r\n/**\r\n * Descriptor of a Render Pass.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpassdescriptor\r\n */\r\nexport class RenderPassDescriptor {\r\n  /** List of color attachments. If null, defaults to render to screen. */\r\n  color: TextureView[] = [];\r\n\r\n  /** The depth/stencil attachment. Defaults to null. */\r\n  depth: TextureView | null = null;\r\n\r\n  /**\r\n   * The color load operation. Defaults to null, which does not clear the buffer.\r\n   * If a color is specified, it represents the clear color.\r\n   */\r\n  clearColor: ReadonlyColor | null = null;\r\n\r\n  /**\r\n   * The depth load operation. Defaults to NaN, which does not clear the buffer.\r\n   * If a number is specified, it represents the clear value.\r\n   */\r\n  clearDepth: Float = NaN;\r\n\r\n  /**\r\n   * The stencil load operation. Defaults to NaN, which does not clear the buffer.\r\n   * If a number is specified, it represents the clear value.\r\n   */\r\n  clearStencil: Float = NaN;\r\n}\r\n\r\nexport type RenderPassProperties = RenderPassDescriptor;\r\n\r\n/**\r\n * Descriptor of a shader.\r\n * @see https://www.w3.org/TR/webgpu/#shader-module-creation\r\n */\r\nexport class ShaderDescriptor {\r\n  /** The shader type. */\r\n  // @ts-ignore: Valid in AssemblyScript\r\n  type: ShaderType;\r\n\r\n  /** The shader source code. */\r\n  source: string = '';\r\n}\r\n\r\n/**\r\n * Descriptor of Pipeline states.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpipelinedescriptor\r\n */\r\nexport class PipelineState {\r\n  /** The rasterization states. Defaults to empty. */\r\n  // @ts-ignore: Valid in AssemblyScript\r\n  raster: RasterizationState = {};\r\n\r\n  /** The depth states. Defaults to null, which disables depth test. */\r\n  depth: DepthState | null = null;\r\n\r\n  /** The stencil states. Defaults to null, which disables stencil test. */\r\n  stencil: StencilState | null = null;\r\n\r\n  /** The blend states. Defaults to null, which disables blending. */\r\n  blend: BlendState | null = null;\r\n}\r\n\r\nexport type ReadonlyPipelineState = PipelineState;\r\n\r\n/**\r\n * Descriptor of a GPU pipeline resource.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpipelinedescriptor\r\n */\r\nexport class PipelineDescriptor extends PipelineState {\r\n  /** The vertex shader source code */\r\n  // @ts-ignore: Valid in AssemblyScript\r\n  vert: Shader | null;\r\n\r\n  /** The fragment shader source code */\r\n  // @ts-ignore: Valid in AssemblyScript\r\n  frag: Shader | null;\r\n\r\n  /** The index format. Defaults to {@link IndexFormat.Uint16} */\r\n  indexFormat: IndexFormat = IndexFormat.UInt16;\r\n\r\n  /** The primitive rendering mode. Defaults to {@link PrimitiveType.Tri} */\r\n  mode: PrimitiveType = PrimitiveType.Tri;\r\n\r\n  /** The vertex buffer layouts. */\r\n  buffers: VertexBufferLayout[] = [];\r\n\r\n  /** The uniform layouts. */\r\n  uniforms: UniformLayout = [];\r\n}\r\n\r\nexport type PipelineProperties = PipelineDescriptor;\r\n\r\n/**\r\n * Descriptor of vertex buffer layout.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpuvertexbufferlayoutdescriptor\r\n */\r\nexport class VertexBufferLayout {\r\n  /** The attribute descriptors */\r\n  attrs: VertexAttribute[] = [];\r\n\r\n  /** Stride in bytes. Defaults to be auto calculated. */\r\n  stride: Uint = 0;\r\n\r\n  /** Specify if this buffer's data is instanced. Defaults to false. */\r\n  instanced: boolean = false;\r\n}\r\n\r\nexport type ReadonlyVertexBufferLayout = VertexBufferLayout;\r\n\r\n/**\r\n * Descriptor of vertex attributes.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpuvertexattributedescriptor\r\n */\r\nexport class VertexAttribute {\r\n  /** Attribute name. */\r\n  name: string = '';\r\n\r\n  /** Vertex format */\r\n  // @ts-ignore: Valid in AssemblyScript\r\n  format: VertexFormat;\r\n\r\n  /** Shader location to bind to. Defaults to be auto calculated. */\r\n  shaderLoc: Uint = -1;\r\n\r\n  /** Offset in buffer in bytes. Defaults to be auto calculated. */\r\n  offset: Uint = -1;\r\n}\r\n\r\nexport type ReadonlyVertexAttribute = VertexAttribute;\r\n\r\n/**\r\n * Descriptor of the rasterization state.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpurasterizationstatedescriptor\r\n */\r\nexport class RasterizationState {\r\n  /** The front face. Default to {@link FrontFace.CCW} */\r\n  frontFace: FrontFace = FrontFace.CCW;\r\n\r\n  /** The face culling mode. Default to {@link CullMode.None} */\r\n  cullMode: CullMode = CullMode.None;\r\n\r\n  /** The depth bias aka polygonOffsetUnits. Defaults to 0. */\r\n  depthBias: Float = 0;\r\n\r\n  /** The depth bias slope scale aka polygonOffsetFactor. Defaults to 0. */\r\n  depthBiasSlopeScale: Float = 0;\r\n\r\n  /** Enables alpha to coverage mode. Defaults to false. */\r\n  alphaToCoverage: boolean = false;\r\n}\r\n\r\n/**\r\n * Descriptor of the depth state.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpudepthstencilstatedescriptor\r\n */\r\nexport class DepthState {\r\n  /** Depth-writes enabled. Defaults to false */\r\n  write: boolean = false;\r\n\r\n  /** Depth-compare function. Defaults to {@link CompareFunc.Always} */\r\n  compare: CompareFunc = CompareFunc.Always;\r\n}\r\n\r\n/**\r\n * Descriptor of the stencil state.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpudepthstencilstatedescriptor\r\n */\r\nexport class StencilState {\r\n  /** Front stencil compare function. Defaults to {@link CompareFunc.Always} */\r\n  frontCompare: CompareFunc = CompareFunc.Always;\r\n\r\n  /** Front stencil fail operation. Defaults to {@link StencilOp.Keep} */\r\n  frontFailOp: StencilOp = StencilOp.Keep;\r\n\r\n  /** Front stencil depth fail operation. Defaults to {@link StencilOp.Keep} */\r\n  frontZFailOp: StencilOp = StencilOp.Keep;\r\n\r\n  /** Front stencil pass operation. Defaults to {@link StencilOp.Keep} */\r\n  frontPassOp: StencilOp = StencilOp.Keep;\r\n\r\n  /** Back stencil compare function. Defaults to {@link CompareFunc.Always} */\r\n  backCompare: CompareFunc = CompareFunc.Always;\r\n\r\n  /** Back stencil fail operation. Defaults to {@link StencilOp.Keep} */\r\n  backFailOp: StencilOp = StencilOp.Keep;\r\n\r\n  /** Back stencil depth fail operation. Defaults to {@link StencilOp.Keep} */\r\n  backZFailOp: StencilOp = StencilOp.Keep;\r\n\r\n  /** Back stencil pass operation. Defaults to {@link StencilOp.Keep} */\r\n  backPassOp: StencilOp = StencilOp.Keep;\r\n\r\n  /** Stencil read mask. Defaults to 0xFF */\r\n  readMask: Uint = 0xFF;\r\n\r\n  /** Stencil write mask. Defaults to 0xFF */\r\n  writeMask: Uint = 0xFF;\r\n}\r\n\r\n/**\r\n * Descriptor of the blend state.\r\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpucolorstatedescriptor\r\n */\r\nexport class BlendState {\r\n  /** Blend source factor for RGB color. Defaults to {@link BlendFactor.One} */\r\n  srcFactorRGB: BlendFactor = BlendFactor.One;\r\n\r\n  /** Blend destination factor for RGB color. Defaults to {@link BlendFactor.Zero} */\r\n  dstFactorRGB: BlendFactor = BlendFactor.Zero;\r\n\r\n  /** Blend operation for alpha channel. Defaults to {@link BlendOp.Add} */\r\n  opRGB: BlendOp = BlendOp.Add;\r\n\r\n  /** Blend source factor for alpha channel. Defaults to {@link BlendFactor.One} */\r\n  srcFactorAlpha: BlendFactor = BlendFactor.One;\r\n\r\n  /** Blend destination factor for alpha channel. Defaults to {@link BlendFactor.Zero} */\r\n  dstFactorAlpha: BlendFactor = BlendFactor.Zero;\r\n\r\n  /** Blend operation for alpha channel. Defaults to {@link BlendOp.Add} */\r\n  opAlpha: BlendOp = BlendOp.Add;\r\n\r\n  /** Color-channels to write. Defaults to {@link ColorMask.All} */\r\n  colorMask: ColorMask = ColorMask.All;\r\n}\r\n\r\n/**\r\n * Descriptor of the layout of a uniform.\r\n */\r\nexport class UniformLayoutEntry {\r\n  /** Uniform name. */\r\n  name: string = '';\r\n\r\n  /** Uniform type. Defaults to {@link UniformType.Value} */\r\n  type: UniformType = UniformType.Value;\r\n\r\n  /** Texture type. Defaults to {@link TexType.Tex2D} */\r\n  texType: TexType = TexType.Tex2D;\r\n\r\n  /** Uniform value format. Defaults to {@link UniformFormat.Float} */\r\n  valueFormat: UniformFormat = UniformFormat.Float;\r\n}\r\n\r\n/**\r\n * Descriptor of uniform layout.\r\n */\r\nexport type UniformLayout = UniformLayoutEntry[];\r\n\r\n/**\r\n* The uniform resource binding.\r\n* @see https://gpuweb.github.io/gpuweb/#bind-group-creation\r\n* @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform\r\n* @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix\r\n* @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferRange\r\n*/\r\nexport class UniformBinding {\r\n  /** Uniform name. */\r\n  name: string = '';\r\n\r\n  /** The uniform value to bind */\r\n  value: Float = 0;\r\n\r\n  /** The uniform array value to bind */\r\n  values: ReadonlyFloatList | null = null;\r\n\r\n  /** The texture to bind */\r\n  tex: Texture | null = null;\r\n\r\n  /** The uniform buffer to bind */\r\n  buffer: Buffer | null = null;\r\n\r\n  /** The starting offset of the uniform buffer. Defaults to 0 */\r\n  bufferOffset: Uint = 0;\r\n\r\n  /**\r\n   * The byte size of data to read from the buffer.\r\n   * Defaults to the range starting at offset and ending at the end of the buffer.\r\n   */\r\n  bufferSize: Uint = 0;\r\n}\r\n\r\n/**\r\n * Descriptor of uniform bindings.\r\n */\r\nexport type UniformBindings = UniformBinding[];\r\n\r\n/**\r\n* Texture data type.\r\n*/\r\nexport class TextureData {\r\n  /** Texture data buffer. */\r\n  buffer: ArrayBufferView | null = null;\r\n\r\n  /** Texture image pointer. */\r\n  // @ts-ignore: Valid in AssemblyScript\r\n  image: ImageSource = 0;\r\n\r\n  /** Array textures image pointer. */\r\n  images: ImageSource[] = [];\r\n}\r\n\r\n/**\r\n* The texture view for render pass attachment.\r\n* @see https://gpuweb.github.io/gpuweb/#dictdef-gputextureviewdescriptor\r\n*/\r\nexport class TextureView {\r\n  /** The texture to bind */\r\n  tex: Texture | null = null;\r\n\r\n  /** Rendering mip level. Defaults to 0 */\r\n  mipLevel: Uint = 0;\r\n\r\n  /** Rendering texture slice. Defaults to 0 */\r\n  slice: Uint = 0;\r\n}\r\n\r\n/**\r\n * Readonly descriptor of a texture view. All proerties are defined.\r\n */\r\nexport type ReadonlyTextureView = TextureView;\r\n"],"file":"index.js"}