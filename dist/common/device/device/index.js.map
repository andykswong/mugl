{"version":3,"sources":["../../../../src/common/device/device/index.ts"],"names":["RenderingDevice","RenderPassContext"],"mappings":"AAUA,MAAO,MAAeA,CAAAA,eAA4C,EAsBlE,MAAO,MAAeC,CAAAA,iBAAgD","sourcesContent":["import { TextureDescriptor, SamplerDescriptor, RenderPassDescriptor, BufferDescriptor, PipelineDescriptor, ShaderDescriptor, UniformBindings } from '../descriptor';\r\nimport { Buffer, Pipeline, RenderPass, Shader, Texture } from '../resources';\r\nimport { RenderingDevice as IRenderingDevice, RenderPassContext as IRenderPassContext } from './device';\r\nimport { Int, ReadonlyColor, Uint } from '../types';\r\n\r\n/**\r\n * The rendering device, in WebGPU API style.\r\n * The APIs are designed to be simplified version of WebGPU APIs, and without features unsupported by WebGL.\r\n * @see https://gpuweb.github.io/gpuweb/#gpudevice\r\n */\r\nexport abstract class RenderingDevice implements IRenderingDevice {\r\n  abstract get width(): Uint;\r\n  abstract get height(): Uint;\r\n\r\n  abstract buffer(desc: BufferDescriptor): Buffer;\r\n  abstract shader(desc: ShaderDescriptor): Shader;\r\n  abstract pipeline(desc: PipelineDescriptor): Pipeline;\r\n  abstract render(pass: RenderPass): RenderPassContext;\r\n  abstract reset(): void;\r\n  abstract feature<F>(feature: string): F;\r\n\r\n  // @ts-ignore: Valid AssemblyScript\r\n  abstract texture(desc: TextureDescriptor, sampler: SamplerDescriptor = {}): Texture;\r\n\r\n  // @ts-ignore: Valid AssemblyScript\r\n  abstract pass(desc: RenderPassDescriptor = {}): RenderPass;\r\n}\r\n\r\n/**\r\n * The render pass context object for submitting render commands.\r\n * @see https://gpuweb.github.io/gpuweb/#gpurenderpassencoder\r\n */\r\nexport abstract class RenderPassContext implements IRenderPassContext {\r\n  abstract pipeline(pipeline: Pipeline): RenderPassContext;\r\n\r\n  abstract index(buffer: Buffer): RenderPassContext;\r\n\r\n  abstract vertex(slot: Uint, buffer: Buffer): RenderPassContext;\r\n\r\n  abstract uniforms(bindings: UniformBindings): RenderPassContext;\r\n\r\n  // @ts-ignore: Valid AssemblyScript\r\n  abstract draw(vertexCount: Uint, instanceCount: Uint = 1, firstVertex: Uint = 0): RenderPassContext;\r\n\r\n  // @ts-ignore: Valid AssemblyScript\r\n  abstract drawIndexed(indexCount: Uint, instanceCount: Uint = 1, firstIndex: Uint = 0): RenderPassContext;\r\n\r\n  // @ts-ignore: Valid AssemblyScript\r\n  abstract viewport(x: Int, y: Int, width: Int, height: Int, minDepth: Int = 0, maxDepth: Int = 1): RenderPassContext;\r\n  \r\n  abstract scissor(x: Int, y: Int, width: Int, height: Int): RenderPassContext;\r\n\r\n  abstract blendColor(color: ReadonlyColor): RenderPassContext;\r\n \r\n  abstract stencilRef(ref: Uint): RenderPassContext;\r\n \r\n  abstract end(): void;\r\n}\r\n"],"file":"index.js"}