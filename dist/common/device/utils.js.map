{"version":3,"sources":["../../../src/common/device/utils.ts"],"names":["GLenum","TEX_INTERNAL_FORMAT_MAP","NONE","DEPTH_COMPONENT16","DEPTH_STENCIL","RGBA8","RGBA32F","RGBA16F","R32F","R16F","RG32F","RG16F","TEX_FORMAT_MAP","DEPTH_COMPONENT","RGBA","RED","RG","TEX_TYPE_MAP","UNSIGNED_BYTE","FLOAT","HALF_FLOAT_OES","UNSIGNED_INT","UNSIGNED_INT_24_8_WEBGL","VERTEX_TYPE_MAP","BYTE","SHORT","UNSIGNED_SHORT","VERTEX_TYPE_SIZE_MAP","BYTE_MASK","is3DTexture","type","TEXTURE_3D","TEXTURE_2D_ARRAY","isDepthStencil","format","hasStencil","vertexByteSize","vertexSize","vertexType","vertexNormalized","indexSize","glTexInternalFormat","isWebGL2","glTexFormat","glTexType","HALF_FLOAT"],"mappings":"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","sourcesContent":["import { Int } from 'munum';\r\nimport { IndexFormat, PixelFormat, TexType, VertexFormat } from './enums';\r\nimport * as GLenum from '../gl/const';\r\n\r\nconst TEX_INTERNAL_FORMAT_MAP = [\r\n  GLenum.NONE,\r\n  GLenum.DEPTH_COMPONENT16,\r\n  GLenum.DEPTH_STENCIL,\r\n  GLenum.DEPTH_STENCIL,\r\n  GLenum.RGBA8,\r\n  GLenum.RGBA32F,\r\n  GLenum.RGBA16F,\r\n  GLenum.R32F,\r\n  GLenum.R16F,\r\n  GLenum.RG32F,\r\n  GLenum.RG16F\r\n];\r\n\r\nconst TEX_FORMAT_MAP = [\r\n  GLenum.NONE,\r\n  GLenum.DEPTH_COMPONENT,\r\n  GLenum.DEPTH_STENCIL,\r\n  GLenum.DEPTH_STENCIL,\r\n  GLenum.RGBA,\r\n  GLenum.RED,\r\n  GLenum.RG\r\n];\r\n\r\nconst TEX_TYPE_MAP = [\r\n  GLenum.NONE,\r\n  GLenum.UNSIGNED_BYTE,\r\n  GLenum.FLOAT,\r\n  GLenum.HALF_FLOAT_OES,\r\n  GLenum.UNSIGNED_INT,\r\n  GLenum.UNSIGNED_INT_24_8_WEBGL\r\n];\r\n\r\nconst VERTEX_TYPE_MAP = [\r\n  GLenum.FLOAT,\r\n  GLenum.BYTE,\r\n  GLenum.UNSIGNED_BYTE,\r\n  GLenum.SHORT,\r\n  GLenum.UNSIGNED_SHORT\r\n];\r\n\r\nconst VERTEX_TYPE_SIZE_MAP = [\r\n  4,\r\n  1,\r\n  1,\r\n  2,\r\n  2\r\n];\r\n\r\n/**\r\n * Byte mask = 0xFF.\r\n * @internal\r\n */\r\nexport const BYTE_MASK = 0xFF;\r\n\r\n/**\r\n * Check if given texture type is a 3D or 2D array texture.\r\n *\r\n * @param type texture type\r\n * @return whether the texture type is 3D\r\n */\r\nexport function is3DTexture(type: TexType): boolean {\r\n  return type === GLenum.TEXTURE_3D || type === GLenum.TEXTURE_2D_ARRAY;\r\n}\r\n\r\n/**\r\n * Check if given pixel format is a depth/stencil format.\r\n *\r\n * @param format pixel format\r\n * @returns whether the pixel format is a depth/stencil format\r\n */\r\nexport function isDepthStencil(format: PixelFormat): boolean {\r\n  return format > 0 && (format >> 16) <= 3;\r\n}\r\n\r\n/**\r\n * Check if given pixel format has stencil component.\r\n *\r\n * @param format pixel format\r\n * @returns whether the pixel format has stencil component\r\n */\r\nexport function hasStencil(format: PixelFormat): boolean {\r\n  return (format & BYTE_MASK) === 5;\r\n}\r\n\r\n/**\r\n * Returns the byte size of a vertex format.\r\n * @internal\r\n * @param format vertex format\r\n * @returns byte size\r\n */\r\nexport function vertexByteSize(format: VertexFormat): Int {\r\n  return VERTEX_TYPE_SIZE_MAP[format & BYTE_MASK] * vertexSize(format);\r\n}\r\n\r\n/**\r\n * Returns the number of components of a vertex format.\r\n * @internal\r\n * @param format vertex format\r\n * @returns number of components\r\n */\r\nexport function vertexSize(format: VertexFormat): Int {\r\n  return (format >> 8) & BYTE_MASK;\r\n}\r\n\r\n/**\r\n * Returns the data type of a vertex format.\r\n * @internal\r\n * @param format vertex format\r\n * @returns GL data type\r\n */\r\nexport function vertexType(format: VertexFormat): Int {\r\n  return VERTEX_TYPE_MAP[format & BYTE_MASK];\r\n}\r\n\r\n/**\r\n * Returns if a vertex format is normalized.\r\n * @internal\r\n * @param format vertex format\r\n * @returns number of components\r\n */\r\nexport function vertexNormalized(format: VertexFormat): boolean {\r\n  return !!(format >> 16);\r\n}\r\n\r\n/**\r\n * Returns the byte size of a index format.\r\n * @internal\r\n * @param format index format\r\n * @returns byte size of the format\r\n */\r\nexport function indexSize(format: IndexFormat): Int {\r\n  return (format - GLenum.UNSIGNED_SHORT) + 2;\r\n}\r\n\r\n/**\r\n * Convert PixelFormat to GL texture internal format.\r\n * @internal\r\n * @param format pixel format\r\n * @param isRenderbuffer if this is a renderbuffer\r\n * @param isWebGL2 if WebGL2 is used\r\n * @returns GL texture internal format\r\n */\r\nexport function glTexInternalFormat(format: PixelFormat, isWebGL2: boolean = false): Int {\r\n  return (isWebGL2 || isDepthStencil(format)) ? TEX_INTERNAL_FORMAT_MAP[format >> 16] : glTexFormat(format);\r\n}\r\n\r\n/**\r\n * Convert PixelFormat to GL texture image format.\r\n * @internal\r\n * @param format pixel format\r\n * @returns GL texture image format\r\n */\r\nexport function glTexFormat(format: PixelFormat): Int {\r\n  return TEX_FORMAT_MAP[(format >> 8) & BYTE_MASK];\r\n}\r\n\r\n/**\r\n * Convert PixelFormat to GL texture size type.\r\n * @internal\r\n * @param format pixel format\r\n * @param isWebGL2 if WebGL2 is used\r\n * @returns GL texture size type\r\n */\r\nexport function glTexType(format: PixelFormat, isWebGL2: boolean = false): Int {\r\n  const type = TEX_TYPE_MAP[format & BYTE_MASK];\r\n  if (isWebGL2 && type === GLenum.HALF_FLOAT_OES) {\r\n    return GLenum.HALF_FLOAT; // WebGL2 uses a different enum value for half float\r\n  }\r\n  return type;\r\n}\r\n"],"file":"utils.js"}