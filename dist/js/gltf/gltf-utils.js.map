{"version":3,"sources":["../../../src/js/gltf/gltf-utils.ts"],"names":["mat4","ortho","perspective","GLenum","VertexFormat","getExtras","property","extras","traverseNode","glTF","nodeId","callback","parent","node","nodes","children","childNodeId","getAnimationDuration","animation","duration","channel","channels","targetNode","target","accessor","accessors","samplers","sampler","input","Math","max","getAnimationSamplerInput","buffer","byteOffset","getAccessorData","Float32Array","byteLength","getAnimationSamplerOutput","output","Type","componentType","BYTE","Int8Array","UNSIGNED_BYTE","Uint8Array","SHORT","Uint16Array","UNSIGNED_SHORT","BYTES_PER_ELEMENT","getAnimationOutputValue","index","Int16Array","getAccessorVertexFormat","type","FLOAT","Float2","normalized","UShort2N","UShort2","UChar2N","UChar2","Float3","Float4","UChar4N","UChar4","UShort4N","UShort4","getAccessorElementSize","length","size","UNSIGNED_INT","elementSize","bufferLength","count","bufferView","bufferViews","bufferViewData","getBufferViewData","alignment","byteStride","bufferOffset","sparse","indices","indexViewId","indexViewOffset","values","valueViewId","valueViewOffset","indexView","valueView","sparseBuffer","set","indexBuffer","valueBuffer","IndexBufferType","Uint32Array","j","k","buffers","bufferData","getCameraProjection","out","camera","aspectRatio","orthographic","xmag","znear","zfar","yfov","Infinity","id","getInverseBindMatrices","skin","matrices","inverseBindMatrices","joints","getSceneLights","scene","lights","light","extensions","KHR_lights_punctual","push"],"mappings":"AAEA,OAAeA,IAAf,CAAqBC,KAArB,CAA4BC,WAA5B,KAA+C,OAA/C,C,OACSC,M,uCACAC,Y,0BAQT,MAAO,SAASC,CAAAA,SAAT,CAAmBC,QAAnB,CAAmD,CACxD,GAAI,CAACA,QAAQ,CAACC,MAAd,CAAsB,CACpBD,QAAQ,CAACC,MAAT,CAAkB,EACnB,CACD,MAAOD,CAAAA,QAAQ,CAACC,MACjB,CAKD,MAAO,SAASC,CAAAA,YAAT,CAAsBC,IAAtB,CAAkCC,MAAlC,CAAkDC,QAAlD,CAAiHC,MAAmB,CAAG,IAAvI,CAAmJ,iBACxJ,KAAMC,CAAAA,IAAI,cAAGJ,IAAI,CAACK,KAAR,sCAAG,YAAaJ,MAAb,CAAb,CACA,GAAIG,IAAI,EAAI,CAACF,QAAQ,CAACE,IAAD,CAAOD,MAAP,CAAjB,EAAmCC,IAAI,CAACE,QAA5C,CAAsD,CACpD,IAAK,KAAMC,CAAAA,WAAX,GAA0BH,CAAAA,IAAI,CAACE,QAA/B,CAAyC,CACvCP,YAAY,CAACC,IAAD,CAAOO,WAAP,CAAoBL,QAApB,CAA8BE,IAA9B,CACb,CACF,CACF,CAKD,MAAO,SAASI,CAAAA,oBAAT,CAA8BR,IAA9B,CAA4DS,SAA5D,CAA0F,CAC/F,GAAIC,CAAAA,QAAQ,CAAId,SAAS,CAACa,SAAD,CAAT,CAAqBC,QAAtB,EAA6C,CAA5D,CACA,IAAK,KAAMC,CAAAA,OAAX,GAAsBF,CAAAA,SAAS,CAACG,QAAhC,CAA0C,wDACxC,KAAMC,CAAAA,UAAU,eAAGb,IAAI,CAACK,KAAR,uCAAG,aAAaM,OAAO,CAACG,MAAR,CAAeV,IAA5B,CAAnB,CACA,KAAMW,CAAAA,QAAQ,kBAAGf,IAAI,CAACgB,SAAR,0CAAG,uCAAiBP,SAAS,CAACQ,QAAV,CAAmBN,OAAO,CAACO,OAA3B,CAAjB,gDAAiB,sBAAqCC,KAAtD,CAAjB,CACA,GAAIN,UAAU,EAAIE,QAAlB,CAA4B,mBAC1BL,QAAQ,CAAGU,IAAI,CAACC,GAAL,CAASX,QAAT,CAAmB,gBAAAK,QAAQ,CAACM,GAAT,sDAAe,CAAf,IAAqB,CAAxC,CACZ,CACF,CACD,MAAQzB,CAAAA,SAAS,CAACa,SAAD,CAAT,CAAqBC,QAArB,CAAgCA,QACzC,CAKD,MAAO,SAASY,CAAAA,wBAAT,CAAkCtB,IAAlC,CAAgEkB,OAAhE,CAAgH,CACrH,GAAIC,CAAAA,KAAK,CAAIvB,SAAS,CAACsB,OAAD,CAAT,CAAmBC,KAApB,EAA8C,IAA1D,CACA,GAAI,CAACA,KAAL,CAAY,sBACV,KAAMJ,CAAAA,QAAQ,mBAAGf,IAAI,CAACgB,SAAR,2CAAG,iBAAiBE,OAAO,CAACC,KAAzB,CAAjB,CACA,GAAIJ,QAAJ,CAAc,CACZ,KAAM,CAAEQ,MAAF,CAAUC,UAAU,CAAG,CAAvB,EAA6BC,eAAe,CAACzB,IAAD,CAAOe,QAAP,CAAlD,CACAnB,SAAS,CAACsB,OAAD,CAAT,CAAmBC,KAAnB,CAA2BA,KAAK,CAC9B,GAAIO,CAAAA,YAAJ,CAAiBH,MAAM,CAACA,MAAxB,CAAgCC,UAAU,CAAGD,MAAM,CAACC,UAApD,CAAgE,CAACD,MAAM,CAACI,UAAP,CAAoBH,UAArB,EAAmC,CAAnG,CACH,CACF,CACD,MAAOL,CAAAA,KACR,CAWD,MAAO,SAASS,CAAAA,yBAAT,CAAmC5B,IAAnC,CAAiEkB,OAAjE,CAAwH,CAC7H,GAAIW,CAAAA,MAAM,CAAIjC,SAAS,CAACsB,OAAD,CAAT,CAAmBW,MAApB,EAAsD,IAAnE,CACA,GAAI,CAACA,MAAL,CAAa,sBACX,KAAMd,CAAAA,QAAQ,mBAAGf,IAAI,CAACgB,SAAR,2CAAG,iBAAiBE,OAAO,CAACW,MAAzB,CAAjB,CACA,GAAId,QAAJ,CAAc,CACZ,KAAM,CAAEQ,MAAF,CAAUC,UAAU,CAAG,CAAvB,EAA6BC,eAAe,CAACzB,IAAD,CAAOe,QAAP,CAAlD,CACA,GAAIe,CAAAA,IAAoC,CAAGJ,YAA3C,CACA,OAAQX,QAAQ,CAACgB,aAAjB,EACE,IAAKrC,CAAAA,MAAM,CAACsC,IAAZ,CAAkBF,IAAI,CAAGG,SAAP,CAAkB,MACpC,IAAKvC,CAAAA,MAAM,CAACwC,aAAZ,CAA2BJ,IAAI,CAAGK,UAAP,CAAmB,MAC9C,IAAKzC,CAAAA,MAAM,CAAC0C,KAAZ,CAAmBN,IAAI,CAAGO,WAAP,CAAoB,MACvC,IAAK3C,CAAAA,MAAM,CAAC4C,cAAZ,CAA4BR,IAAI,CAAGO,WAAP,CAAoB,MAJlD,CAOAzC,SAAS,CAACsB,OAAD,CAAT,CAAmBW,MAAnB,CAA4BA,MAAM,CAChC,GAAIC,CAAAA,IAAJ,CAASP,MAAM,CAACA,MAAhB,CAAwBC,UAAU,CAAGD,MAAM,CAACC,UAA5C,CAAwD,CAACD,MAAM,CAACI,UAAP,CAAoBH,UAArB,EAAmCM,IAAI,CAACS,iBAAhG,CACH,CACF,CACD,MAAOV,CAAAA,MACR,CAKD,MAAO,SAASW,CAAAA,uBAAT,CAAiCjB,MAAjC,CAA8DkB,KAA9D,CAAqF,CAC1F,GAAIlB,MAAM,WAAYU,CAAAA,SAAtB,CAAiC,CAC/B,MAAOb,CAAAA,IAAI,CAACC,GAAL,CAASE,MAAM,CAACkB,KAAD,CAAN,CAAgB,GAAzB,CAA8B,CAAC,CAA/B,CACR,CACD,GAAIlB,MAAM,WAAYY,CAAAA,UAAtB,CAAkC,CAChC,MAAOZ,CAAAA,MAAM,CAACkB,KAAD,CAAN,CAAgB,GACxB,CACD,GAAIlB,MAAM,WAAYmB,CAAAA,UAAtB,CAAkC,CAChC,MAAOtB,CAAAA,IAAI,CAACC,GAAL,CAASE,MAAM,CAACkB,KAAD,CAAN,CAAgB,KAAzB,CAAgC,CAAC,CAAjC,CACR,CACD,GAAIlB,MAAM,WAAYc,CAAAA,WAAtB,CAAmC,CACjC,MAAOd,CAAAA,MAAM,CAACkB,KAAD,CAAN,CAAgB,KACxB,CACD,MAAOlB,CAAAA,MAAM,CAACkB,KAAD,CACd,CAKD,MAAO,SAASE,CAAAA,uBAAT,CAAiC5B,QAAjC,CAA0E,CAC/E,OAAQA,QAAQ,CAAC6B,IAAjB,EACE,IAAK,MAAL,CACE,GAAI7B,QAAQ,CAACgB,aAAT,GAA2BrC,MAAM,CAACmD,KAAtC,CAA6C,CAC3C,MAAOlD,CAAAA,YAAY,CAACmD,MACrB,CAFD,IAEO,IAAI/B,QAAQ,CAACgB,aAAT,GAA2BrC,MAAM,CAAC4C,cAAtC,CAAsD,CAC3D,MAAOvB,CAAAA,QAAQ,CAACgC,UAAT,CAAsBpD,YAAY,CAACqD,QAAnC,CAA8CrD,YAAY,CAACsD,OACnE,CAFM,IAEA,IAAIlC,QAAQ,CAACgB,aAAT,GAA2BrC,MAAM,CAACwC,aAAtC,CAAqD,CAC1D,MAAOnB,CAAAA,QAAQ,CAACgC,UAAT,CAAsBpD,YAAY,CAACuD,OAAnC,CAA6CvD,YAAY,CAACwD,MAClE,CACD,MACF,IAAK,MAAL,CACE,GAAIpC,QAAQ,CAACgB,aAAT,GAA2BrC,MAAM,CAACmD,KAAtC,CAA6C,CAC3C,MAAOlD,CAAAA,YAAY,CAACyD,MACrB,CAED,MACF,IAAK,MAAL,CACE,GAAIrC,QAAQ,CAACgB,aAAT,GAA2BrC,MAAM,CAACmD,KAAtC,CAA6C,CAC3C,MAAOlD,CAAAA,YAAY,CAAC0D,MACrB,CAFD,IAEO,IAAItC,QAAQ,CAACgB,aAAT,GAA2BrC,MAAM,CAACwC,aAAtC,CAAqD,CAC1D,MAAOnB,CAAAA,QAAQ,CAACgC,UAAT,CAAsBpD,YAAY,CAAC2D,OAAnC,CAA6C3D,YAAY,CAAC4D,MAClE,CAFM,IAEA,IAAIxC,QAAQ,CAACgB,aAAT,GAA2BrC,MAAM,CAAC4C,cAAtC,CAAsD,CAC3D,MAAOvB,CAAAA,QAAQ,CAACgC,UAAT,CAAsBpD,YAAY,CAAC6D,QAAnC,CAA8C7D,YAAY,CAAC8D,OACnE,CACD,MAxBJ,CA0BA,MAAO,KACR,CAKD,MAAO,SAASC,CAAAA,sBAAT,CAAgC3C,QAAhC,CAA4D,CACjE,GAAI4C,CAAAA,MAAM,CAAG,CAAb,CACA,OAAQ5C,QAAQ,CAAC6B,IAAjB,EACE,IAAK,QAAL,CAAee,MAAM,CAAG,CAAT,CAAY,MAC3B,IAAK,MAAL,CAAaA,MAAM,CAAG,CAAT,CAAY,MACzB,IAAK,MAAL,CAAaA,MAAM,CAAG,CAAT,CAAY,MACzB,IAAK,MAAL,CACA,IAAK,MAAL,CAAaA,MAAM,CAAG,CAAT,CAAY,MACzB,IAAK,MAAL,CAAaA,MAAM,CAAG,CAAT,CAAY,MACzB,IAAK,MAAL,CAAaA,MAAM,CAAG,EAAT,CAAa,MAP5B,CAUA,GAAIC,CAAAA,IAAI,CAAG,CAAX,CACA,OAAQ7C,QAAQ,CAACgB,aAAjB,EACE,IAAKrC,CAAAA,MAAM,CAACsC,IAAZ,CACA,IAAKtC,CAAAA,MAAM,CAACwC,aAAZ,CAA2B0B,IAAI,CAAG,CAAP,CAAU,MACrC,IAAKlE,CAAAA,MAAM,CAAC0C,KAAZ,CACA,IAAK1C,CAAAA,MAAM,CAAC4C,cAAZ,CAA4BsB,IAAI,CAAG,CAAP,CAAU,MACtC,IAAKlE,CAAAA,MAAM,CAACmE,YAAZ,CACA,IAAKnE,CAAAA,MAAM,CAACmD,KAAZ,CAAmBe,IAAI,CAAG,CAAP,CAAU,MAN/B,CASA,MAAOD,CAAAA,MAAM,CAAGC,IACjB,CAKD,MAAO,SAASnC,CAAAA,eAAT,CAAyBzB,IAAzB,CAAuDe,QAAvD,CAAuH,uBAC5H,GAAIQ,CAAAA,MAA8B,CAAG3B,SAAS,CAACmB,QAAD,CAAT,CAAoBQ,MAAzD,CACA,GAAIC,CAAAA,UAAU,CAAI5B,SAAS,CAACmB,QAAD,CAAT,CAAoBS,UAArB,EAA8C,CAA/D,CACA,GAAID,MAAJ,CAAY,CACV,MAAO,CAAEA,MAAF,CAAUC,UAAV,CACR,CAED,KAAMsC,CAAAA,WAAW,CAAGJ,sBAAsB,CAAC3C,QAAD,CAA1C,CACA,GAAIgD,CAAAA,YAAY,CAAGhD,QAAQ,CAACiD,KAAT,CAAiBF,WAApC,CAGA,KAAMG,CAAAA,UAAU,oBAAGjE,IAAI,CAACkE,WAAR,4CAAG,kBAAmBnD,QAAQ,CAACkD,UAA5B,CAAnB,CACA,GAAIA,UAAJ,CAAgB,CACd,KAAME,CAAAA,cAAc,CAAGC,iBAAiB,CAACpE,IAAD,CAAOiE,UAAP,CAAxC,CACA,KAAMI,CAAAA,SAAS,CAAGJ,UAAU,CAACK,UAAX,EAAyB,CAA3C,CAEA9C,UAAU,CAAG,CAACT,QAAQ,CAACS,UAAT,EAAuB,CAAxB,EAA6B6C,SAA1C,CACAN,YAAY,CAAGhD,QAAQ,CAACiD,KAAT,EAAkBC,UAAU,CAACK,UAAX,EAAyBR,WAA3C,CAAf,CAEA,KAAMS,CAAAA,YAAY,CAAG,CAACxD,QAAQ,CAACS,UAAT,EAAuB,CAAxB,EAA6BA,UAAlD,CAEAD,MAAM,CAAG,GAAIY,CAAAA,UAAJ,CAAegC,cAAc,CAAC5C,MAA9B,CAAsC4C,cAAc,CAAC3C,UAAf,CAA4B+C,YAAlE,CAAgFR,YAAhF,CACV,CAGD,GAAIhD,QAAQ,CAACyD,MAAb,CAAqB,2CACnB,KAAM,CACJR,KADI,CAEJS,OAAO,CAAE,CAAER,UAAU,CAAES,WAAd,CAA2BlD,UAAU,CAAEmD,eAAe,CAAG,CAAzD,CAA4D5C,aAA5D,CAFL,CAGJ6C,MAAM,CAAE,CAAEX,UAAU,CAAEY,WAAd,CAA2BrD,UAAU,CAAEsD,eAAe,CAAG,CAAzD,CAHJ,EAIF/D,QAAQ,CAACyD,MAJb,CAKA,KAAMO,CAAAA,SAAS,qBAAG/E,IAAI,CAACkE,WAAR,6CAAG,mBAAmBQ,WAAnB,CAAlB,CACA,KAAMM,CAAAA,SAAS,qBAAGhF,IAAI,CAACkE,WAAR,6CAAG,mBAAmBW,WAAnB,CAAlB,CAEA,GAAIE,SAAS,EAAIC,SAAjB,CAA4B,CAC1B,KAAMC,CAAAA,YAAY,CAAG,GAAI9C,CAAAA,UAAJ,CAAe4B,YAAf,CAArB,CACA,GAAIxC,MAAJ,CAAY,CACV0D,YAAY,CAACC,GAAb,CAAiB3D,MAAjB,CAAyBC,UAAzB,CACD,CAED,KAAM2D,CAAAA,WAAW,CAAGf,iBAAiB,CAACpE,IAAD,CAAO+E,SAAP,CAArC,CACA,KAAMK,CAAAA,WAAW,CAAGhB,iBAAiB,CAACpE,IAAD,CAAOgF,SAAP,CAArC,CACA,KAAMK,CAAAA,eAAe,CAAGtD,aAAa,GAAKrC,MAAM,CAACwC,aAAzB,CAAyCC,UAAzC,CAAsDJ,aAAa,GAAKrC,MAAM,CAAC4C,cAAzB,CAA0CD,WAA1C,CAAwDiD,WAAtI,CACA,KAAMb,CAAAA,OAAO,CAAG,GAAIY,CAAAA,eAAJ,CAAoBF,WAAW,CAAC5D,MAAhC,CAAwC4D,WAAW,CAAC3D,UAAZ,CAAyBmD,eAAjE,CAAkFX,KAAlF,CAAhB,CACA,KAAMY,CAAAA,MAAM,CAAG,GAAIzC,CAAAA,UAAJ,CAAeiD,WAAW,CAAC7D,MAA3B,CAAmC6D,WAAW,CAAC5D,UAAZ,CAAyBsD,eAA5D,CAA6Ed,KAAK,CAAGF,WAArF,CAAf,CACA,IAAK,GAAIyB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGvB,KAApB,CAA2B,EAAEuB,CAA7B,CAAgC,CAC9B,KAAM9C,CAAAA,KAAK,CAAGgC,OAAO,CAACc,CAAD,CAAP,CAAazB,WAA3B,CACA,IAAK,GAAI0B,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG1B,WAApB,CAAiC,EAAE0B,CAAnC,CAAsC,CACpCP,YAAY,CAACxC,KAAK,CAAG+C,CAAT,CAAZ,CAA0BZ,MAAM,CAACW,CAAC,CAAGzB,WAAJ,CAAkB0B,CAAnB,CACjC,CACF,CAGDhE,UAAU,CAAG,CAAb,CACAD,MAAM,CAAG0D,YACV,CACF,CAED,GAAI1D,MAAJ,CAAY,CACV3B,SAAS,CAACmB,QAAD,CAAT,CAAoBQ,MAApB,CAA6BA,MAA7B,CACA3B,SAAS,CAACmB,QAAD,CAAT,CAAoBS,UAApB,CAAiCA,UAClC,CAHD,IAGO,CACLD,MAAM,CAAG,GAAIY,CAAAA,UACd,CAED,MAAO,CAAEZ,MAAF,CAAUC,UAAV,CACR,CAKD,MAAO,SAAS4C,CAAAA,iBAAT,CAA2BpE,IAA3B,CAAyDiE,UAAzD,CAA6F,CAClG,GAAIE,CAAAA,cAAc,CAAGvE,SAAS,CAACqE,UAAD,CAAT,CAAsB1C,MAA3C,CACA,GAAI,CAAC4C,cAAL,CAAqB,mBACnB,KAAM5C,CAAAA,MAAM,gBAAGvB,IAAI,CAACyF,OAAR,wCAAG,cAAexB,UAAU,CAAC1C,MAA1B,CAAf,CACA,GAAIA,MAAJ,CAAY,CACV,KAAMmE,CAAAA,UAAU,CAAGnE,MAAM,CAACzB,MAAP,CAAcyB,MAAjC,CACA4C,cAAc,CAAG,GAAIhC,CAAAA,UAAJ,CACfuD,UAAU,CAACnE,MADI,CACImE,UAAU,CAAClE,UAAX,EAAyByC,UAAU,CAACzC,UAAX,EAAyB,CAAlD,CADJ,CAC0DyC,UAAU,CAACtC,UADrE,CAElB,CAJD,IAIO,CACLwC,cAAc,CAAG,GAAIhC,CAAAA,UACtB,CACDvC,SAAS,CAACqE,UAAD,CAAT,CAAsB1C,MAAtB,CAA+B4C,cAChC,CACD,MAAOA,CAAAA,cACR,CAKD,MAAO,SAASwB,CAAAA,mBAAT,CAA6BC,GAA7B,CAAwCC,MAAxC,CAAoEC,WAApE,CAAgG,CACrG,GAAID,MAAJ,SAAIA,MAAJ,WAAIA,MAAM,CAAEE,YAAZ,CAA0B,CACxBvG,KAAK,CACH,CAACqG,MAAM,CAACE,YAAP,CAAoBC,IADlB,CACwBH,MAAM,CAACE,YAAP,CAAoBC,IAD5C,CAEH,CAACH,MAAM,CAACE,YAAP,CAAoBC,IAArB,EAA6BF,WAAW,EAAI,CAA5C,CAFG,CAE6CD,MAAM,CAACE,YAAP,CAAoBC,IAApB,EAA4BF,WAAW,EAAI,CAA3C,CAF7C,CAGHD,MAAM,CAACE,YAAP,CAAoBE,KAHjB,CAGwBJ,MAAM,CAACE,YAAP,CAAoBG,IAH5C,CAIHN,GAJG,CAKN,CAND,IAMO,IAAIC,MAAJ,SAAIA,MAAJ,WAAIA,MAAM,CAAEpG,WAAZ,CAAyB,CAC9BA,WAAW,CACTqG,WAAW,EAAID,MAAM,CAACpG,WAAP,CAAmBqG,WAAlC,EAAiD,CADxC,CAC2CD,MAAM,CAACpG,WAAP,CAAmB0G,IAD9D,CAETN,MAAM,CAACpG,WAAP,CAAmBwG,KAFV,CAEiBJ,MAAM,CAACpG,WAAP,CAAmByG,IAAnB,EAA2BE,QAF5C,CAGTR,GAHS,CAIZ,CALM,IAKA,CACLrG,IAAI,CAAC8G,EAAL,CAAQT,GAAR,CACD,CACD,MAAOA,CAAAA,GACR,CAKD,MAAO,SAASU,CAAAA,sBAAT,CAAgCtG,IAAhC,CAA8DuG,IAA9D,CAAwF,CAC7F,GAAIC,CAAAA,QAAQ,CAAG5G,SAAS,CAAC2G,IAAD,CAAT,CAAgBE,mBAA/B,CACA,GAAI,CAACD,QAAL,CAAe,sBACb,KAAMzF,CAAAA,QAAQ,mBAAGf,IAAI,CAACgB,SAAR,2CAAG,iBAAiBuF,IAAI,CAACE,mBAAtB,CAAjB,CACA,GAAI1F,QAAJ,CAAc,CACZ,KAAM,CAAEQ,MAAF,CAAUC,UAAV,EAAyBC,eAAe,CAACzB,IAAD,CAAOe,QAAP,CAA9C,CACAyF,QAAQ,CAAG,GAAI9E,CAAAA,YAAJ,CAAiBH,MAAM,CAACA,MAAxB,CAAgCA,MAAM,CAACC,UAAP,CAAoBA,UAApD,CAAgE,GAAK+E,IAAI,CAACG,MAAL,CAAY/C,MAAjF,CACZ,CAHD,IAGO,CACL6C,QAAQ,CAAG,GAAI9E,CAAAA,YAAJ,CAAiB,GAAK6E,IAAI,CAACG,MAAL,CAAY/C,MAAlC,CACZ,CACD/D,SAAS,CAAC2G,IAAD,CAAT,CAAgBE,mBAAhB,CAAsCD,QACvC,CACD,MAAOA,CAAAA,QACR,CAKD,MAAO,SAASG,CAAAA,cAAT,CAAwB3G,IAAxB,CAAoC4G,KAApC,CAAoF,CACzF,KAAMC,CAAAA,MAAwC,CAAG,EAAjD,CACA,GAAID,KAAK,CAACvG,KAAV,CAAiB,CACf,IAAK,KAAMJ,CAAAA,MAAX,GAAqB2G,CAAAA,KAAK,CAACvG,KAA3B,CAAkC,CAChCN,YAAY,CAACC,IAAD,CAAOC,MAAP,CAAgBG,IAAD,EAAU,sBACnC,KAAM0G,CAAAA,KAAK,mBAAG1G,IAAI,CAAC2G,UAAR,2CAAG,iBAAiBC,mBAA/B,CACA,GAAIF,KAAJ,CAAW,CACTD,MAAM,CAACI,IAAP,CAAYH,KAAZ,CACD,CACF,CALW,CAMb,CACF,CACD,MAAOD,CAAAA,MACR","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n\r\nimport { Mat4, mat4, ortho, perspective } from 'munum';\r\nimport { GLenum } from '../../common/gl';\r\nimport { VertexFormat } from '../device';\r\nimport { Accessor, Animation, AnimationSampler, BufferView, Camera, Extras, GlTF, GlTFProperty, Node, Scene, Skin } from '../gltf-spec/glTF2';\r\nimport { KHRLightsPunctualGlTFExtension } from '../gltf-spec/KHR_lights_punctual';\r\nimport { ResolvedBuffers } from './types';\r\n\r\n/**\r\n * Get the extras object of a property, creating a new object if not exist.\r\n */\r\nexport function getExtras(property: GlTFProperty): Extras {\r\n  if (!property.extras) {\r\n    property.extras = {};\r\n  }\r\n  return property.extras;\r\n}\r\n\r\n/**\r\n * Traverse the given node hierachy.\r\n */\r\nexport function traverseNode(glTF: GlTF, nodeId: number, callback: (node: Node, parent: Node | null) => boolean | void, parent: Node | null = null): void {\r\n  const node = glTF.nodes?.[nodeId];\r\n  if (node && !callback(node, parent) && node.children) {\r\n    for (const childNodeId of node.children) {\r\n      traverseNode(glTF, childNodeId, callback, node);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the total duration of an animation.\r\n */\r\nexport function getAnimationDuration(glTF: GlTF & ResolvedBuffers, animation: Animation): number {\r\n  let duration = (getExtras(animation).duration as number) || 0;\r\n  for (const channel of animation.channels) {\r\n    const targetNode = glTF.nodes?.[channel.target.node!];\r\n    const accessor = glTF.accessors?.[animation.samplers[channel.sampler]?.input];\r\n    if (targetNode && accessor) {\r\n      duration = Math.max(duration, accessor.max?.[0] || 0);\r\n    }\r\n  }\r\n  return (getExtras(animation).duration = duration);\r\n}\r\n\r\n/**\r\n * Get the channel input data of an animation.\r\n */\r\nexport function getAnimationSamplerInput(glTF: GlTF & ResolvedBuffers, sampler: AnimationSampler): Float32Array | null {\r\n  let input = (getExtras(sampler).input as Float32Array) || null;\r\n  if (!input) {\r\n    const accessor = glTF.accessors?.[sampler.input];\r\n    if (accessor) {\r\n      const { buffer, byteOffset = 0 } = getAccessorData(glTF, accessor);\r\n      getExtras(sampler).input = input =\r\n        new Float32Array(buffer.buffer, byteOffset + buffer.byteOffset, (buffer.byteLength - byteOffset) / 4);\r\n    }\r\n  }\r\n  return input;\r\n}\r\n\r\ntype SamplerOutputBufferConstructor = Float32ArrayConstructor\r\n  | Int8ArrayConstructor | Uint8ArrayConstructor\r\n  | Int16ArrayConstructor | Uint16ArrayConstructor;\r\n\r\nexport type SamplerOutputBuffer = InstanceType<SamplerOutputBufferConstructor>\r\n\r\n/**\r\n * Get the channel output data of an animation.\r\n */\r\nexport function getAnimationSamplerOutput(glTF: GlTF & ResolvedBuffers, sampler: AnimationSampler): SamplerOutputBuffer | null {\r\n  let output = (getExtras(sampler).output as SamplerOutputBuffer) || null;\r\n  if (!output) {\r\n    const accessor = glTF.accessors?.[sampler.output];\r\n    if (accessor) {\r\n      const { buffer, byteOffset = 0 } = getAccessorData(glTF, accessor);\r\n      let Type: SamplerOutputBufferConstructor = Float32Array;\r\n      switch (accessor.componentType) {\r\n        case GLenum.BYTE: Type = Int8Array; break;\r\n        case GLenum.UNSIGNED_BYTE: Type = Uint8Array; break;\r\n        case GLenum.SHORT: Type = Uint16Array; break;\r\n        case GLenum.UNSIGNED_SHORT: Type = Uint16Array; break;\r\n      }\r\n\r\n      getExtras(sampler).output = output =\r\n        new Type(buffer.buffer, byteOffset + buffer.byteOffset, (buffer.byteLength - byteOffset) / Type.BYTES_PER_ELEMENT);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * Get the normalized animation output value from buffer.\r\n */\r\nexport function getAnimationOutputValue(buffer: SamplerOutputBuffer, index: number): number {\r\n  if (buffer instanceof Int8Array) {\r\n    return Math.max(buffer[index] / 127, -1);\r\n  }\r\n  if (buffer instanceof Uint8Array) {\r\n    return buffer[index] / 255;\r\n  }\r\n  if (buffer instanceof Int16Array) {\r\n    return Math.max(buffer[index] / 32767, -1);\r\n  }\r\n  if (buffer instanceof Uint16Array) {\r\n    return buffer[index] / 65535;\r\n  }\r\n  return buffer[index];\r\n}\r\n\r\n/**\r\n * Get the vertex format of an accessor.\r\n */\r\nexport function getAccessorVertexFormat(accessor: Accessor): VertexFormat | null {\r\n  switch (accessor.type) {\r\n    case 'VEC2':\r\n      if (accessor.componentType === GLenum.FLOAT) {\r\n        return VertexFormat.Float2;\r\n      } else if (accessor.componentType === GLenum.UNSIGNED_SHORT) {\r\n        return accessor.normalized ? VertexFormat.UShort2N : VertexFormat.UShort2;\r\n      } else if (accessor.componentType === GLenum.UNSIGNED_BYTE) {\r\n        return accessor.normalized ? VertexFormat.UChar2N : VertexFormat.UChar2;\r\n      }\r\n      break;\r\n    case 'VEC3':\r\n      if (accessor.componentType === GLenum.FLOAT) {\r\n        return VertexFormat.Float3;\r\n      }\r\n      // TODO: UChar3N/UShort3N can be used for vertex color, but unsupported by WebGPU. Widen to UChar4N/UShort4N instead\r\n      break;\r\n    case 'VEC4':\r\n      if (accessor.componentType === GLenum.FLOAT) {\r\n        return VertexFormat.Float4;\r\n      } else if (accessor.componentType === GLenum.UNSIGNED_BYTE) {\r\n        return accessor.normalized ? VertexFormat.UChar4N : VertexFormat.UChar4;\r\n      } else if (accessor.componentType === GLenum.UNSIGNED_SHORT) {\r\n        return accessor.normalized ? VertexFormat.UShort4N : VertexFormat.UShort4;\r\n      }\r\n      break;\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Get the element byte size of an accessor.\r\n */\r\nexport function getAccessorElementSize(accessor: Accessor): number {\r\n  let length = 0;\r\n  switch (accessor.type) {\r\n    case 'SCALAR': length = 1; break;\r\n    case 'VEC2': length = 2; break;\r\n    case 'VEC3': length = 3; break;\r\n    case 'VEC4':\r\n    case 'MAT2': length = 4; break;\r\n    case 'MAT3': length = 9; break;\r\n    case 'MAT4': length = 16; break;\r\n  }\r\n\r\n  let size = 0;\r\n  switch (accessor.componentType) {\r\n    case GLenum.BYTE:\r\n    case GLenum.UNSIGNED_BYTE: size = 1; break;\r\n    case GLenum.SHORT:\r\n    case GLenum.UNSIGNED_SHORT: size = 2; break;\r\n    case GLenum.UNSIGNED_INT:\r\n    case GLenum.FLOAT: size = 4; break;\r\n  }\r\n\r\n  return length * size;\r\n}\r\n\r\n/**\r\n * Get the data of an accessor.\r\n */\r\nexport function getAccessorData(glTF: GlTF & ResolvedBuffers, accessor: Accessor): { buffer: Uint8Array, byteOffset: number } {\r\n  let buffer: Uint8Array | undefined = getExtras(accessor).buffer as Uint8Array | undefined;\r\n  let byteOffset = (getExtras(accessor).byteOffset as number) || 0;\r\n  if (buffer) {\r\n    return { buffer, byteOffset };\r\n  }\r\n\r\n  const elementSize = getAccessorElementSize(accessor);\r\n  let bufferLength = accessor.count * elementSize;\r\n\r\n  // Resolve buffer from bufferView\r\n  const bufferView = glTF.bufferViews?.[accessor.bufferView!];\r\n  if (bufferView) {\r\n    const bufferViewData = getBufferViewData(glTF, bufferView);\r\n    const alignment = bufferView.byteStride || 1;\r\n\r\n    byteOffset = (accessor.byteOffset || 0) % alignment;\r\n    bufferLength = accessor.count * (bufferView.byteStride || elementSize);\r\n\r\n    const bufferOffset = (accessor.byteOffset || 0) - byteOffset;\r\n\r\n    buffer = new Uint8Array(bufferViewData.buffer, bufferViewData.byteOffset + bufferOffset, bufferLength);\r\n  }\r\n\r\n  // Resolve sparse accessor\r\n  if (accessor.sparse) {\r\n    const {\r\n      count,\r\n      indices: { bufferView: indexViewId, byteOffset: indexViewOffset = 0, componentType },\r\n      values: { bufferView: valueViewId, byteOffset: valueViewOffset = 0 }\r\n    } = accessor.sparse;\r\n    const indexView = glTF.bufferViews?.[indexViewId!];\r\n    const valueView = glTF.bufferViews?.[valueViewId!];\r\n\r\n    if (indexView && valueView) {\r\n      const sparseBuffer = new Uint8Array(bufferLength);\r\n      if (buffer) {\r\n        sparseBuffer.set(buffer, byteOffset);\r\n      }\r\n\r\n      const indexBuffer = getBufferViewData(glTF, indexView);\r\n      const valueBuffer = getBufferViewData(glTF, valueView);\r\n      const IndexBufferType = componentType === GLenum.UNSIGNED_BYTE ? Uint8Array : componentType === GLenum.UNSIGNED_SHORT ? Uint16Array : Uint32Array;\r\n      const indices = new IndexBufferType(indexBuffer.buffer, indexBuffer.byteOffset + indexViewOffset, count);\r\n      const values = new Uint8Array(valueBuffer.buffer, valueBuffer.byteOffset + valueViewOffset, count * elementSize);\r\n      for (let j = 0; j < count; ++j) {\r\n        const index = indices[j] * elementSize;\r\n        for (let k = 0; k < elementSize; ++k) {\r\n          sparseBuffer[index + k] = values[j * elementSize + k];\r\n        }\r\n      }\r\n\r\n      // Use the sparse buffer instead of underlying buffer view\r\n      byteOffset = 0;\r\n      buffer = sparseBuffer;\r\n    }\r\n  }\r\n\r\n  if (buffer) {\r\n    getExtras(accessor).buffer = buffer;\r\n    getExtras(accessor).byteOffset = byteOffset;\r\n  } else {\r\n    buffer = new Uint8Array();\r\n  }\r\n\r\n  return { buffer, byteOffset };\r\n}\r\n\r\n/**\r\n * Get the data of a bufferView.\r\n */\r\nexport function getBufferViewData(glTF: GlTF & ResolvedBuffers, bufferView: BufferView): Uint8Array {\r\n  let bufferViewData = getExtras(bufferView).buffer as Uint8Array | undefined;\r\n  if (!bufferViewData) {\r\n    const buffer = glTF.buffers?.[bufferView.buffer];\r\n    if (buffer) {\r\n      const bufferData = buffer.extras.buffer;\r\n      bufferViewData = new Uint8Array(\r\n        bufferData.buffer, bufferData.byteOffset + (bufferView.byteOffset || 0), bufferView.byteLength);\r\n    } else {\r\n      bufferViewData = new Uint8Array();\r\n    }\r\n    getExtras(bufferView).buffer = bufferViewData;\r\n  }\r\n  return bufferViewData;\r\n}\r\n\r\n/**\r\n * Get camera projection matrix.\r\n */\r\nexport function getCameraProjection(out: Mat4, camera: Camera | undefined, aspectRatio?: number): Mat4 {\r\n  if (camera?.orthographic) {\r\n    ortho(\r\n      -camera.orthographic.xmag, camera.orthographic.xmag,\r\n      -camera.orthographic.xmag / (aspectRatio || 1), camera.orthographic.xmag / (aspectRatio || 1),\r\n      camera.orthographic.znear, camera.orthographic.zfar,\r\n      out);\r\n  } else if (camera?.perspective) {\r\n    perspective(\r\n      aspectRatio || camera.perspective.aspectRatio || 1, camera.perspective.yfov, \r\n      camera.perspective.znear, camera.perspective.zfar || Infinity,\r\n      out);\r\n  } else {\r\n    mat4.id(out);\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the inverse bind matrices of a skin.\r\n */\r\nexport function getInverseBindMatrices(glTF: GlTF & ResolvedBuffers, skin: Skin): Float32Array {\r\n  let matrices = getExtras(skin).inverseBindMatrices as Float32Array;\r\n  if (!matrices) {\r\n    const accessor = glTF.accessors?.[skin.inverseBindMatrices!];\r\n    if (accessor) {\r\n      const { buffer, byteOffset } = getAccessorData(glTF, accessor);\r\n      matrices = new Float32Array(buffer.buffer, buffer.byteOffset + byteOffset, 16 * skin.joints.length);\r\n    } else {\r\n      matrices = new Float32Array(16 * skin.joints.length);\r\n    }\r\n    getExtras(skin).inverseBindMatrices = matrices;\r\n  }\r\n  return matrices;\r\n}\r\n\r\n/**\r\n * Get all scene lights\r\n */\r\nexport function getSceneLights(glTF: GlTF, scene: Scene): KHRLightsPunctualGlTFExtension[] {\r\n  const lights: KHRLightsPunctualGlTFExtension[] = [];\r\n  if (scene.nodes) {\r\n    for (const nodeId of scene.nodes) {\r\n      traverseNode(glTF, nodeId, (node) => {\r\n        const light = node.extensions?.KHR_lights_punctual as KHRLightsPunctualGlTFExtension;\r\n        if (light) {\r\n          lights.push(light);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  return lights;\r\n}\r\n"],"file":"gltf-utils.js"}