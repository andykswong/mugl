{"version":3,"sources":["../../../../src/js/gltf/shaders/pbr.frag.ts"],"names":["brdfGlsl","lightGlsl","materialGlsl","normalGlsl","textureGlsl","tonemapGlsl"],"mappings":"MAAOA,CAAAA,Q,mCACAC,CAAAA,S,oCACAC,CAAAA,Y,uCACAC,CAAAA,U,qCACAC,CAAAA,W,sCACAC,CAAAA,W,gCAEP,cAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAEA,WAAY;AACd,EAAEL,QAAS;AACX,EAAEI,WAAY;AACd,EAAED,UAAW;AACb,EAAED,YAAa;AACfsourcesContent":["import brdfGlsl from './chunks/brdf.glsl';\r\nimport lightGlsl from './chunks/light.glsl';\r\nimport materialGlsl from './chunks/material.glsl';\r\nimport normalGlsl from './chunks/normal.glsl';\r\nimport textureGlsl from './chunks/texture.glsl';\r\nimport tonemapGlsl from './chunks/tonemap.glsl';\r\n\r\nexport default `\r\n#ifdef GL_OES_standard_derivatives\r\n  #extension GL_OES_standard_derivatives : enable\r\n#endif\r\n\r\nprecision highp float;\r\n\r\nuniform float alphaCutoff;\r\nuniform vec3 cameraPosition;\r\n\r\nvarying vec3 vPosition;\r\n\r\n${tonemapGlsl}\r\n${brdfGlsl}\r\n${textureGlsl}\r\n${normalGlsl}\r\n${materialGlsl}\r\n${lightGlsl}\r\n\r\nvoid main () {\r\n  vec4 baseColor = getBaseColor();\r\n#ifdef ALPHAMODE_OPAQUE\r\n  baseColor.a = 1.0;\r\n#endif\r\n\r\n#ifdef MATERIAL_UNLIT\r\n  gl_FragColor = (vec4(linearTosRGB(baseColor.rgb), baseColor.a));\r\n  return;\r\n#endif\r\n\r\n  vec3 v = normalize(cameraPosition - vPosition);\r\n  NormalInfo normalInfo = getNormalInfo(vPosition);\r\n  vec3 n = normalInfo.n;\r\n\r\n  vec3 reflection = -normalize(reflect(v, n));\r\n  float nDotV = clamp(abs(dot(n, v)), 0.001, 1.0);\r\n\r\n  vec2 metallicRoughness = getMetallicRoughness();\r\n  float metallic = metallicRoughness[0];\r\n  float roughness = metallicRoughness[1];\r\n  float alphaRoughness = roughness * roughness;\r\n  float aSqr = alphaRoughness * alphaRoughness;\r\n\r\n  vec3 f0 = vec3(0.04);\r\n  vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * (1.0 - metallic);\r\n  vec3 specularColor = mix(f0, baseColor.rgb, metallic);\r\n\r\n  float r0 = max(max(specularColor.r, specularColor.g), specularColor.b);\r\n  float r90 = clamp(r0 * 25.0, 0.0, 1.0);\r\n  vec3 specularEnvR0 = specularColor.rgb;\r\n  vec3 specularEnvR90 = vec3(1.0, 1.0, 1.0) * r90;\r\n\r\n  vec3 diffuseFinal = vec3(0.0);\r\n  vec3 specularFinal = vec3(0.0);\r\n\r\n  #define NUM_LIGHTS 4\r\n\r\n  mat4 lights[4];\r\n  lights[0] = mat4(\r\n    0., 0., 0., 0.,\r\n    1., 1., 1., 1.,\r\n    .5, -.707, -.5, 0.,\r\n    0., 0., 0., 0.\r\n  );\r\n  lights[1] = mat4(\r\n    0., 0., 0., 0.,\r\n    1., 1., 1., .5,\r\n    -.5, .707, .5, 0.,\r\n    0., 0., 0., 0.\r\n  );\r\n  lights[2] = mat4(\r\n    0., 0., 0., 0.,\r\n    1., 1., 1., .25,\r\n    .5, .707, -.5, 0.,\r\n    0., 0., 0., 0.\r\n  );\r\n  lights[3] = mat4(\r\n    0., 0., 0., 0.,\r\n    1., 1., 1., .25,\r\n    -.5, -.707, .5, 0.,\r\n    0., 0., 0., 0.\r\n  );\r\n\r\n#ifdef NUM_LIGHTS\r\n  for (int i = 0; i < NUM_LIGHTS; ++i) {\r\n    vec3 pointToLight = getPointToLight(lights[i], vPosition);\r\n    vec3 intensity = getLighIntensity(lights[i], pointToLight);\r\n    vec3 l = normalize(pointToLight);\r\n    vec3 h = normalize(l + v);\r\n    float nDotL = clamp(dot(n, l), 0.001, 1.0);\r\n    float nDotH = clamp(dot(n, h), 0.0, 1.0);\r\n    float vDotH = clamp(dot(v, h), 0.0, 1.0);\r\n  \r\n    vec3 F = specularF(specularEnvR0, specularEnvR90, vDotH);\r\n    vec3 diffuse = (1.0 - F) * diffuseBRDF(diffuseColor);\r\n    vec3 specular = max(vec3(0.0), F * specularBRDF(aSqr, nDotL, nDotV, nDotH));\r\n\r\n    diffuseFinal += intensity * nDotL * diffuse;\r\n    specularFinal += intensity * nDotL * specular;\r\n  }\r\n#endif\r\n\r\n  vec4 ambient = vec4(0.1);\r\n\r\n  vec3 ambientDiffuse = ambient.rgb * diffuseBRDF(diffuseColor);\r\n  diffuseFinal += ambientDiffuse;\r\n\r\n  vec3 colorFinal = diffuseFinal + specularFinal;\r\n\r\n  float ao = getOcculsion();\r\n  colorFinal = mix(colorFinal, colorFinal * ao, occlusionTexture.scale);\r\n\r\n  vec3 emissive = getEmissiveFactor();\r\n  colorFinal += emissive;\r\n\r\n#ifdef ALPHAMODE_MASK\r\n  if (baseColor.a < alphaCutoff) {\r\n    discard;\r\n  }\r\n  baseColor.a = 1.0;\r\n#else\r\n  alphaCutoff;\r\n#endif\r\n\r\n  gl_FragColor = vec4(linearTosRGB(colorFinal), baseColor.a);\r\n}\r\n`;\r\n\r\n// To debug, append:\r\n// gl_FragColor = vec4(vec3(metallic), 1.0);\r\n// gl_FragColor = vec4(vec3(roughness), 1.0);\r\n// gl_FragColor = vec4((n + 1.0) / 2.0, 1.0);\r\n// gl_FragColor = baseColor;\r\n// gl_FragColor = vec4(vec3(ao), 1.0);\r\n// gl_FragColor = vec4(emissive, 1.0);\r\n// gl_FragColor = vec4(linearTosRGB(specularFinal), 1.0);\r\n// gl_FragColor = vec4(linearTosRGB(diffuseFinal), 1.0);\r\n// gl_FragColor = vec4(vec3(F), 1.0);\r\n// gl_FragColor = vec4(specularColor, 1.0);"],"file":"pbr.frag.js"}