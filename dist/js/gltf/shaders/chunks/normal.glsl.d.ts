declare const _default: "\nuniform TextureInfo normalTexture;\n\n#ifdef USE_NORMAL\n#ifdef USE_TANGENT\nvarying mat3 vTBN;\n#else\nvarying vec3 vNormal;\n#endif\n#endif\n\nstruct NormalInfo {\n  vec3 ng;\n  vec3 n;\n  vec3 t;\n  vec3 b;\n};\n\nNormalInfo getNormalInfo(vec3 v) {\n  vec3 n, t, b, ng;\n\n#ifdef USE_TANGENT\n  t = normalize(vTBN[0]);\n  b = normalize(vTBN[1]);\n  ng = normalize(vTBN[2]);\n#else\n#ifdef USE_NORMAL\n  ng = normalize(vNormal);\n#else\n  ng = normalize(cross(dFdx(v), dFdy(v)));\n#endif\n  vec2 UV = getTexCoord(normalTexture);\n  vec3 uvDx = dFdx(vec3(UV, 0.));\n  vec3 uvDy = dFdy(vec3(UV, 0.));\n  vec3 t_ = (uvDy.t * dFdx(v) - uvDx.t * dFdy(v)) / (uvDx.s * uvDy.t - uvDy.s * uvDx.t);\n\n  t = normalize(t_ - ng * dot(ng, t_));\n  b = cross(ng, t);\n#endif\n\n  if (gl_FrontFacing == false) {\n    t *= -1.;\n    b *= -1.;\n    ng *= -1.;\n  }\n\n  n = ng;\n  if (normalTexture.texCoord >= 0.) {\n    n = texture(normalTexture).rgb * 2. - vec3(1.);\n    n *= vec3(normalTexture.scale, normalTexture.scale, 1.);\n    n = mat3(t, b, ng) * normalize(n);\n  }\n\n  NormalInfo ni;\n  ni.ng = ng;\n  ni.t = t;\n  ni.b = b;\n  ni.n = n;\n  return ni;\n}\n";
export default _default;
//# sourceMappingURL=normal.glsl.d.ts.map