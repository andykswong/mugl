declare const _default: "\n#define LIGHT_DIRECTIONAL 0\n#define LIGHT_POINT 1\n#define LIGHT_SPOT 2\n\nint getLightType(mat4 light) {\n  return int(light[0].x);\n}\n\nvec2 getLightConeCos(mat4 light) {\n  return light[0].yz;\n}\n\nvec4 getLightColor(mat4 light) {\n  return light[1];\n}\n\nfloat getLightRange(mat4 light) {\n  return light[2].w;\n}\n\nvec3 getLightDirection(mat4 light) {\n  return light[2].xyz;\n}\n\nvec3 getLightPosition(mat4 light) {\n  return light[3].xyz;\n}\n\nfloat getRangeAttenuation(float range, float distance) {\n  if (range <= 0.) {\n    return 1. / pow(distance, 2.);\n  }\n  return max(min(1.0 - pow(distance / range, 4.), 1.), 0.) / pow(distance, 2.);\n}\n\nfloat getSpotAttenuation(vec3 pointToLight, vec3 direction, vec2 coneCos) {\n  float actualCos = dot(normalize(direction), normalize(-pointToLight));\n  float scale = 1. / max(.001, coneCos[0] - coneCos[1]);\n  float offset = -coneCos[1] * scale;\n  float att = clamp(actualCos * scale + offset, 0., 1.);\n  return att * att;\n}\n\nvec3 getPointToLight(mat4 light, vec3 position) {\n  return getLightType(light) != LIGHT_DIRECTIONAL ? getLightPosition(light) - position : -getLightDirection(light);\n}\n\nvec3 getLighIntensity(mat4 light, vec3 pointToLight) {\n  vec4 color = getLightColor(light);\n  vec3 intensity = color.rgb * color.a;\n\n  if (getLightType(light) != LIGHT_DIRECTIONAL) {\n    intensity *= getRangeAttenuation(getLightRange(light), length(pointToLight));\n  }\n  if (getLightType(light) == LIGHT_SPOT) {\n    intensity *= getSpotAttenuation(pointToLight, getLightDirection(light), getLightConeCos(light));\n  }\n\n  return intensity;\n}\n";
export default _default;
//# sourceMappingURL=light.glsl.d.ts.map