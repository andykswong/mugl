{"version":3,"sources":["../../../../../src/js/gltf/shaders/chunks/light.glsl.ts"],"names":[],"mappings":"AAcA,cAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7DA","sourcesContent":["/*\r\nLight matrix uniform is a mat4. Layout:\r\nstruct Light {\r\n float type;\r\n vec2 innerOuterConeCos;\r\n float padding;\r\n vec4 colorIntensity;\r\n vec3 direction;\r\n float range;\r\n vec3 position;\r\n float padding;\r\n};\r\n*/\r\n\r\nexport default `\r\n#define LIGHT_DIRECTIONAL 0\r\n#define LIGHT_POINT 1\r\n#define LIGHT_SPOT 2\r\n\r\nint getLightType(mat4 light) {\r\n  return int(light[0].x);\r\n}\r\n\r\nvec2 getLightConeCos(mat4 light) {\r\n  return light[0].yz;\r\n}\r\n\r\nvec4 getLightColor(mat4 light) {\r\n  return light[1];\r\n}\r\n\r\nfloat getLightRange(mat4 light) {\r\n  return light[2].w;\r\n}\r\n\r\nvec3 getLightDirection(mat4 light) {\r\n  return light[2].xyz;\r\n}\r\n\r\nvec3 getLightPosition(mat4 light) {\r\n  return light[3].xyz;\r\n}\r\n\r\nfloat getRangeAttenuation(float range, float distance) {\r\n  if (range <= 0.) {\r\n    return 1. / pow(distance, 2.);\r\n  }\r\n  return max(min(1.0 - pow(distance / range, 4.), 1.), 0.) / pow(distance, 2.);\r\n}\r\n\r\nfloat getSpotAttenuation(vec3 pointToLight, vec3 direction, vec2 coneCos) {\r\n  float actualCos = dot(normalize(direction), normalize(-pointToLight));\r\n  float scale = 1. / max(.001, coneCos[0] - coneCos[1]);\r\n  float offset = -coneCos[1] * scale;\r\n  float att = clamp(actualCos * scale + offset, 0., 1.);\r\n  return att * att;\r\n}\r\n\r\nvec3 getPointToLight(mat4 light, vec3 position) {\r\n  return getLightType(light) != LIGHT_DIRECTIONAL ? getLightPosition(light) - position : -getLightDirection(light);\r\n}\r\n\r\nvec3 getLighIntensity(mat4 light, vec3 pointToLight) {\r\n  vec4 color = getLightColor(light);\r\n  vec3 intensity = color.rgb * color.a;\r\n\r\n  if (getLightType(light) != LIGHT_DIRECTIONAL) {\r\n    intensity *= getRangeAttenuation(getLightRange(light), length(pointToLight));\r\n  }\r\n  if (getLightType(light) == LIGHT_SPOT) {\r\n    intensity *= getSpotAttenuation(pointToLight, getLightDirection(light), getLightConeCos(light));\r\n  }\r\n\r\n  return intensity;\r\n}\r\n`;\r\n"],"file":"light.glsl.js"}