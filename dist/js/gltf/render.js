import{mat3,mat4,vec3}from"munum";import{GLenum}from"../../common/gl/index.js";import{PRIMITIVE_VS_SRC}from"../../common/shaders/gltf/primitive.vs.glsl.js";import{PBR_FS_SRC}from"../../common/shaders/gltf/pbr.fs.glsl.js";import{AddressMode,BlendFactor,BufferType,CompareFunc,CullMode,FilterMode,IndexFormat,MinFilterMode,PrimitiveType,TexType,UniformFormat,UniformType,VertexFormat,vertexSize,ShaderType}from"../device/index.js";import{getCameraProjection,getExtras,getAccessorVertexFormat,getAccessorData}from"./gltf-utils.js";import{updateGlTF}from"./update.js";const MAX_VERTEX_ATTRIBS=16;const TARGET_ATTRIBUTES=["POSITION","NORMAL","TANGENT"];const TARGET_ATTRIBUTE_MATCHER=/(POSITION|NORMAL|TANGENT)_(\d+)/;const I4=mat4.create();const Z3=vec3.create();const tmpViewProj=mat4.create();export function renderGlTF(device,glTF,options={}){var _options$scene,_glTF$scenes,_glTF$scenes$scene;const scene=((_options$scene=options.scene)!==null&&_options$scene!==void 0?_options$scene:glTF.scene)||0;const nodes=glTF.nodes;const rootNodes=(_glTF$scenes=glTF.scenes)===null||_glTF$scenes===void 0?void 0:(_glTF$scenes$scene=_glTF$scenes[scene])===null||_glTF$scenes$scene===void 0?void 0:_glTF$scenes$scene.nodes;if(!nodes||!rootNodes){return}const activeNodes=updateGlTF(glTF,{scene});let view=I4;let proj=I4;let cameraPosition=Z3;if(options.camera){var _glTF$cameras;const activeCamera=(_glTF$cameras=glTF.cameras)===null||_glTF$cameras===void 0?void 0:_glTF$cameras[options.camera.index||0];if(activeCamera){var _activeCamera$extras,_activeCamera$extras2;view=((_activeCamera$extras=activeCamera.extras)===null||_activeCamera$extras===void 0?void 0:_activeCamera$extras.view)||I4;proj=getCameraProjection(tmpViewProj,activeCamera,device.width/device.height);cameraPosition=((_activeCamera$extras2=activeCamera.extras)===null||_activeCamera$extras2===void 0?void 0:_activeCamera$extras2.translation)||Z3}if(options.camera.model){cameraPosition=vec3.create(options.camera.model[12],options.camera.model[13],options.camera.model[14]);mat4.invert(options.camera.model,view)}proj=options.camera.proj||proj}const viewProj=mat4.mul(proj,view,tmpViewProj);const env={cameraPosition,viewProj};const pass=device.pass();const context=device.render(pass);const transparentDrawables=[];for(let i=0;i<activeNodes.length;++i){var _glTF$meshes;const node=nodes[activeNodes[i]];const mesh=(_glTF$meshes=glTF.meshes)===null||_glTF$meshes===void 0?void 0:_glTF$meshes[node.mesh];if(mesh){for(let i=0;i<mesh.primitives.length;++i){var _glTF$materials,_glTF$materials2;const primitive=mesh.primitives[i];if(((_glTF$materials=glTF.materials)===null||_glTF$materials===void 0?void 0:(_glTF$materials2=_glTF$materials[primitive.material])===null||_glTF$materials2===void 0?void 0:_glTF$materials2.alphaMode)==="BLEND"){transparentDrawables.push({node,mesh,primitive})}else{renderGlTFPrimitive(device,context,glTF,node,mesh,primitive,env)}}}}for(const drawable of transparentDrawables){renderGlTFPrimitive(device,context,glTF,drawable.node,drawable.mesh,drawable.primitive,env)}context.end();pass.destroy()}function renderGlTFPrimitive(device,context,glTF,node,mesh,primitive,env){var _glTF$accessors,_glTF$accessors2,_glTF$skins,_glTF$accessors3;env.model=mat4.copy(getExtras(node).model||I4,env.model||mat4.create());if(!mat4.nmat3(env.model,env.normalMatrix=env.normalMatrix||mat3.create())){mat3.id(env.normalMatrix)}let indexed=false;let offset=0;let vertexCount=((_glTF$accessors=glTF.accessors)===null||_glTF$accessors===void 0?void 0:(_glTF$accessors2=_glTF$accessors[primitive.attributes.POSITION])===null||_glTF$accessors2===void 0?void 0:_glTF$accessors2.count)||0;if(!vertexCount){return}const uniforms={...env,...loadMaterialUniforms(device,glTF,primitive.material)};if(primitive.targets){uniforms["targetWeights"]=getExtras(node).weights||node.weights||mesh.weights||[0,0,0,0,0,0,0,0]}let numJoints=0;const skin=(_glTF$skins=glTF.skins)===null||_glTF$skins===void 0?void 0:_glTF$skins[node.skin];if(primitive.attributes.JOINTS_0&&primitive.attributes.WEIGHTS_0&&skin){numJoints=skin.joints.length;const jointMatrix=getExtras(node).jointMatrix=getExtras(node).jointMatrix||new Float32Array(numJoints*16);uniforms["jointMatrix"]=jointMatrix}const bindings=[];for(const name in uniforms){if(typeof uniforms[name]==="number"){bindings.push({name,value:uniforms[name]})}else if(uniforms[name].length){bindings.push({name,values:uniforms[name]})}else{bindings.push({name,tex:uniforms[name]})}}const pipeline=loadGPUPipeline(device,glTF,primitive,numJoints);context.pipeline(pipeline).uniforms(bindings);for(let i=0;i<pipeline.props.buffers.length;++i){const attr=pipeline.props.buffers[i].attrs[0].name;const targetAttrMatch=TARGET_ATTRIBUTE_MATCHER.exec(attr);const buffer=loadGPUBuffer(device,glTF,targetAttrMatch?primitive.targets[targetAttrMatch[2]][targetAttrMatch[1]]:primitive.attributes[attr],BufferType.Vertex);if(buffer){context.vertex(i,buffer)}}const indexAccessor=(_glTF$accessors3=glTF.accessors)===null||_glTF$accessors3===void 0?void 0:_glTF$accessors3[primitive.indices];if(indexAccessor){const indexBuffer=loadGPUBuffer(device,glTF,primitive.indices,BufferType.Index);if(indexBuffer){context.index(indexBuffer);vertexCount=indexAccessor.count;offset=getExtras(indexAccessor).byteOffset||0;indexed=true}}if(indexed){context.drawIndexed(vertexCount,1,offset)}else{context.draw(vertexCount)}}function loadGPUPipeline(device,glTF,primitive,numJoints=0){var _glTF$materials3,_glTF$accessors4,_glTF$accessors5;let pipeline=getExtras(primitive).pipeline;if(pipeline){return pipeline}const mode=primitive.mode||PrimitiveType.Tri;const material=(_glTF$materials3=glTF.materials)===null||_glTF$materials3===void 0?void 0:_glTF$materials3[primitive.material];let alphaMode="OPAQUE";let doubleSided=false;let unlit=false;if(material){var _material$extensions;doubleSided=material.doubleSided||false;alphaMode=material.alphaMode||alphaMode;unlit=!!((_material$extensions=material.extensions)!==null&&_material$extensions!==void 0&&_material$extensions["KHR_materials_unlit"])}const buffers=getVertexBufferLayouts(glTF,primitive);const indexFormat=((_glTF$accessors4=glTF.accessors)===null||_glTF$accessors4===void 0?void 0:(_glTF$accessors5=_glTF$accessors4[primitive.indices])===null||_glTF$accessors5===void 0?void 0:_glTF$accessors5.componentType)===IndexFormat.UInt32?IndexFormat.UInt32:IndexFormat.UInt16;const normNumJoints=primitive.attributes["JOINTS_0"]&&primitive.attributes["WEIGHTS_0"]?Math.ceil(numJoints/12)*12:0;const pipelineKey=JSON.stringify([buffers,doubleSided,alphaMode,normNumJoints,indexFormat,mode,unlit]);const pipelines=getExtras(glTF).pipelines=getExtras(glTF).pipelines||{};pipeline=pipelines[pipelineKey];if(pipeline){return pipeline}const defines=[`ALPHAMODE_${alphaMode}`];for(const buffer of buffers){for(const attr of buffer.attrs){defines.push(`USE_${attr.name}`);if(attr.name==="COLOR_0"&&vertexSize(attr.format)===3){defines.push("COLOR_0_VEC3")}}}if(normNumJoints>0){defines.push(`NUM_JOINTS ${normNumJoints}`)}if(unlit){defines.push("MATERIAL_UNLIT")}const defineStr=defines.map(define=>`#define ${define}\n`).join("");const additionalUniforms=[];if(normNumJoints>0){additionalUniforms.push({name:"jointMatrix",type:UniformType.Value,valueFormat:UniformFormat.Mat4})}if(primitive.targets){additionalUniforms.push({name:"targetWeights",type:UniformType.Value,valueFormat:UniformFormat.Float})}const vert=device.shader({type:ShaderType.Vertex,source:defineStr+PRIMITIVE_VS_SRC});const frag=device.shader({type:ShaderType.Fragment,source:defineStr+PBR_FS_SRC});pipeline=getExtras(primitive).pipeline=pipelines[pipelineKey]=device.pipeline({vert,frag,buffers,indexFormat,mode,depth:{compare:CompareFunc.LEqual,write:!(alphaMode==="BLEND")},blend:alphaMode==="BLEND"?{srcFactorRGB:BlendFactor.SrcAlpha,dstFactorRGB:BlendFactor.OneMinusSrcAlpha,srcFactorAlpha:BlendFactor.One,dstFactorAlpha:BlendFactor.OneMinusSrcAlpha}:undefined,raster:{cullMode:doubleSided?CullMode.None:CullMode.Back},uniforms:[{name:"model",type:UniformType.Value,valueFormat:UniformFormat.Mat4},{name:"viewProj",type:UniformType.Value,valueFormat:UniformFormat.Mat4},{name:"normalMatrix",type:UniformType.Value,valueFormat:UniformFormat.Mat3},{name:"cameraPosition",type:UniformType.Value,valueFormat:UniformFormat.Vec3},{name:"alphaCutoff",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"baseColorFactor",type:UniformType.Value,valueFormat:UniformFormat.Vec4},{name:"baseColorTexture.tex",type:UniformType.Tex,texType:TexType.Tex2D},{name:"baseColorTexture.texCoord",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"metallicFactor",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"roughnessFactor",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"metallicRoughnessTexture.tex",type:UniformType.Tex,texType:TexType.Tex2D},{name:"metallicRoughnessTexture.texCoord",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"normalTexture.tex",type:UniformType.Tex,texType:TexType.Tex2D},{name:"normalTexture.texCoord",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"normalTexture.scale",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"emissiveFactor",type:UniformType.Value,valueFormat:UniformFormat.Vec3},{name:"emissiveTexture.tex",type:UniformType.Tex,texType:TexType.Tex2D},{name:"emissiveTexture.texCoord",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"occlusionTexture.tex",type:UniformType.Tex,texType:TexType.Tex2D},{name:"occlusionTexture.texCoord",type:UniformType.Value,valueFormat:UniformFormat.Float},{name:"occlusionTexture.scale",type:UniformType.Value,valueFormat:UniformFormat.Float},...additionalUniforms]});vert.destroy();frag.destroy();return pipeline}function getVertexBufferLayouts(glTF,primitive){const bufferIdMap={};const buffers=[];let shaderLoc=0;function getBufferLayoutDescriptor(accessor){var _glTF$bufferViews,_glTF$bufferViews2;if(!accessor.sparse){const buffer=getAccessorData(glTF,accessor).buffer;const bufferKey=`${accessor.bufferView},${buffer.byteOffset},${buffer.byteLength}`;if(bufferKey in bufferIdMap){return buffers[bufferIdMap[bufferKey]]}bufferIdMap[bufferKey]=buffers.length}const bufferLayout={attrs:[],stride:(_glTF$bufferViews=glTF.bufferViews)===null||_glTF$bufferViews===void 0?void 0:(_glTF$bufferViews2=_glTF$bufferViews[accessor.bufferView])===null||_glTF$bufferViews2===void 0?void 0:_glTF$bufferViews2.byteStride};buffers.push(bufferLayout);return bufferLayout}for(const name of["POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","JOINTS_0","WEIGHTS_0"]){var _glTF$accessors6;const accessor=(_glTF$accessors6=glTF.accessors)===null||_glTF$accessors6===void 0?void 0:_glTF$accessors6[primitive.attributes[name]];if(accessor){const format=getAccessorVertexFormat(accessor);if(!format){continue}getBufferLayoutDescriptor(accessor).attrs.push({name,format,shaderLoc,offset:getExtras(accessor).byteOffset||0});shaderLoc++}}if(primitive.targets){const accessors=new Array(3);for(let i=0;i<primitive.targets.length;++i){let attrs=0;for(let j=0;j<TARGET_ATTRIBUTES.length;++j){var _glTF$accessors7;if(accessors[j]=(_glTF$accessors7=glTF.accessors)===null||_glTF$accessors7===void 0?void 0:_glTF$accessors7[primitive.targets[i][TARGET_ATTRIBUTES[j]]]){++attrs}}if(shaderLoc+attrs>MAX_VERTEX_ATTRIBS){break}for(let j=0;j<TARGET_ATTRIBUTES.length;++j){const accessor=accessors[j];if(accessor){getBufferLayoutDescriptor(accessor).attrs.push({name:`${TARGET_ATTRIBUTES[j]}_${i}`,format:VertexFormat.Float3,shaderLoc,offset:getExtras(accessor).byteOffset||0});shaderLoc++}}}}return buffers}function loadMaterialUniforms(device,glTF,materialId){var _glTF$materials4;const env={"alphaCutoff":0.5,"baseColorFactor":[1,1,1,1],"baseColorTexture.tex":loadBlankGPUTexture(device,glTF),"baseColorTexture.texCoord":-1,"metallicFactor":1,"roughnessFactor":1,"metallicRoughnessTexture.tex":loadBlankGPUTexture(device,glTF),"metallicRoughnessTexture.texCoord":-1,"normalTexture.tex":loadBlankGPUTexture(device,glTF),"normalTexture.texCoord":-1,"normalTexture.scale":1,"emissiveFactor":[0,0,0],"emissiveTexture.tex":loadBlankGPUTexture(device,glTF),"emissiveTexture.texCoord":-1,"occlusionTexture.tex":loadBlankGPUTexture(device,glTF),"occlusionTexture.texCoord":-1,"occlusionTexture.scale":0};function setTexture(obj,name,scaleField=null){if(obj[name]){env[`${name}.tex`]=loadGPUTexture(device,glTF,obj[name].index);env[`${name}.texCoord`]=obj[name].texCoord||0;if(scaleField){var _obj$name$scaleField;env[`${name}.scale`]=(_obj$name$scaleField=obj[name][scaleField])!==null&&_obj$name$scaleField!==void 0?_obj$name$scaleField:env[`${name}.scale`]}}}const material=(_glTF$materials4=glTF.materials)===null||_glTF$materials4===void 0?void 0:_glTF$materials4[materialId];if(material){var _material$alphaCutoff;if(material.pbrMetallicRoughness){const pbr=material.pbrMetallicRoughness;env.baseColorFactor=pbr.baseColorFactor||env.baseColorFactor;if(pbr.metallicFactor||pbr.metallicFactor===0){env.metallicFactor=pbr.metallicFactor}if(pbr.roughnessFactor||pbr.roughnessFactor===0){env.roughnessFactor=pbr.roughnessFactor}setTexture(pbr,"baseColorTexture");setTexture(pbr,"metallicRoughnessTexture")}env.alphaCutoff=(_material$alphaCutoff=material.alphaCutoff)!==null&&_material$alphaCutoff!==void 0?_material$alphaCutoff:env.alphaCutoff;env.emissiveFactor=material.emissiveFactor||env.emissiveFactor;setTexture(material,"emissiveTexture");setTexture(material,"occlusionTexture","strength");setTexture(material,"normalTexture","scale")}return env}function loadGPUBuffer(device,glTF,accessorId,targetHint){var _glTF$accessors8,_glTF$bufferViews3;const accessor=(_glTF$accessors8=glTF.accessors)===null||_glTF$accessors8===void 0?void 0:_glTF$accessors8[accessorId];if(!accessor){return null}const isUByteIndex=targetHint===BufferType.Index&&accessor.componentType===GLenum.UNSIGNED_BYTE;if(accessor.sparse||isUByteIndex){let gpuBuffer=getExtras(accessor).gpuBuffer;if(!gpuBuffer){const accessorData=getAccessorData(glTF,accessor);let data=accessorData.buffer;if(isUByteIndex){const widenedData=new Uint16Array(data.byteLength);for(let i=0;i<data.byteLength;++i){widenedData[i]=data[accessorData.byteOffset+i]}data=getExtras(accessor).buffer=new Uint8Array(widenedData.buffer,0,widenedData.byteLength);getExtras(accessor).byteOffset=0}gpuBuffer=getExtras(accessor).gpuBuffer=device.buffer({type:targetHint,size:data.byteLength}).data(data)}return gpuBuffer}const bufferView=(_glTF$bufferViews3=glTF.bufferViews)===null||_glTF$bufferViews3===void 0?void 0:_glTF$bufferViews3[accessor.bufferView];if(!bufferView){return null}const gpuBuffers=getExtras(bufferView).gpuBuffers=getExtras(bufferView).gpuBuffers||{};const buffer=getAccessorData(glTF,accessor).buffer;const bufferKey=`${buffer.byteOffset},${buffer.byteLength}`;if(gpuBuffers[bufferKey]){return gpuBuffers[bufferKey]}return gpuBuffers[bufferKey]=device.buffer({type:bufferView.target||targetHint,size:buffer.byteLength}).data(buffer)}function loadGPUTexture(device,glTF,textureId){var _glTF$textures,_glTF$images,_glTF$samplers,_img,_img2;const texture=(_glTF$textures=glTF.textures)===null||_glTF$textures===void 0?void 0:_glTF$textures[textureId];if(!texture){return loadBlankGPUTexture(device,glTF)}let gpuTexture=getExtras(texture).texture;if(gpuTexture){return gpuTexture}let img=null;const samplerDesc={wrapU:AddressMode.Repeat,wrapV:AddressMode.Repeat,magFilter:FilterMode.Linear,minFilter:MinFilterMode.Linear};const image=(_glTF$images=glTF.images)===null||_glTF$images===void 0?void 0:_glTF$images[texture.source];if(image){img=image.extras.image}const sampler=(_glTF$samplers=glTF.samplers)===null||_glTF$samplers===void 0?void 0:_glTF$samplers[texture.sampler];if(sampler){samplerDesc.wrapU=sampler.wrapS||samplerDesc.wrapU;samplerDesc.wrapV=sampler.wrapT||samplerDesc.wrapV;samplerDesc.magFilter=sampler.magFilter||samplerDesc.magFilter;switch(sampler.minFilter){case MinFilterMode.Nearest:case MinFilterMode.NearestMipmapNearest:case MinFilterMode.NearestMipmapLinear:samplerDesc.minFilter=MinFilterMode.Nearest;break;}}gpuTexture=getExtras(texture).texture=device.texture({width:((_img=img)===null||_img===void 0?void 0:_img.naturalWidth)||1,height:((_img2=img)===null||_img2===void 0?void 0:_img2.naturalHeight)||1},samplerDesc);gpuTexture.data(img?{image:img}:{buffer:new Uint8Array([255,255,255,255])});return gpuTexture}function loadBlankGPUTexture(device,glTF){let gpuTexture=getExtras(glTF).blankTexture;if(gpuTexture){return gpuTexture}gpuTexture=getExtras(glTF).blankTexture=device.texture({}).data({buffer:new Uint8Array([255,255,255,255])});return gpuTexture}
//# sourceMappingURL=render.js.map