{"version":3,"sources":["../../../src/js/gltf/update.ts"],"names":["array","mat4","quat","transform","vec3","getAnimationDuration","getAnimationSamplerInput","getAnimationSamplerOutput","getExtras","getInverseBindMatrices","I4","create","Iq","S3","Z3","updateGlTF","glTF","options","activeNodes","rootNodes","scenes","scene","nodes","i","length","updateGlTFNode","sort","filter","n","a","nodeId","node","updateGlTFCamera","updateGlTFSkin","updateGlTFAnimation","animation","time","loop","duration","currentTime","Math","floor","min","channel","channels","targetNode","target","sampler","samplers","input","output","sampleCount","startTime","endTime","currentKeyframe","nextKeyframe","lastKeyFrame","lastKeyframe","path","componentSize","weights","meshes","mesh","interpolation","previousTime","nextTime","t","value","Array","tmp","copy","deltaTime","t2","t3","slerp","origin","push","nodeExtras","matrix","rotation","scale","translation","model","mul","children","child","camera","cameras","view","invert","skin","skins","numJoints","joints","jointMatrix","Float32Array","inverseBindMatrices","jointNode","jointMat","buffer","byteOffset","invBind"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n\r\nimport { array, Mat4, mat4, quat, transform, Vec3, vec3 } from 'munum';\r\nimport { getAnimationDuration, getAnimationSamplerInput, getAnimationSamplerOutput, getExtras, getInverseBindMatrices } from './gltf-utils';\r\nimport { Animation, Node } from '../gltf-spec/glTF2';\r\nimport { ResolvedGlTF } from './types';\r\nimport { Quat } from 'munum/dist/quat';\r\n\r\nconst I4 = mat4.create();\r\nconst Iq = quat.create();\r\nconst S3 = vec3.create(1, 1, 1);\r\nconst Z3 = vec3.create();\r\n\r\n/**\r\n * Options to update a GlTF model.\r\n */\r\nexport interface UpdateGlTFOptions {\r\n  /** The scene to scene. Defaults to the active scene specified by the model. */\r\n  scene?: number;\r\n}\r\n\r\n/**\r\n * Update a GlTF scene and returns all active nodes of the scene.\r\n * @param glTF Resolve GlTF model\r\n * @param options update options\r\n * @returns GlTF node indices for the scene\r\n */\r\nexport function updateGlTF(glTF: ResolvedGlTF, options: UpdateGlTFOptions = {}): number[] {\r\n  let activeNodes: number[] = [];\r\n\r\n  const rootNodes = glTF.scenes?.[(options.scene ?? glTF.scene) || 0]?.nodes;\r\n  if (rootNodes) {\r\n    for (let i = 0; i < rootNodes.length; ++i) {\r\n      updateGlTFNode(glTF, rootNodes[i], I4, activeNodes);\r\n    }\r\n  }\r\n\r\n  // Sort and remove duplicates\r\n  activeNodes = activeNodes.sort().filter((n, i, a) => (!i || n !== a[i - 1]));\r\n\r\n  // Find and update active cameras and skinned nodes\r\n  for (const nodeId of activeNodes) {\r\n    const node = glTF.nodes![nodeId];\r\n\r\n    if ('camera' in node) {\r\n      updateGlTFCamera(glTF, node);\r\n    }\r\n\r\n    if ('skin' in node) {\r\n      updateGlTFSkin(glTF, node);\r\n    }\r\n  }\r\n\r\n  return activeNodes;\r\n}\r\n\r\nexport function updateGlTFAnimation(glTF: ResolvedGlTF, animation: Animation, time = 0, loop = false): boolean {\r\n  const duration = getAnimationDuration(glTF, animation);\r\n  const currentTime = loop ? time - Math.floor(time / duration) * duration : Math.min(time, duration);\r\n\r\n  for (const channel of animation.channels) {\r\n    const targetNode = glTF.nodes?.[channel.target.node!];\r\n    const sampler = animation.samplers[channel.sampler];\r\n    if (!targetNode || !sampler) {\r\n      continue;\r\n    }\r\n\r\n    const input = getAnimationSamplerInput(glTF, sampler);\r\n    const output = getAnimationSamplerOutput(glTF, sampler);\r\n    if (!input?.length || !output) {\r\n      continue;\r\n    }\r\n\r\n    const sampleCount = input.length;\r\n    const startTime = input[0];\r\n    const endTime = input[sampleCount - 1];\r\n\r\n    // Seek to the current keyframe, using the last keyframe as a reference\r\n    let currentKeyframe: number;\r\n    let nextKeyframe: number;\r\n    if (currentTime <= startTime) {\r\n      currentKeyframe = nextKeyframe = 0;\r\n    } else if (currentTime >= endTime) {\r\n      currentKeyframe = nextKeyframe = sampleCount - 1;\r\n    } else {\r\n      let lastKeyFrame = (getExtras(channel).lastKeyframe as number) || 0;\r\n      if (input[lastKeyFrame] > currentTime) {\r\n        lastKeyFrame = 0;\r\n      }\r\n  \r\n      for (\r\n        currentKeyframe = lastKeyFrame, nextKeyframe = currentKeyframe + 1;\r\n        nextKeyframe < sampleCount;\r\n        ++currentKeyframe, ++nextKeyframe\r\n      ) {\r\n        if (input[currentKeyframe] <= currentTime && input[nextKeyframe] > currentTime) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    getExtras(channel).lastKeyframe = currentKeyframe;\r\n\r\n    const path = channel.target.path;\r\n    let componentSize = 3;  // for translation / scale\r\n    switch (path) {\r\n      case 'rotation':\r\n        componentSize = 4;\r\n        break;\r\n      case 'weights':\r\n        componentSize = targetNode.weights?.length || glTF.meshes?.[targetNode.mesh!]?.weights?.length || 0;\r\n        break;\r\n    }\r\n\r\n    if (!componentSize) {\r\n      continue;\r\n    }\r\n\r\n    let interpolation = sampler.interpolation;\r\n    if (currentKeyframe === nextKeyframe) {\r\n      interpolation = 'STEP';\r\n    }\r\n\r\n    const previousTime = input[currentKeyframe];\r\n    const nextTime = input[nextKeyframe];\r\n    const t = (currentTime - previousTime) / (nextTime - previousTime);\r\n\r\n    const value = getExtras(targetNode)[path] = (getExtras(targetNode)[path] as number[]) || new Array(componentSize);\r\n    const tmp = new Array(componentSize);\r\n    switch (interpolation) {\r\n      case 'STEP':\r\n        array.copy(output, value, currentKeyframe * componentSize, 0, componentSize);\r\n        break;\r\n      case 'CUBICSPLINE': {\r\n        const deltaTime = nextTime - previousTime;\r\n        const t2 = t * t, t3 = t * t2;\r\n        for (let i = 0; i < componentSize; ++i) {\r\n          value[i] = (2 * t3 - 3 * t2 + 1) * output[(currentKeyframe * 3 + 1) * componentSize + i] // previousPoint\r\n            + (t3 - 2 * t2 + t) * deltaTime * output[(currentKeyframe * 3 + 2) * componentSize + i] // previousOutputTangent\r\n            + (-2 * t3 + 3 * t2) * output[(nextKeyframe * 3 + 1) * componentSize + i] //nextPoint\r\n            + (t3 - t2) * deltaTime * output[nextKeyframe * 3 * componentSize + i] // nextInputTangent\r\n        }\r\n        break;\r\n      }\r\n      default: { // LINEAR\r\n        if (path === 'rotation') {\r\n          array.copy(output, value, currentKeyframe * componentSize, 0, componentSize);\r\n          array.copy(output, tmp, nextKeyframe * componentSize, 0, componentSize);\r\n          quat.slerp(value as Quat, tmp as Quat, t, value as Quat);\r\n        } else {\r\n          for (let i = 0; i < componentSize; ++i) {\r\n            value[i] = (1 - t) * output[currentKeyframe * componentSize + i] + t * output[nextKeyframe * componentSize + i];\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return time < duration;\r\n}\r\n\r\nfunction updateGlTFNode(glTF: ResolvedGlTF, nodeId: number, origin: Mat4, activeNodes: number[] | null = null): void {\r\n  const node = glTF.nodes?.[nodeId];\r\n  if (!node) {\r\n    return; // Skip invalid node\r\n  }\r\n  activeNodes?.push(nodeId);\r\n\r\n  const nodeExtras = getExtras(node);\r\n\r\n  // Update local matrix\r\n  const matrix = nodeExtras.matrix = (nodeExtras.matrix as Mat4) || mat4.create();\r\n  if (node.matrix) {\r\n    mat4.copy(node.matrix, matrix);\r\n  } else if (\r\n    node.rotation || node.scale || node.translation ||\r\n    nodeExtras.rotation || nodeExtras.scale || nodeExtras.translation\r\n  ) {\r\n    transform(\r\n      (nodeExtras.translation as Vec3) || node.translation || Z3,\r\n      (nodeExtras.rotation as Quat) || node.rotation || Iq,\r\n      (nodeExtras.scale as Vec3) || node.scale || S3,\r\n      matrix\r\n    );\r\n  }\r\n\r\n  // Update model matrix\r\n  const model = nodeExtras.model = mat4.mul(origin, matrix, (nodeExtras.model as Mat4) || mat4.create());\r\n\r\n  if (node.children) {\r\n    for (const child of node.children) {\r\n      updateGlTFNode(glTF, child, model, activeNodes);\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateGlTFCamera(glTF: ResolvedGlTF, node: Node): void {\r\n  const camera = glTF.cameras?.[node.camera!];\r\n  if (camera) {\r\n    const model = getExtras(node).model = (getExtras(node).model as Mat4) || I4;\r\n    getExtras(camera).view = mat4.invert(model, (getExtras(camera).view as Mat4)|| mat4.create());\r\n    getExtras(camera).translation = [model[12], model[13], model[14]];\r\n  }\r\n}\r\n\r\nfunction updateGlTFSkin(glTF: ResolvedGlTF, node: Node): void {\r\n  const skin = glTF.skins?.[node.skin!];\r\n  if (skin) {\r\n    const numJoints = skin.joints.length;\r\n    const jointMatrix = getExtras(node).jointMatrix = (getExtras(node).jointMatrix as Float32Array) || new Float32Array(numJoints * 16);\r\n    const inverseBindMatrices = getInverseBindMatrices(glTF, skin);\r\n\r\n    for (let i = 0; i < numJoints; ++i) {\r\n      const jointNode = glTF.nodes![skin.joints[i]];\r\n      const jointMat = new Float32Array(jointMatrix.buffer, jointMatrix.byteOffset + 16 * 4 * i, 16) as unknown as Mat4;\r\n      const invBind = new Float32Array(inverseBindMatrices.buffer, inverseBindMatrices.byteOffset + 16 * 4 * i, 16) as unknown as Mat4;\r\n\r\n      mat4.invert((getExtras(node).model as Mat4) || I4, jointMat);\r\n      mat4.mul(jointMat, (jointNode && (getExtras(jointNode).model as Mat4)) || I4, jointMat);\r\n      mat4.mul(jointMat, invBind, jointMat);\r\n    }\r\n  }\r\n}\r\n"],"file":"update.js"}