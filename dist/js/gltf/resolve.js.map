{"version":3,"sources":["../../../src/js/gltf/resolve.ts"],"names":["isGLB","parseGLB","decodeText","getBaseUrl","resolveRelativeUri","getBufferViewData","getExtras","resolveGlTF","file","loader","glTFResourceFetch","baseUrl","uri","glTF","binaryChunk","binContent","glTFContent","JSON","parse","Error","resolvedGlTF","resolveBuffers","resolveImages","type","Promise","resolve","reject","img","Image","crossOrigin","onerror","onload","src","fetch","then","data","arrayBuffer","buffer","Uint8Array","buffers","i","length","bufferData","images","image","bufferView","isObjectURL","imageData","bufferViewObj","bufferViews","blob","Blob","mimeType","URL","createObjectURL","revokeObjectURL"],"mappings":"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","sourcesContent":["import { isGLB, parseGLB } from './glb';\r\nimport { GlTF, GlTFFile, ResolvedBuffers, ResolvedGlTF, ResolvedImages, GlTFResourceLoader } from './types';\r\nimport { decodeText, getBaseUrl, resolveRelativeUri } from './utils';\r\nimport { getBufferViewData, getExtras } from './gltf-utils';\r\n\r\n/**\r\n * Fetch a GlTF model and resolve its external resources (binary buffers and images).\r\n */\r\nexport async function resolveGlTF(\r\n  file: GlTFFile,\r\n  loader: GlTFResourceLoader = glTFResourceFetch\r\n): Promise<ResolvedGlTF> {\r\n  const baseUrl = file.uri ? getBaseUrl(file.uri) : '';\r\n  let glTF: GlTF | undefined = file.glTF;\r\n  let binaryChunk: Uint8Array | undefined = file.binaryChunk;\r\n\r\n  if (!glTF && file.uri) {\r\n    const binContent = await loader(file.uri, 'bin');\r\n    if (isGLB(binContent)) {\r\n      const glTFContent = parseGLB(binContent);\r\n      glTF = glTFContent.glTF;\r\n      binaryChunk = glTFContent.binaryChunk;\r\n    } else {\r\n      glTF = JSON.parse(decodeText(binContent));\r\n    }\r\n  }\r\n\r\n  if (!glTF) {\r\n    throw new Error('Failed to load glTF JSON');\r\n  }\r\n\r\n  const resolvedGlTF = await resolveBuffers(glTF, binaryChunk, loader, baseUrl);\r\n  return await resolveImages(resolvedGlTF, loader, baseUrl);\r\n}\r\n\r\nexport function glTFResourceFetch(uri: string, type: 'bin'): Promise<Uint8Array>;\r\nexport function glTFResourceFetch(uri: string, type: 'img'): Promise<TexImageSource>;\r\nexport function glTFResourceFetch(uri: string, type: 'bin' | 'img'): Promise<Uint8Array | TexImageSource | string> {\r\n  if (type === 'img') {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      img.crossOrigin = 'anonymous';\r\n      img.onerror = () => reject(new Error('Failed to load: ' + uri));\r\n      img.onload = () => resolve(img);\r\n      img.src = uri;\r\n    });\r\n  }\r\n\r\n  // return binary\r\n  return fetch(uri)\r\n      .then(data => data.arrayBuffer())\r\n      .then(buffer => new Uint8Array(buffer));\r\n}\r\n\r\nasync function resolveBuffers<T extends GlTF>(\r\n  glTF: T, binaryChunk: Uint8Array | undefined, loader: GlTFResourceLoader, baseUrl: string\r\n): Promise<T & ResolvedBuffers> {\r\n  if (glTF.buffers) {\r\n    for (let i = 0; i < glTF.buffers.length; ++i) {\r\n      const buffer = glTF.buffers[i];\r\n      if (getExtras(buffer).buffer) {\r\n        continue;\r\n      }\r\n\r\n      let bufferData: Uint8Array;\r\n      const uri = buffer.uri;\r\n      if (!uri) {\r\n        if (i !== 0 || !binaryChunk) {\r\n          throw new Error('Invalid glTF: missing uri for buffer ' + i);\r\n        }\r\n        bufferData = binaryChunk;\r\n      } else {\r\n        bufferData = await loader(resolveRelativeUri(uri, baseUrl), 'bin');\r\n      }\r\n\r\n      getExtras(buffer).buffer = bufferData;\r\n    }\r\n  }\r\n\r\n  return glTF as T & ResolvedBuffers;\r\n}\r\n\r\nasync function resolveImages<T extends GlTF & ResolvedBuffers>(\r\n  glTF: T, loader: GlTFResourceLoader, baseUrl: string\r\n): Promise<T & ResolvedImages> {\r\n  if (glTF.images) {\r\n    for (let i = 0; i < glTF.images.length; ++i) {\r\n      const image = glTF.images[i];\r\n      if (getExtras(image).image) {\r\n        continue;\r\n      }\r\n\r\n      const bufferView = image.bufferView;\r\n      let isObjectURL = false;\r\n      let uri = image.uri;\r\n      let imageData: TexImageSource;\r\n\r\n      if (bufferView) {\r\n        const bufferViewObj = glTF.bufferViews?.[bufferView];\r\n        if (!bufferViewObj) {\r\n          throw new Error('Invalid glTF: invalid bufferView for image ' + i);\r\n        }\r\n\r\n        const blob = new Blob([ getBufferViewData(glTF, bufferViewObj) ], { type: image.mimeType });\r\n        uri = URL.createObjectURL(blob);\r\n        isObjectURL = true;\r\n      }\r\n\r\n      if (uri) {\r\n        try {\r\n          imageData = await loader(resolveRelativeUri(uri, baseUrl), 'img');\r\n        } finally {\r\n          if (isObjectURL) {\r\n            URL.revokeObjectURL(uri);\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error('Invalid glTF: missing uri or bufferView for image ' + i);\r\n      }\r\n\r\n      getExtras(image).image = imageData;\r\n    }\r\n  }\r\n\r\n  return glTF as T & ResolvedImages;\r\n}\r\n"],"file":"resolve.js"}