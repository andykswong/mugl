/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Instances of shading techniques with external shader programs along with their parameterized values.  Shading techniques describe data types and semantics for GLSL vertex and fragment shader programs.
 */
export declare type KHRTechniquesWebglGlTFExtension = KHRTechniquesWebglGlTFExtension1 & KHRTechniquesWebglGlTFExtension3;
export declare type KHRTechniquesWebglGlTFExtension1 = GlTFProperty & KHRTechniquesWebglGlTFExtension2;
/**
 * A shader program, including its vertex and fragment shaders.
 */
export declare type Program = GlTFChildOfRootProperty & Program1;
export declare type GlTFChildOfRootProperty = GlTFProperty & GlTFChildOfRootProperty1;
export declare type GlTFId = number;
/**
 * A vertex or fragment shader. Exactly one of `uri` or `bufferView` must be provided for the GLSL source.
 */
export declare type Shader = Shader1 & Shader3;
export declare type Shader1 = GlTFChildOfRootProperty & Shader2;
export declare type Shader3 = {
    [k: string]: unknown;
} | {
    [k: string]: unknown;
};
export declare type Shader4 = Shader1 & Shader3;
/**
 * A template for material appearances.
 */
export declare type Technique = GlTFChildOfRootProperty & Technique1;
/**
 * An attribute input to a technique and the corresponding semantic.
 */
export declare type Attribute = GlTFProperty;
/**
 * A uniform input to a technique, and an optional semantic and value.
 */
export declare type Uniform = GlTFProperty;
export interface GlTFProperty {
    extensions?: Extension;
    extras?: Extras;
    [k: string]: unknown;
}
/**
 * Dictionary object with extension-specific objects.
 */
export interface Extension {
    [k: string]: {
        [k: string]: unknown;
    };
}
/**
 * Application-specific data.
 */
export interface Extras {
    [k: string]: unknown;
}
export interface KHRTechniquesWebglGlTFExtension2 {
    /**
     * An array of `Program` objects.
     */
    programs: [Program, ...Program[]];
    /**
     * An array of `Shader` objects.
     */
    shaders: [Shader, ...Shader4[]];
    /**
     * An array of `Technique` objects.
     */
    techniques: [Technique, ...Technique[]];
    extensions?: unknown;
    extras?: unknown;
    [k: string]: unknown;
}
export interface GlTFChildOfRootProperty1 {
    /**
     * The user-defined name of this object.
     */
    name?: string;
    [k: string]: unknown;
}
export interface Program1 {
    /**
     * The index of the fragment shader.
     */
    fragmentShader: GlTFId;
    /**
     * The index of the vertex shader.
     */
    vertexShader: GlTFId;
    /**
     * The names of required WebGL 1.0 extensions.
     */
    glExtensions?: [string, ...string[]];
    name?: unknown;
    extensions?: unknown;
    extras?: unknown;
    [k: string]: unknown;
}
export interface Shader2 {
    /**
     * The uri of the GLSL source.
     */
    uri?: string;
    /**
     * The shader stage.
     */
    type: 35632 | 35633;
    /**
     * The index of the bufferView that contains the GLSL shader source. Use this instead of the shader's uri property.
     */
    bufferView?: GlTFId;
    name?: unknown;
    extensions?: unknown;
    extras?: unknown;
    [k: string]: unknown;
}
export interface Technique1 {
    /**
     * The index of the program.
     */
    program: GlTFId;
    /**
     * A dictionary object of `Attribute` objects.
     */
    attributes?: {
        [k: string]: Attribute;
    };
    /**
     * A dictionary object of `Uniform` objects.
     */
    uniforms?: {
        [k: string]: Uniform;
    };
    name?: unknown;
    extensions?: unknown;
    extras?: unknown;
    [k: string]: unknown;
}
export interface KHRTechniquesWebglGlTFExtension3 {
    [k: string]: unknown;
}
//# sourceMappingURL=KHR_techniques_webgl.d.ts.map