import{glTexInternalFormat,glTexFormat,glTexType,isDepthStencil,is3DTexture,FilterMode,GLenum,MinFilterMode,MipmapHint,PixelFormat,TexType}from"../../common/index.js";import{AddressMode}from"../device/index.js";export class GLTexture{constructor(context,props={},sampler={},webgl2=false){var _sampler$maxLOD,_sampler$minLOD;this.glt=null;this.glrb=null;this.webgl2=webgl2;const gl=this.gl=context.gl;const type=props.type||TexType.Tex2D;const format=props.format||PixelFormat.RGBA8;const isCube=type===TexType.Cube;const renderTarget=isDepthStencil(format)&&(props.renderTarget||false);const glInternalFormat=glTexInternalFormat(format,webgl2);this.props={type,format,width:props.width||1,height:props.height||1,depth:isCube?6:props.depth||1,mipLevels:props.mipLevels||1,samples:webgl2?props.samples||1:1,renderTarget};this.sampler={wrapU:sampler.wrapU||AddressMode.Clamp,wrapV:sampler.wrapV||AddressMode.Clamp,wrapW:sampler.wrapW||AddressMode.Clamp,magFilter:sampler.magFilter||FilterMode.Nearest,minFilter:sampler.minFilter||MinFilterMode.Nearest,maxLOD:(_sampler$maxLOD=sampler.maxLOD)!==null&&_sampler$maxLOD!==void 0?_sampler$maxLOD:1000,minLOD:(_sampler$minLOD=sampler.minLOD)!==null&&_sampler$minLOD!==void 0?_sampler$minLOD:-1000,maxAniso:sampler.maxAniso||1};if(renderTarget||this.props.samples>1){gl.bindRenderbuffer(GLenum.RENDERBUFFER,this.glrb=gl.createRenderbuffer());if(this.props.samples>1){gl.renderbufferStorageMultisample(GLenum.RENDERBUFFER,this.props.samples,glInternalFormat,this.props.width,this.props.height)}else{gl.renderbufferStorage(GLenum.RENDERBUFFER,glInternalFormat,this.props.width,this.props.height)}}if(!renderTarget){gl.activeTexture(GLenum.TEXTURE0);gl.bindTexture(type,this.glt=gl.createTexture());gl.texParameteri(type,GLenum.TEXTURE_MIN_FILTER,this.sampler.minFilter);gl.texParameteri(type,GLenum.TEXTURE_MAG_FILTER,this.sampler.magFilter);gl.texParameteri(type,GLenum.TEXTURE_WRAP_S,this.sampler.wrapU);gl.texParameteri(type,GLenum.TEXTURE_WRAP_T,this.sampler.wrapV);if(webgl2){gl.texParameteri(type,GLenum.TEXTURE_WRAP_R,this.sampler.wrapW);gl.texParameterf(type,GLenum.TEXTURE_MAX_LOD,this.sampler.maxLOD);gl.texParameterf(type,GLenum.TEXTURE_MIN_LOD,this.sampler.minLOD)}if(this.sampler.maxAniso>1){gl.texParameterf(type,GLenum.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(this.sampler.maxAniso,gl.getParameter(GLenum.MAX_TEXTURE_MAX_ANISOTROPY_EXT)))}if(webgl2){if(is3DTexture(type)){gl.texStorage3D(type,this.props.mipLevels,glInternalFormat,this.props.width,this.props.height,this.props.depth)}else{gl.texStorage2D(type,this.props.mipLevels,glInternalFormat,this.props.width,this.props.height)}}else{const glFormat=glTexFormat(format);const glType=glTexType(format,this.webgl2);const baseTarget=isCube?GLenum.TEXTURE_CUBE_MAP_POSITIVE_X:type;const targetCount=isCube?6:1;for(let i=0;i<targetCount;++i){for(let level=0;level<this.props.mipLevels;++level){gl.texImage2D(baseTarget+i,level,glInternalFormat,this.props.width>>level||1,this.props.height>>level||1,0,glFormat,glType,null)}}}}}data(data,[x,y,z=0]=[0,0],[width,height,depth=this.props.depth-z]=[this.props.width-x,this.props.height-y],mipLevel=0){var _data$images;const glFormat=glTexFormat(this.props.format);const glType=glTexType(this.props.format,this.webgl2);const isCube=this.props.type===TexType.Cube;const isTexArray=this.props.type===TexType.Array;const baseTarget=isCube?GLenum.TEXTURE_CUBE_MAP_POSITIVE_X+z:this.props.type;this.gl.activeTexture(GLenum.TEXTURE0);this.gl.bindTexture(this.props.type,this.glt);const targetCount=(isCube||isTexArray)&&((_data$images=data.images)===null||_data$images===void 0?void 0:_data$images.length)||1;const buffer=data.buffer||null;let image=data.image||null;for(let i=0;i<targetCount;++i){var _data$images2;image=((_data$images2=data.images)===null||_data$images2===void 0?void 0:_data$images2[i])||image;if(is3DTexture(this.props.type)){this.gl.texSubImage3D(baseTarget,mipLevel,x,y,z+i*depth,width,height,depth,glFormat,glType,image||buffer)}else{if(buffer){this.gl.texSubImage2D(baseTarget+i,mipLevel,x,y,width,height,glFormat,glType,buffer)}else if(image){this.gl.texSubImage2D(baseTarget+i,mipLevel,x,y,glFormat,glType,image)}}}return this}mipmap(type=MipmapHint.None){this.gl.activeTexture(GLenum.TEXTURE0);this.gl.bindTexture(this.props.type,this.glt);this.gl.hint(GLenum.GENERATE_MIPMAP_HINT,type);this.gl.generateMipmap(this.props.type);return this}destroy(){this.gl.deleteTexture(this.glt);this.gl.deleteRenderbuffer(this.glrb);this.glt=this.glrb=null}}
//# sourceMappingURL=texture.js.map