{"version":3,"sources":["../../../src/js/gl2/texture.ts"],"names":["glTexInternalFormat","glTexFormat","glTexType","isDepthStencil","is3DTexture","FilterMode","GLenum","MinFilterMode","MipmapHint","PixelFormat","TexType","AddressMode","GLTexture","constructor","context","props","sampler","webgl2","glt","glrb","gl","type","Tex2D","format","RGBA8","isCube","Cube","renderTarget","glInternalFormat","width","height","depth","mipLevels","samples","wrapU","Clamp","wrapV","wrapW","magFilter","Nearest","minFilter","maxLOD","minLOD","maxAniso","bindRenderbuffer","RENDERBUFFER","createRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","activeTexture","TEXTURE0","bindTexture","createTexture","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","texParameterf","TEXTURE_MAX_LOD","TEXTURE_MIN_LOD","TEXTURE_MAX_ANISOTROPY_EXT","Math","min","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","texStorage3D","texStorage2D","glFormat","glType","baseTarget","TEXTURE_CUBE_MAP_POSITIVE_X","targetCount","i","level","texImage2D","data","x","y","z","mipLevel","isTexArray","Array","images","length","buffer","image","texSubImage3D","texSubImage2D","mipmap","None","hint","GENERATE_MIPMAP_HINT","generateMipmap","destroy","deleteTexture","deleteRenderbuffer"],"mappings":"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","sourcesContent":["import {\r\n  glTexInternalFormat, glTexFormat, glTexType, isDepthStencil, is3DTexture, FilterMode, Float, GLenum,\r\n  MinFilterMode, MipmapHint, PixelFormat, SamplerProperties, ReadonlyExtent3D, ReadonlyOrigin3D, SamplerDescriptor,\r\n  TextureData, TextureDescriptor, TexType, TextureProperties, Uint\r\n} from '../../common';\r\nimport { AddressMode, GLRenderingDevice, GLTexture as IGLTexture, ImageSource, ReadonlyExtent2D, ReadonlyOrigin2D } from '../device';\r\n\r\nexport class GLTexture implements IGLTexture {\r\n  public readonly props: TextureProperties;\r\n  public readonly sampler: SamplerProperties;\r\n  public glt: WebGLTexture | null = null;\r\n  public glrb: WebGLRenderbuffer | null = null;\r\n\r\n  private readonly gl: WebGLRenderingContext;\r\n\r\n  public constructor(\r\n    context: GLRenderingDevice, \r\n    props: TextureDescriptor = {},\r\n    sampler: SamplerDescriptor = {},\r\n    private readonly webgl2: boolean = false\r\n  ) {\r\n    const gl = this.gl = context.gl;\r\n    const type = props.type || TexType.Tex2D;\r\n    const format = props.format || PixelFormat.RGBA8;\r\n    const isCube = type === TexType.Cube;\r\n    const renderTarget = isDepthStencil(format) && (props.renderTarget || false);\r\n    const glInternalFormat = glTexInternalFormat(format, webgl2);\r\n\r\n    this.props = {\r\n      type,\r\n      format,\r\n      width: props.width || 1,\r\n      height: props.height || 1,\r\n      depth: isCube ? 6 : (props.depth || 1),\r\n      mipLevels: props.mipLevels || 1,\r\n      samples: webgl2 ? (props.samples || 1) : 1,\r\n      renderTarget\r\n    };\r\n    this.sampler = {\r\n      wrapU: sampler.wrapU || AddressMode.Clamp,\r\n      wrapV: sampler.wrapV || AddressMode.Clamp,\r\n      wrapW: sampler.wrapW || AddressMode.Clamp,\r\n      magFilter: sampler.magFilter || FilterMode.Nearest,\r\n      minFilter: sampler.minFilter || MinFilterMode.Nearest,\r\n      maxLOD: sampler.maxLOD ?? 1000,\r\n      minLOD: sampler.minLOD ?? -1000,\r\n      maxAniso: sampler.maxAniso || 1\r\n    }; \r\n\r\n    if (renderTarget || this.props.samples > 1) { // Depth-stencil / MSAA renderbuffer\r\n      // WebGL does not have multisample texture, so renderbuffer is needed to resolve MSAA\r\n      gl.bindRenderbuffer(GLenum.RENDERBUFFER, (this.glrb = gl.createRenderbuffer()));\r\n      if (this.props.samples > 1) {\r\n        (gl as WebGL2RenderingContext).renderbufferStorageMultisample(GLenum.RENDERBUFFER, this.props.samples,\r\n          glInternalFormat, this.props.width, this.props.height);\r\n      } else {\r\n        gl.renderbufferStorage(GLenum.RENDERBUFFER, glInternalFormat, this.props.width, this.props.height);\r\n      }\r\n    }\r\n    \r\n    if (!renderTarget) { // Normal texture\r\n      gl.activeTexture(GLenum.TEXTURE0);\r\n      gl.bindTexture(type, this.glt = gl.createTexture());\r\n      gl.texParameteri(type, GLenum.TEXTURE_MIN_FILTER, this.sampler.minFilter);\r\n      gl.texParameteri(type, GLenum.TEXTURE_MAG_FILTER, this.sampler.magFilter);\r\n      gl.texParameteri(type, GLenum.TEXTURE_WRAP_S, this.sampler.wrapU);\r\n      gl.texParameteri(type, GLenum.TEXTURE_WRAP_T, this.sampler.wrapV);\r\n      if (webgl2) {\r\n        gl.texParameteri(type, GLenum.TEXTURE_WRAP_R, this.sampler.wrapW);\r\n        gl.texParameterf(type, GLenum.TEXTURE_MAX_LOD, this.sampler.maxLOD);\r\n        gl.texParameterf(type, GLenum.TEXTURE_MIN_LOD, this.sampler.minLOD);\r\n      }\r\n      if (this.sampler.maxAniso > 1) {\r\n        gl.texParameterf(\r\n          type,\r\n          GLenum.TEXTURE_MAX_ANISOTROPY_EXT,\r\n          Math.min(this.sampler.maxAniso, gl.getParameter(GLenum.MAX_TEXTURE_MAX_ANISOTROPY_EXT)) as Float\r\n        );\r\n      }\r\n\r\n      if (webgl2) {\r\n        if (is3DTexture(type)) {\r\n          (gl as WebGL2RenderingContext).texStorage3D(type, this.props.mipLevels, glInternalFormat, this.props.width, this.props.height,\r\n            this.props.depth);\r\n        } else {\r\n          (gl as WebGL2RenderingContext).texStorage2D(type, this.props.mipLevels, glInternalFormat, this.props.width, this.props.height);\r\n        }\r\n      } else {\r\n        const glFormat = glTexFormat(format);  \r\n        const glType = glTexType(format, this.webgl2);\r\n        const baseTarget = isCube ? GLenum.TEXTURE_CUBE_MAP_POSITIVE_X : type;\r\n        const targetCount = isCube ? 6 : 1;\r\n        for (let i = 0; i < targetCount; ++i) {\r\n          for (let level = 0; level < this.props.mipLevels; ++level) {\r\n            gl.texImage2D(baseTarget + i, level, glInternalFormat,\r\n              (this.props.width >> level) || 1, (this.props.height >> level) || 1, 0,\r\n              glFormat, glType, null);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public data(\r\n    data: TextureData,\r\n    [x, y, z = 0]: ReadonlyOrigin2D | ReadonlyOrigin3D = [0, 0],\r\n    [\r\n      width,\r\n      height,\r\n      depth = (this.props.depth as Float) - z\r\n    ]: ReadonlyExtent2D | ReadonlyExtent3D = [\r\n      (this.props.width as Float) - x,\r\n      (this.props.height as Float) - y\r\n    ],\r\n    mipLevel: Uint = 0\r\n  ): GLTexture {\r\n    const glFormat = glTexFormat(this.props.format);\r\n    const glType = glTexType(this.props.format, this.webgl2);\r\n    const isCube = this.props.type === TexType.Cube;\r\n    const isTexArray = this.props.type === TexType.Array;\r\n    const baseTarget = isCube ? GLenum.TEXTURE_CUBE_MAP_POSITIVE_X + z : this.props.type;\r\n\r\n    this.gl.activeTexture(GLenum.TEXTURE0);\r\n    this.gl.bindTexture(this.props.type, this.glt);\r\n\r\n    const targetCount = ((isCube || isTexArray) && data.images?.length) || 1;\r\n    const buffer: ArrayBufferView | null = data.buffer || null;\r\n    let image: ImageSource | null = data.image || null;\r\n\r\n    for (let i = 0; i < targetCount; ++i) {\r\n      image = data.images?.[i] || image;\r\n      if (is3DTexture(this.props.type)) {\r\n        (this.gl as WebGL2RenderingContext).texSubImage3D(baseTarget, mipLevel, x, y, z + i * depth, width, height, depth,\r\n          glFormat, glType, (image || buffer) as ArrayBufferView | null);\r\n      } else {\r\n        if (buffer || (this.webgl2 && image)) {\r\n          this.gl.texSubImage2D(baseTarget + i, mipLevel, x, y, width, height, glFormat, glType,\r\n            (image || buffer) as ArrayBufferView | null);\r\n        } else if (image) {\r\n          this.gl.texSubImage2D(baseTarget + i, mipLevel, x, y, glFormat, glType, image);\r\n        }\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public mipmap(type: MipmapHint = MipmapHint.None): GLTexture {\r\n    this.gl.activeTexture(GLenum.TEXTURE0);\r\n    this.gl.bindTexture(this.props.type, this.glt);\r\n    this.gl.hint(GLenum.GENERATE_MIPMAP_HINT, type);\r\n    this.gl.generateMipmap(this.props.type);\r\n    return this;\r\n  }\r\n\r\n  public destroy(): void {\r\n    this.gl.deleteTexture(this.glt);\r\n    this.gl.deleteRenderbuffer(this.glrb);\r\n    this.glt = this.glrb = null;\r\n  }\r\n}\r\n"],"file":"texture.js"}