{"version":3,"sources":["../../../src/js/gl2/shader.ts"],"names":["MUGL_DEBUG","GLenum","GLShader","constructor","context","props","gl","shader","gls","createShader","type","shaderSource","source","compileShader","console","assert","getShaderParameter","COMPILE_STATUS","isContextLost","getShaderInfoLog","destroy","deleteShader","createProgram","vert","frag","buffers","program","attachShader","i","length","attrs","j","bindAttribLocation","shaderLoc","name","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog"],"mappings":"OAASA,U,qCACAC,M,6BAGT,MAAO,MAAMC,CAAAA,QAA8B,CAOlCC,WAAW,CAACC,OAAD,CAA6BC,KAA7B,CAAsD,CACtE,KAAMC,CAAAA,EAAE,CAAG,KAAKA,EAAL,CAAUF,OAAO,CAACE,EAA7B,CAEA,KAAMC,CAAAA,MAAM,CAAG,KAAKC,GAAL,CAAWF,EAAE,CAACG,YAAH,CAAgB,KAAKC,IAAL,CAAYL,KAAK,CAACK,IAAlC,CAA1B,CACAJ,EAAE,CAACK,YAAH,CAAgBJ,MAAhB,CAAwB,KAAKK,MAAL,CAAcP,KAAK,CAACO,MAA5C,EACAN,EAAE,CAACO,aAAH,CAAiBN,MAAjB,EAEA,GAAIP,UAAJ,CAAgB,CACdc,OAAO,CAACC,MAAR,CACET,EAAE,CAACU,kBAAH,CAAsBT,MAAtB,CAA8BN,MAAM,CAACgB,cAArC,GAAwDX,EAAE,CAACY,aAAH,EAD1D,CAEG,6BAA4BZ,EAAE,CAACa,gBAAH,CAAoBZ,MAApB,CAA4B,EAF3D,CAID,CAEF,CAEMa,OAAO,EAAS,CACrB,KAAKd,EAAL,CAAQe,YAAR,CAAqB,KAAKb,GAA1B,EACA,KAAKA,GAAL,CAAW,IACZ,CA1BwC,CA6B3C,MAAO,SAASc,CAAAA,aAAT,CACLhB,EADK,CACsBiB,IADtB,CACsCC,IADtC,CAELC,OAFK,CAGS,CAEd,KAAMC,CAAAA,OAAO,CAAGpB,EAAE,CAACgB,aAAH,EAAhB,CACAhB,EAAE,CAACqB,YAAH,CAAgBD,OAAhB,CAAyBH,IAAI,CAACf,GAA9B,EACAF,EAAE,CAACqB,YAAH,CAAgBD,OAAhB,CAAyBF,IAAI,CAAChB,GAA9B,EAIA,IAAK,GAAIoB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,OAAO,CAACI,MAA5B,CAAoC,EAAED,CAAtC,CAAyC,CACvC,KAAME,CAAAA,KAAK,CAAGL,OAAO,CAACG,CAAD,CAAP,CAAWE,KAAzB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,KAAK,CAACD,MAA1B,CAAkC,EAAEE,CAApC,CAAuC,CACrCzB,EAAE,CAAC0B,kBAAH,CAAsBN,OAAtB,CAA+BI,KAAK,CAACC,CAAD,CAAL,CAASE,SAAT,EAAsB,CAArD,CAAwDH,KAAK,CAACC,CAAD,CAAL,CAASG,IAAjE,CACD,CACF,CAGD5B,EAAE,CAAC6B,WAAH,CAAeT,OAAf,EAEA,GAAI1B,UAAJ,CAAgB,CACdc,OAAO,CAACC,MAAR,CACET,EAAE,CAAC8B,mBAAH,CAAuBV,OAAvB,CAAgCzB,MAAM,CAACoC,WAAvC,GAAuD/B,EAAE,CAACY,aAAH,EADzD,CAEG,2BAA0BZ,EAAE,CAACgC,iBAAH,CAAqBZ,OAArB,CAA8B,EAF3D,CAID,CAED,MAAOA,CAAAA,OACR","sourcesContent":["import { MUGL_DEBUG } from '../../common/config';\r\nimport { GLenum, ShaderDescriptor, ShaderType, VertexBufferLayout } from '../../common';\r\nimport { GLRenderingDevice, GLShader as IGLShader } from '../device';\r\n\r\nexport class GLShader implements IGLShader {\r\n  public readonly type: ShaderType;\r\n  public readonly source: string;\r\n  public gls: WebGLShader | null;\r\n\r\n  private readonly gl: WebGLRenderingContext;\r\n\r\n  public constructor(context: GLRenderingDevice, props: ShaderDescriptor) {\r\n    const gl = this.gl = context.gl;\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const shader = this.gls = gl.createShader(this.type = props.type)!;\r\n    gl.shaderSource(shader, this.source = props.source);\r\n    gl.compileShader(shader);\r\n\r\n    if (MUGL_DEBUG) {\r\n      console.assert(\r\n        gl.getShaderParameter(shader, GLenum.COMPILE_STATUS) || gl.isContextLost(),\r\n        `Failed to compile shader: ${gl.getShaderInfoLog(shader)}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  public destroy(): void {\r\n    this.gl.deleteShader(this.gls);\r\n    this.gls = null;\r\n  }\r\n}\r\n\r\nexport function createProgram(\r\n  gl: WebGLRenderingContext, vert: GLShader, frag: GLShader,\r\n  buffers: VertexBufferLayout[]\r\n): WebGLProgram {\r\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n  const program = gl.createProgram()!;\r\n  gl.attachShader(program, vert.gls!);\r\n  gl.attachShader(program, frag.gls!);\r\n  /* eslint-enable */\r\n\r\n  // Bind attribute locations\r\n  for (let i = 0; i < buffers.length; ++i) {\r\n    const attrs = buffers[i].attrs;\r\n    for (let j = 0; j < attrs.length; ++j) {\r\n      gl.bindAttribLocation(program, attrs[j].shaderLoc || 0, attrs[j].name);\r\n    }\r\n  }\r\n\r\n  // Link program then free up shaders\r\n  gl.linkProgram(program);\r\n\r\n  if (MUGL_DEBUG) {\r\n    console.assert(\r\n      gl.getProgramParameter(program, GLenum.LINK_STATUS) || gl.isContextLost(),\r\n      `Failed to link program: ${gl.getProgramInfoLog(program)}`\r\n    );\r\n  }\r\n\r\n  return program;\r\n}\r\n"],"file":"shader.js"}