import{MUGL_DEBUG}from"../../common/config.js";import{GLenum,hasStencil,isDepthStencil,is3DTexture}from"../../common/index.js";import{GL1Feature}from"../device/index.js";export class GLRenderPass{constructor(context,props={}){var _props$color,_props$clearDepth,_props$clearStencil;this.glfb=null;this.glrfb=[];const gl=this.gl=context.gl;const drawBuffersExt=context.feature(GL1Feature.DrawBuffers);const color=((_props$color=props.color)===null||_props$color===void 0?void 0:_props$color.map(initTextureView))||[];const depth=initTextureView(props.depth);const withStencil=depth&&hasStencil(depth.tex.props.format)||false;this.props={color,depth,clearColor:props.clearColor||null,clearDepth:(_props$clearDepth=props.clearDepth)!==null&&_props$clearDepth!==void 0?_props$clearDepth:NaN,clearStencil:(_props$clearStencil=props.clearStencil)!==null&&_props$clearStencil!==void 0?_props$clearStencil:NaN};if(color.length){this.glfb=gl.createFramebuffer();gl.bindFramebuffer(GLenum.FRAMEBUFFER,this.glfb);const maxAtt=drawBuffersExt||context.webgl2?color.length:1;for(let i=0;i<maxAtt;++i){if(context.webgl2&&color[i].tex.props.samples>1){gl.framebufferRenderbuffer(GLenum.FRAMEBUFFER,GLenum.COLOR_ATTACHMENT0+i,GLenum.RENDERBUFFER,color[i].tex.glrb)}else{framebufferTexture(gl,GLenum.COLOR_ATTACHMENT0+i,color[i])}}if(maxAtt>1){if(context.webgl2){gl.drawBuffers(color.map((_,i)=>GLenum.COLOR_ATTACHMENT0+i))}else if(drawBuffersExt){drawBuffersExt.drawBuffersWEBGL(color.map((_,i)=>GLenum.COLOR_ATTACHMENT0+i))}}if(depth){if(depth.tex.props.renderTarget||context.webgl2&&depth.tex.props.samples>1){gl.framebufferRenderbuffer(GLenum.FRAMEBUFFER,withStencil?GLenum.DEPTH_STENCIL_ATTACHMENT:GLenum.DEPTH_ATTACHMENT,GLenum.RENDERBUFFER,depth.tex.glrb)}else if(isDepthStencil(depth.tex.props.format)){framebufferTexture(gl,withStencil?GLenum.DEPTH_STENCIL_ATTACHMENT:GLenum.DEPTH_ATTACHMENT,depth)}else{if(MUGL_DEBUG){console.error("Invalid depth texture format",depth.tex)}}}if(MUGL_DEBUG){console.assert(gl.checkFramebufferStatus(GLenum.FRAMEBUFFER)===GLenum.FRAMEBUFFER_COMPLETE||gl.isContextLost(),"Framebuffer completeness check failed")}if(context.webgl2){for(let i=0;i<maxAtt;++i){this.glrfb.push(color[i].tex.props.samples>1?createResolveFrameBuffer(gl,GLenum.COLOR_ATTACHMENT0,color[i]):null)}this.glrfb.push(depth&&depth.tex.props.samples>1?createResolveFrameBuffer(gl,withStencil?GLenum.DEPTH_STENCIL_ATTACHMENT:GLenum.DEPTH_ATTACHMENT,depth):null)}}}destroy(){this.gl.deleteFramebuffer(this.glfb);this.glfb=null;for(const glrfb of this.glrfb){this.gl.deleteFramebuffer(glrfb)}this.glrfb=[]}resolve(){for(let i=0;i<this.glrfb.length-1;++i){if(this.glrfb[i]){blitFramebuffer(this.gl,this.glfb,this.glrfb[i],this.props.color[i].tex,GLenum.COLOR_BUFFER_BIT,GLenum.COLOR_ATTACHMENT0+i)}}const depthFb=this.glrfb[this.glrfb.length-1];if(this.props.depth&&depthFb){blitFramebuffer(this.gl,this.glfb,depthFb,this.props.depth.tex,GLenum.DEPTH_BUFFER_BIT|GLenum.STENCIL_BUFFER_BIT)}}}function framebufferTexture(gl,attachment,{tex,slice,mipLevel}){if(is3DTexture(tex.props.type)){gl.framebufferTextureLayer(GLenum.FRAMEBUFFER,attachment,tex.glt,mipLevel,slice)}else{const texTarget=tex.props.type===GLenum.TEXTURE_CUBE_MAP?GLenum.TEXTURE_CUBE_MAP_POSITIVE_X+slice:tex.props.type;gl.framebufferTexture2D(GLenum.FRAMEBUFFER,attachment,texTarget,tex.glt,mipLevel)}}function createResolveFrameBuffer(gl,attachment,view){const fb=gl.createFramebuffer();gl.bindFramebuffer(GLenum.FRAMEBUFFER,fb);framebufferTexture(gl,attachment,view);if(MUGL_DEBUG){console.assert(gl.checkFramebufferStatus(GLenum.FRAMEBUFFER)===GLenum.FRAMEBUFFER_COMPLETE||gl.isContextLost(),"Framebuffer completeness check failed for MSAA resolve buffer")}return fb}function blitFramebuffer(gl2,from,to,tex,mask,attachment=-1){gl2.bindFramebuffer(GLenum.READ_FRAMEBUFFER,from);gl2.bindFramebuffer(GLenum.DRAW_FRAMEBUFFER,to);if(attachment>=0){gl2.readBuffer(attachment)}gl2.blitFramebuffer(0,0,tex.props.width,tex.props.height,0,0,tex.props.width,tex.props.height,mask,GLenum.NEAREST)}function initTextureView(view){if(view){return{slice:0,mipLevel:0,...view}}return null}
//# sourceMappingURL=renderpass.js.map