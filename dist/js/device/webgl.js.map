{"version":3,"sources":["../../../src/js/device/webgl.ts"],"names":["GLCommonFeatures","Aniso","TexFP16Lin","TexFPLin","GL1Feature","DFfx","Instancing","UintIndex","BlendMinMax","DrawBuffers","DepthTex","TexFP16","TexFP","GL2Feature","BufFP"],"mappings":"AA2BA,KAAMA,CAAAA,gBAAgB,CAAG,CACvBC,KAAK,CAAE,gCADgB,CAEvBC,UAAU,CAAE,+BAFW,CAGvBC,QAAQ,CAAE,0BAHa,CAAzB,CASA,MAAO,MAAMC,CAAAA,UAAU,CAAG,CACxBC,IAAI,CAAE,0BADkB,CAExBC,UAAU,CAAE,wBAFY,CAGxBC,SAAS,CAAE,wBAHa,CAIxBC,WAAW,CAAE,kBAJW,CAKxBC,WAAW,CAAE,oBALW,CAMxBC,QAAQ,CAAE,qBANc,CAOxBC,OAAO,CAAE,wBAPe,CAQxBC,KAAK,CAAE,mBARiB,CASxB,GAAGZ,gBATqB,CAAnB,CAoBP,MAAO,MAAMa,CAAAA,UAAU,CAAG,CACxBC,KAAK,CAAE,wBADiB,CASxB,GAAGd,gBATqB,CAAnB","sourcesContent":["import { ValueOf } from 'ts-essentials';\r\nimport {\r\n  BufferDescriptor, TextureDescriptor, SamplerDescriptor, PipelineDescriptor, RenderPassDescriptor, Shader, ShaderDescriptor\r\n} from '../../common/device';\r\nimport { RenderingDevice, RenderPassContext } from '../../common/device';\r\nimport { Buffer, Pipeline, RenderPass, Texture } from '../../common/device';\r\n\r\n/**\r\n * Interface for a provider of WebGLRenderingContext provider.\r\n * Useful for non-Web environments where HTML Canvas element does not exist.\r\n */\r\nexport interface WebGLRenderingContextProvider {\r\n  /**\r\n   * Get a WebGLRenderingContext.\r\n   *\r\n   * @param type WebGL version. Use 'webgl2' for WebGL 2.0, or 'webgl' for WebGL 1.0\r\n   * @param options optional WebGL rendering context attributes\r\n   * @returns a WebGLRenderingContext or WebGL2RenderingContext depending on requested type, or null if unsupported.\r\n   */\r\n  getContext(type: 'webgl' | 'webgl2', options?: WebGLContextAttributes): WebGLRenderingContext | null;\r\n}\r\n\r\n/**\r\n * A canvas element from which a WebGLRenderingContext can be retrieved.\r\n */\r\nexport type Canvas = HTMLCanvasElement | WebGLRenderingContextProvider;\r\n\r\nconst GLCommonFeatures = {\r\n  Aniso: 'EXT_texture_filter_anisotropic',\r\n  TexFP16Lin: 'OES_texture_half_float_linear',\r\n  TexFPLin: 'OES_texture_float_linear'\r\n};\r\n\r\n/**\r\n * WebGL1 feature used by mugl.\r\n */\r\nexport const GL1Feature = {\r\n  DFfx: 'OES_standard_derivatives',\r\n  Instancing: 'ANGLE_instanced_arrays',\r\n  UintIndex: 'OES_element_index_uint',\r\n  BlendMinMax: 'EXT_blend_minmax',\r\n  DrawBuffers: 'WEBGL_draw_buffers',\r\n  DepthTex: 'WEBGL_depth_texture',\r\n  TexFP16: 'OES_texture_half_float',\r\n  TexFP: 'OES_texture_float',\r\n  ...GLCommonFeatures\r\n} as const;\r\n\r\n/**\r\n * WebGL1 features used by mugl.\r\n */\r\nexport type GL1Feature = ValueOf<typeof GL1Feature>;\r\n\r\n/**\r\n * WebGL2 features used by mugl.\r\n */\r\nexport const GL2Feature = {\r\n  BufFP: 'EXT_color_buffer_float',\r\n\r\n  // TODO: [Feature] Implement multiview\r\n  /*\r\n  Multiview: 'OVR_multiview2',\r\n  OculusMV: 'OCULUS_multiview',\r\n  */\r\n\r\n  ...GLCommonFeatures\r\n} as const;\r\n\r\n/**\r\n * WebGL2 features used by mugl.\r\n */\r\nexport type GL2Feature = ValueOf<typeof GL2Feature>;\r\n\r\n/**\r\n * A WebGL buffer resource.\r\n */\r\nexport interface GLBuffer extends Buffer {\r\n  /** The underlying WebGL buffer object. null if destroyed. */\r\n  readonly glb: WebGLBuffer | null;\r\n}\r\n\r\n/**\r\n * A WebGL texture resource.\r\n */\r\nexport interface GLTexture extends Texture {\r\n  /** The underlying WebGL texture object. null if destroyed. */\r\n  readonly glt: WebGLTexture | null;\r\n\r\n  /** The underlying WebGL renderbuffer for depth/stencil, if applicable. */\r\n  readonly glrb: WebGLRenderbuffer | null;\r\n}\r\n\r\n/**\r\n * WebGL render pass object.\r\n */\r\nexport interface GLRenderPass extends RenderPass {\r\n  /** The underlying WebGL framebuffer for offscreen pass. null if destroyed. */\r\n  readonly glfb: WebGLFramebuffer | null;\r\n\r\n  /** The underlying WebGL MSAA resolve framebuffers for offscreen pass. */\r\n  readonly glrfb: readonly (WebGLFramebuffer | null)[];\r\n}\r\n\r\n/**\r\n * WebGL shader object.\r\n */\r\nexport interface GLShader extends Shader {\r\n  /** The underlying WebGL shader object. null if destroyed. */\r\n  readonly gls: WebGLShader | null;\r\n}\r\n\r\n/**\r\n * WebGL render pipeline object.\r\n */\r\nexport interface GLPipeline extends Pipeline {\r\n  /** The underlying WebGL shader program object. null if destroyed. */\r\n  readonly glp: WebGLProgram | null;\r\n}\r\n\r\n/**\r\n * WebGL-based rendering device.\r\n * WebGL2 can optionally be used if available.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\r\n */\r\nexport interface GLRenderingDevice extends RenderingDevice {\r\n  /** The canvas */\r\n  readonly canvas: Canvas;\r\n\r\n  /** WebGL context */\r\n  readonly gl: WebGLRenderingContext;\r\n\r\n  /** Indicates if WebGL2 context is used */\r\n  readonly webgl2: boolean;\r\n\r\n  /**\r\n   * Creates a new buffer object.\r\n   * @param desc the buffer descriptor\r\n   * @returns new buffer object\r\n   */\r\n  buffer(desc: BufferDescriptor): GLBuffer;\r\n\r\n  /**\r\n   * Creates a new texture object.\r\n   * @param desc the texture descriptor\r\n   * @param sampler the sampler descriptor\r\n   * @returns new texture object\r\n   */\r\n  texture(desc: TextureDescriptor, sampler?: SamplerDescriptor): GLTexture;\r\n\r\n  /**\r\n   * Creates a new shader module object.\r\n   * @param desc the shader descriptor\r\n   * @returns new shader object\r\n   */\r\n  shader(desc: ShaderDescriptor): GLShader;\r\n\r\n  /**\r\n   * Creates a new Pipeline state object.\r\n   * @param desc the pipeline descriptor\r\n   * @returns new pipeline state object\r\n   */\r\n  pipeline(desc: PipelineDescriptor): GLPipeline;\r\n\r\n  /**\r\n   * Creates a new render pass object.\r\n   * @param desc the render pass descriptor.\r\n   * @returns new render pass\r\n   */\r\n  pass(desc?: RenderPassDescriptor): GLRenderPass;\r\n\r\n  /**\r\n   * Start a render pass.\r\n   * @param pass the render pass\r\n   * @returns the pass rendering context.\r\n   */\r\n  render(pass: GLRenderPass): RenderPassContext;\r\n\r\n  /**\r\n   * Query and enable a WebGL extension. \r\n   * @param feature WebGL extension name to enable.\r\n   * @returns the extension object, or null if not supported\r\n   */\r\n  feature<F>(feature: string): F;\r\n}\r\n\r\n/**\r\n * Options for creating a {@link GLRenderingDevice}.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\r\n */\r\nexport interface GLRenderingDeviceOptions extends WebGLContextAttributes {\r\n  /**\r\n   * Specify whether WebGL2 should be used if available. Defaults to false.\r\n   */\r\n  webgl2?: boolean;\r\n}\r\n\r\n/**\r\n * Factory of {@link WebGLRenderingDevice}.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\r\n */\r\nexport interface GLRenderingDeviceFactory {\r\n  /**\r\n   * Factory method to create a {@link GLRenderingDevice}.\r\n   * @param canvas the canvas to be used\r\n   * @param options context initialization options\r\n   * @returns Context instance, or null if WebGL is not supported\r\n   */\r\n  (canvas: Canvas, options?: GLRenderingDeviceOptions): GLRenderingDevice | null;\r\n}\r\n"],"file":"webgl.js"}