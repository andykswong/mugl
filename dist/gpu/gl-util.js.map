{"version":3,"sources":["../../js/gpu/gl-util.ts"],"names":["GLenum","VertexStepMode","is3DTexture","dimension","TEXTURE_3D","TEXTURE_2D_ARRAY","indexByteSize","format","UNSIGNED_SHORT","vertexByteSize","vertexSize","vertexType","FLOAT","HALF_FLOAT","SHORT","BYTE","UNSIGNED_BYTE","NONE","vertexNormalized","vertexBufferLayouts","buffers","shaderLocation","result","i","length","attributes","stride","j","push","offset","stepMode","instanced","Instance","Vertex","isDepthStencil","DEPTH_COMPONENT16","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","hasStencil","STENCIL_INDEX8","glTexelFormat","R8","R8_SNORM","R16F","R32F","RED","R8UI","R8I","R16UI","R16I","R32UI","R32I","RED_INTEGER","RG8","RG8_SNORM","RG16F","RG32F","RG","RG8UI","RG8I","RG16UI","RG16I","RG32UI","RG32I","RG_INTEGER","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB10_A2","RGBA16F","RGBA32F","RGBA","RGBA8UI","RGBA8I","RGBA16UI","RGBA32UI","RGBA16I","RGBA32I","RGBA_INTEGER","R11F_G11F_B10F","RGB","DEPTH_COMPONENT","DEPTH_STENCIL","glTexelSize","glTexelType","UNSIGNED_INT","INT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_24_8","FLOAT_32_UNSIGNED_INT_24_8_REV","glClearType"],"mappings":"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","sourcesContent":["import * as GLenum from './gl-const';\nimport { VertexAttribute, VertexBufferFormats, VertexBufferLayout } from './descriptor';\nimport { UInt } from './primitive';\nimport { IndexFormat, TextureDimension, TextureFormat, VertexFormat, VertexStepMode } from './type';\n\n/**\n * Checks if given texture type is a 3D or 2D array texture.\n * @internal\n * @param type texture type\n * @return whether the texture type is 3D\n */\nexport function is3DTexture(dimension: TextureDimension): boolean {\n  return dimension === GLenum.TEXTURE_3D || dimension === GLenum.TEXTURE_2D_ARRAY;\n}\n\n/**\n * Returns the byte size of a index format.\n * @internal\n * @param format index format\n * @returns byte size of the format\n */\nexport function indexByteSize(format: IndexFormat): UInt {\n  return format === GLenum.UNSIGNED_SHORT ? 2 : 4;\n}\n\n/**\n * Returns the byte size of a vertex format.\n * @internal\n * @param format vertex format\n * @returns byte size\n */\nexport function vertexByteSize(format: VertexFormat): UInt {\n  return ((format >> 4) & 0xF) * vertexSize(format);\n}\n\n/**\n * Returns the number of components of a vertex format.\n * @internal\n * @param format vertex format\n * @returns number of components\n */\n export function vertexSize(format: VertexFormat): UInt {\n  return format & 0xF;\n}\n\n/**\n * Returns the data type of a vertex format.\n * @internal\n * @param format vertex format\n * @returns GL data type\n */\nexport function vertexType(format: VertexFormat): UInt {\n  switch ((format >> 4) & 0x1FF) {\n    case 0x024:\n      return GLenum.FLOAT;\n    case 0x022:\n      return GLenum.HALF_FLOAT;\n    case 0x112:\n      return GLenum.SHORT;\n    case 0x111:\n      return GLenum.BYTE;\n    case 0x012:\n      return GLenum.UNSIGNED_SHORT;\n    case 0x011:\n      return GLenum.UNSIGNED_BYTE;\n  }\n\n  return GLenum.NONE;\n}\n\n/**\n * Returns if a vertex format is normalized.\n * @internal\n * @param format vertex format\n * @returns number of components\n */\nexport function vertexNormalized(format: VertexFormat): boolean {\n  return !!(format >> 13);\n}\n\n/**\n * Auto-calculates the offsets, strides, shaderLocation for given attribute formats.\n * @param buffers the buffer layouts\n * @return the calculated vertex buffer layout \n */\nexport function vertexBufferLayouts(buffers: VertexBufferFormats[]): VertexBufferLayout[] {\n  let shaderLocation = 0;\n  const result: VertexBufferLayout[] = [];\n  for (let i = 0; i < buffers.length; ++i) {\n    const attributes: VertexAttribute[] = [];\n    let stride = 0;\n    for (let j = 0; j < buffers[i].attributes.length; ++j) {\n      const format = buffers[i].attributes[j];\n      attributes.push({\n        format,\n        offset: stride,\n        shaderLocation,\n      });\n      stride += vertexByteSize(format);\n      ++shaderLocation;\n    }\n    result.push({\n      attributes,\n      stride,\n      stepMode: buffers[i].instanced ? VertexStepMode.Instance : VertexStepMode.Vertex,\n    });\n  }\n\n  return result;\n}\n\n/**\n * Checks if given texture format is a depth/stencil format.\n * @internal\n * @param format texture format\n * @returns whether the texture format is a depth/stencil format\n */\n export function isDepthStencil(format: TextureFormat): boolean {\n  switch (format) {\n    case GLenum.DEPTH_COMPONENT16:\n    case GLenum.DEPTH_COMPONENT24:\n    case GLenum.DEPTH24_STENCIL8:\n    case GLenum.DEPTH_COMPONENT32F:\n    case GLenum.DEPTH32F_STENCIL8:\n      return true;\n  }\n  return false;\n}\n\n/**\n * Checks if given texture format has stencil component.\n * @internal\n * @param format texture format\n * @returns whether the texture format has stencil component\n */\nexport function hasStencil(format: TextureFormat): boolean {\n  switch (format) {\n    case GLenum.STENCIL_INDEX8:\n    case GLenum.DEPTH24_STENCIL8:\n    case GLenum.DEPTH32F_STENCIL8:\n      return true;\n  }\n  return false;\n}\n\n/**\n * Gets the GL texel format from a texture format.\n * @internal\n * @param format texture format\n * @returns GL texel format\n */\n export function glTexelFormat(format: TextureFormat): UInt {\n  switch (format) {\n    case GLenum.R8:\n    case GLenum.R8_SNORM:\n    case GLenum.R16F:\n    case GLenum.R32F:\n      return GLenum.RED;\n    case GLenum.R8UI:\n    case GLenum.R8I:\n    case GLenum.R16UI:\n    case GLenum.R16I:\n    case GLenum.R32UI:\n    case GLenum.R32I:\n      return GLenum.RED_INTEGER;\n    case GLenum.RG8:\n    case GLenum.RG8_SNORM:\n    case GLenum.RG16F:\n    case GLenum.RG32F:\n      return GLenum.RG;\n    case GLenum.RG8UI:\n    case GLenum.RG8I:\n    case GLenum.RG16UI:\n    case GLenum.RG16I:\n    case GLenum.RG32UI:\n    case GLenum.RG32I:\n      return GLenum.RG_INTEGER;\n\n    case GLenum.RGBA8:\n    case GLenum.SRGB8_ALPHA8:\n    case GLenum.RGBA8_SNORM:\n    case GLenum.RGB10_A2:\n    case GLenum.RGBA16F:\n    case GLenum.RGBA32F:\n      return GLenum.RGBA;\n    case GLenum.RGBA8UI:\n    case GLenum.RGBA8I:\n    case GLenum.RGBA16UI:\n    case GLenum.RGBA32UI:\n    case GLenum.RGBA16I:\n    case GLenum.RGBA32I:\n      return GLenum.RGBA_INTEGER;\n\n    case GLenum.R11F_G11F_B10F:\n      return GLenum.RGB;\n\n    // Depth/stencil formats\n    case GLenum.DEPTH_COMPONENT16:\n    case GLenum.DEPTH_COMPONENT24:\n    case GLenum.DEPTH_COMPONENT32F:\n      return GLenum.DEPTH_COMPONENT;\n\n    case GLenum.DEPTH24_STENCIL8:\n    case GLenum.DEPTH32F_STENCIL8:\n      return GLenum.DEPTH_STENCIL;\n  }\n\n  return GLenum.NONE;\n}\n\n/**\n * Gets the GL texel byte size from a texture format.\n * @internal\n * @param format texture format\n * @returns GL texel byte size\n */\nexport function glTexelSize(format: TextureFormat): UInt {\n  switch (format) {\n    case GLenum.R8:\n    case GLenum.R8UI:\n    case GLenum.R8_SNORM:\n    case GLenum.R8I:\n      return 1;\n\n    case GLenum.R16UI:\n    case GLenum.R16I:\n    case GLenum.RG8:\n    case GLenum.RG8UI:\n    case GLenum.RG8_SNORM:\n    case GLenum.RG8I:\n    case GLenum.R16F:\n      return 2;\n\n    case GLenum.R32UI:\n    case GLenum.R32I:\n    case GLenum.R32F:\n    case GLenum.RG16UI:\n    case GLenum.RG16I:\n    case GLenum.RG16F:\n    case GLenum.RGBA8:\n    case GLenum.SRGB8_ALPHA8:\n    case GLenum.RGBA8UI:\n    case GLenum.RGBA8_SNORM:\n    case GLenum.RGBA8I:\n    case GLenum.RGB10_A2:\n    case GLenum.R11F_G11F_B10F:\n      return 4;\n\n    case GLenum.RG32UI:\n    case GLenum.RG32I:\n    case GLenum.RG32F:\n    case GLenum.RGBA16UI:\n    case GLenum.RGBA16I:\n    case GLenum.RGBA16F:\n      return 8;\n\n    case GLenum.RGBA32UI:\n    case GLenum.RGBA32I:\n    case GLenum.RGBA32F:\n      return 16;\n\n    case GLenum.DEPTH_COMPONENT16:\n      return 2;\n    case GLenum.DEPTH_COMPONENT24:\n    case GLenum.DEPTH24_STENCIL8:\n    case GLenum.DEPTH_COMPONENT32F:\n      return 4;\n    case GLenum.DEPTH32F_STENCIL8:\n      return 8;\n  }\n  return 0;\n}\n\n/**\n * Gets the GL texel type from a texture format.\n * @internal\n * @param format texture format\n * @returns GL texel size type\n */\nexport function glTexelType(format: TextureFormat): UInt {\n  switch (format) {\n    case GLenum.R8:\n    case GLenum.R8UI:\n    case GLenum.RG8:\n    case GLenum.RG8UI:\n    case GLenum.RGBA8:\n    case GLenum.SRGB8_ALPHA8:\n    case GLenum.RGBA8UI:\n      return GLenum.UNSIGNED_BYTE;\n\n    case GLenum.R8_SNORM:\n    case GLenum.R8I:\n    case GLenum.RG8_SNORM:\n    case GLenum.RG8I:\n    case GLenum.RGBA8_SNORM:\n    case GLenum.RGBA8I:\n      return GLenum.BYTE;\n\n    case GLenum.R16UI:\n    case GLenum.RG16UI:\n    case GLenum.RGBA16UI:\n      return GLenum.UNSIGNED_SHORT;\n\n    case GLenum.R16I:\n    case GLenum.RG16I:\n    case GLenum.RGBA16I:\n      return GLenum.SHORT;\n\n    case GLenum.R32UI:\n    case GLenum.RG32UI:\n    case GLenum.RGBA32UI:\n      return GLenum.UNSIGNED_INT;\n\n    case GLenum.R32I:\n    case GLenum.RG32I:\n    case GLenum.RGBA32I:\n      return GLenum.INT;\n\n    case GLenum.RGB10_A2:\n      return GLenum.UNSIGNED_INT_2_10_10_10_REV;\n\n    case GLenum.R16F:\n    case GLenum.RG16F:\n    case GLenum.RGBA16F:\n      return GLenum.HALF_FLOAT;\n\n    case GLenum.R32F:\n    case GLenum.RG32F:\n    case GLenum.RGBA32F:\n      return GLenum.FLOAT;\n\n    case GLenum.R11F_G11F_B10F:\n      return GLenum.UNSIGNED_INT_10F_11F_11F_REV;\n\n    // Depth/stencil formats\n    case GLenum.DEPTH_COMPONENT16:\n      return GLenum.UNSIGNED_SHORT;\n    case GLenum.DEPTH_COMPONENT24:\n      return GLenum.UNSIGNED_INT;\n    case GLenum.DEPTH24_STENCIL8:\n      return GLenum.UNSIGNED_INT_24_8;\n    case GLenum.DEPTH_COMPONENT32F:\n      return GLenum.FLOAT;\n    case GLenum.DEPTH32F_STENCIL8:\n      return GLenum.FLOAT_32_UNSIGNED_INT_24_8_REV;\n  }\n\n  return GLenum.NONE;\n}\n\n/**\n * Gets the data type required to clear a buffer of given texture format.\n * @internal\n * @param format texture format\n * @returns FLOAT / INT / UNSIGNED_INT\n */\nexport function glClearType(format: TextureFormat): UInt {\n  switch (format) {\n    case GLenum.R8I:\n    case GLenum.R16I:\n    case GLenum.R32I:\n    case GLenum.RG8I:\n    case GLenum.RG16I:\n    case GLenum.RG32I:\n    case GLenum.RGBA8I:\n    case GLenum.RGBA16I:\n    case GLenum.RGBA32I:\n      return GLenum.INT;\n\n    case GLenum.R8UI:\n    case GLenum.R16UI:\n    case GLenum.R32UI:\n    case GLenum.RG8UI:\n    case GLenum.RG16UI:\n    case GLenum.RG32UI:\n    case GLenum.RGBA8UI:\n    case GLenum.RGBA16UI:\n    case GLenum.RGBA32UI:\n      return GLenum.UNSIGNED_INT;\n\n    /*\n    case GLenum.R8:\n    case GLenum.R8_SNORM:\n    case GLenum.R16F:\n    case GLenum.R32F:\n    case GLenum.RG8:\n    case GLenum.RG8_SNORM:\n    case GLenum.RG16F:\n    case GLenum.RG32F:\n    case GLenum.RGBA8:\n    case GLenum.SRGB8_ALPHA8:\n    case GLenum.RGBA8_SNORM:\n    case GLenum.RGB10_A2:\n    case GLenum.RGBA16F:\n    case GLenum.RGBA32F:\n    case GLenum.R11F_G11F_B10F:\n      return GLenum.FLOAT;\n    */\n  }\n\n  return GLenum.FLOAT;\n}\n"],"file":"gl-util.js"}