{"version":3,"file":"model.js","names":[],"sources":["../../../js/gpu/gl2/model.ts"],"sourcesContent":["import { BindGroupEntry, BindGroupLayoutEntry, VertexBufferLayout } from '../descriptor';\nimport { Color, Float, UInt } from '../primitive';\nimport {\n  BindGroup, BindGroupLayout, Buffer, Device, RenderPass, RenderPipeline, Sampler, Shader, Texture\n} from '../resource';\nimport { BindingType } from '../type';\nimport { Canvas, WebGL2Feature } from './type';\n\n//#region Model Types\n\nexport interface WebGL2Device extends Device {\n  readonly canvas: Canvas;\n  readonly gl: WebGL2RenderingContext;\n  readonly features: WebGL2Feature;\n  readonly extDrawBuffersi: OES_draw_buffers_indexed | null;\n\n  pass: WebGL2RenderPass | null;\n  state: WebGL2State;\n}\n\nexport interface WebGL2Buffer extends Buffer {\n  readonly gl: WebGL2RenderingContext;\n  readonly glb: WebGLBuffer | null;\n  readonly type: UInt;\n  readonly size: UInt;\n}\n\nexport interface WebGL2Texture extends Texture {\n  readonly gl: WebGL2RenderingContext;\n  readonly glt: WebGLTexture | null;\n  readonly glrb: WebGLRenderbuffer | null;\n  readonly type: UInt;\n  readonly width: UInt;\n  readonly height: UInt;\n  readonly depth: UInt;\n  readonly format: UInt;\n  readonly samples: UInt;\n}\n\nexport interface WebGL2Sampler extends Sampler {\n  readonly gl: WebGL2RenderingContext;\n  readonly gls: WebGLSampler | null;\n}\n\nexport interface WebGL2Shader extends Shader {\n  readonly gl: WebGL2RenderingContext;\n  readonly gls: WebGLShader | null;\n}\n\nexport interface WebGL2RenderPass extends RenderPass {\n  readonly gl: WebGL2RenderingContext;\n  readonly glfb: WebGLFramebuffer | null;\n  readonly glrfb: (WebGLFramebuffer | null)[];\n  readonly color: WebGL2Texture[];\n  readonly clearColors: (Color | null | undefined)[];\n  readonly clearColor?: Color | null;\n  readonly clearDepth?: Float;\n  readonly clearStencil?: Float;\n  readonly depth: WebGL2Texture | null;\n}\n\nexport interface WebGL2BindGroupLayout extends BindGroupLayout {\n  readonly entries: (BindGroupLayoutEntry & { binding: UInt })[];\n}\n\nexport interface WebGL2BindGroup extends BindGroup {\n  readonly entries: (BindGroupEntry & { binding: UInt })[];\n}\n\nexport interface WebGL2RenderPipeline extends RenderPipeline {\n  readonly gl: WebGL2RenderingContext;\n  readonly glp: WebGLProgram | null;\n  readonly cache: UniformCache[][];\n  readonly buffers: VertexBufferLayout[];\n  readonly state: WebGL2PipelineState;\n}\n\n//#endregion Model Types\n\n//#region State Types\n\nexport interface WebGL2State {\n  copyFrameBuffer: WebGLFramebuffer | null,\n  buffers: WebGL2BufferAttributes[],\n  state: WebGL2PipelineState;\n  pipeline: WebGL2RenderPipeline | null;\n  index: WebGLBuffer | null;\n  stencilRef: UInt;\n  scissor: boolean;\n}\n\nexport interface WebGL2Attribute {\n  buffer: UInt;\n  ptr: [\n    loc: UInt,\n    size: UInt,\n    type: UInt,\n    normalized: boolean,\n    stride: UInt,\n    offset: UInt\n  ];\n  step: UInt;\n}\n\nexport interface WebGL2BufferAttributes {\n  glb: WebGLBuffer | null;\n  attributes: WebGL2Attribute[];\n  stride: UInt;\n  step: UInt;\n  offset: UInt;\n  instanceOffset: UInt;\n}\n\nexport interface WebGL2PipelineState extends WebGL2PipelineBlendState {\n  topology: UInt;\n  indexFormat: UInt;\n  frontFace: UInt;\n  cullMode: UInt;\n\n  sampleCount: UInt;\n  alphaToCoverage: boolean;\n\n  depth: boolean;\n  depthWrite: boolean;\n  depthFormat: UInt;\n  depthCompare: UInt;\n  depthBias: Float;\n  depthBiasSlopeScale: Float;\n\n  stencil: boolean;\n  stencilFrontCompare: UInt;\n  stencilFrontFailOp: UInt;\n  stencilFrontDepthFailOp: UInt;\n  stencilFrontPassOp: UInt;\n  stencilBackCompare: UInt;\n  stencilBackFailOp: UInt;\n  stencilBackDepthFailOp: UInt;\n  stencilBackPassOp: UInt;\n  stencilReadMask: UInt;\n  stencilWriteMask: UInt;\n\n  blend: boolean;\n  drawBuffers: WebGL2PipelineBlendState[];\n}\n\nexport interface WebGL2PipelineBlendState {\n  blendWriteMask: UInt;\n  blendColorOp: UInt;\n  blendColorSrcFactor: UInt;\n  blendColorDstFactor: UInt;\n  blendAlphaOp: UInt;\n  blendAlphaSrcFactor: UInt;\n  blendAlphaDstFactor: UInt;\n}\n\n/** An entry of uniform info cache */\nexport interface UniformCache {\n  /** Bind group entry name. */\n  label: string;\n  /** Binding location. */\n  binding: UInt;\n  /** The type of binding. */\n  type: BindingType;\n  /** Uniform location. */\n  loc: WebGLUniformLocation | null\n  /** Uniform block index. */\n  index: GLuint;\n  /** Uniform buffer / Texture bind slot ID. */\n  slot: number;\n  /** Dynamic offset uniform buffer. */\n  bufferDynamicOffset?: boolean;\n}\n\n//#endregion State Types\n"],"mappings":""}