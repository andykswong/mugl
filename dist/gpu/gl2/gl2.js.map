{"version":3,"file":"gl2.js","names":["MUGL_DEBUG","MUGL_FINALIZER","GLenum","FutureStatus","BindingType","BufferUsage","ColorWrite","ShaderStage","TextureUsage","glClearType","glTexelFormat","glTexelSize","glTexelType","hasStencil","indexByteSize","is3DTexture","isDepthStencil","vertexSize","vertexType","vertexNormalized","WebGL2Feature","WebGL2FeatureNames","initWebGL2State","framebufferTexture","createResolveFrameBuffer","compileShaderProgram","createPipelineState","getBufferSubData","blitFramebuffer","applyPipelineState","vertexAttribs","glToggle","isDeviceLost","applyColorMask","applyDepthMask","applyStencilMask","BYTE_MASK","gpuFinalizer","FinalizationRegistry","finalizer","gl","requestWebGL2Device","canvas","options","features","getContext","enabledFeatures","feature","getExtension","extDrawBuffersi","DrawBuffersIndexed","state","deleteFramebuffer","copyFrameBuffer","device","pass","destroy","register","resetDevice","Object","assign","getDeviceFeatures","createBuffer","desc","type","usage","Uniform","UNIFORM_BUFFER","Index","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","Stream","STREAM_DRAW","Dynamic","DYNAMIC_DRAW","STATIC_DRAW","glb","bindBuffer","bufferData","size","deleteBuffer","buffer","createTexture","samples","sampleCount","dimension","TEXTURE_2D","format","RGBA8","needTexture","TextureBinding","width","height","_depth","depth","TEXTURE_CUBE_MAP","glt","glrb","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","renderbufferStorage","activeTexture","TEXTURE0","bindTexture","texStorage3D","mipLevelCount","texStorage2D","deleteTexture","deleteRenderbuffer","texture","createSampler","gls","minFilter","NEAREST","mipmapFilter","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","samplerParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","magFilter","TEXTURE_WRAP_S","addressModeU","CLAMP_TO_EDGE","TEXTURE_WRAP_T","addressModeV","TEXTURE_WRAP_R","addressModeW","samplerParameterf","TEXTURE_MAX_LOD","lodMaxClamp","TEXTURE_MIN_LOD","lodMinClamp","compare","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","TEXTURE_COMPARE_FUNC","maxAnisotropy","TEXTURE_MAX_ANISOTROPY_EXT","Math","min","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","deleteSampler","sampler","createShader","Vertex","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","code","compileShader","console","assert","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","shader","createRenderPass","glfb","glrfb","depthStencil","withStencil","colors","length","createFramebuffer","bindFramebuffer","FRAMEBUFFER","i","view","framebufferRenderbuffer","COLOR_ATTACHMENT0","drawBuffers","map","_","DEPTH_STENCIL_ATTACHMENT","DEPTH_ATTACHMENT","error","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","push","fb","color","c","clearColors","clear","clearColor","clearDepth","clearStencil","createBindGroupLayout","entries","entry","binding","createBindGroup","createRenderPipeline","glp","vertex","fragment","cache","textureSlots","bufCount","texCount","bindGroups","j","loc","index","INVALID_INDEX","Buffer","getUniformBlockIndex","label","uniformBlockBinding","Texture","getUniformLocation","slot","Sampler","deleteProgram","pipeline","buffers","readBuffer","out","offset","future","status","Pending","byteLength","then","data","set","Done","Error","writeBuffer","bufferSubData","copyBuffer","src","dst","srcOffset","dstOffset","COPY_READ_BUFFER","COPY_WRITE_BUFFER","copyBufferSubData","generateMipmap","hint","DONT_CARE","GENERATE_MIPMAP_HINT","writeTexture","mipLevel","origin","x","y","z","bytesPerRow","rowsPerImage","glFormat","glType","isCube","target","TEXTURE_CUBE_MAP_POSITIVE_X","pixelSize","imageHeight","pixelsPerRow","floor","offsetAligned","pixelStorei","UNPACK_IMAGE_HEIGHT","UNPACK_ROW_LENGTH","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","texSubImage3D","slice","texSubImage2D","copyExternalImageToTexture","srcX","srcY","copyTexture","dstTexture","dstMipLevel","dstX","dstY","dstZ","isContextLost","copyTexSubImage3D","copyTexSubImage2D","copyTextureToBuffer","PIXEL_PACK_BUFFER","PACK_ROW_LENGTH","PACK_SKIP_PIXELS","PACK_SKIP_ROWS","readPixels","beginRenderPass","drawingBufferWidth","drawingBufferHeight","viewport","depthRange","scissor","SCISSOR_TEST","clearMask","isNaN","DEPTH_BUFFER_BIT","depthWrite","STENCIL_BUFFER_BIT","stencilWriteMask","blendWriteMask","All","INT","clearBufferiv","COLOR","UNSIGNED_INT","clearBufferuiv","clearBufferfv","COLOR_BUFFER_BIT","beginDefaultPass","submitRenderPass","depthFb","setRenderPipeline","useProgram","stencilRef","attribEnabled","attributes","ptr","Array","stride","stepMode","bufAttrs","step","instanceOffset","shaderLocation","enableVertexAttribArray","disableVertexAttribArray","setIndex","setVertex","buf","setBindGroup","bindGroup","offsets","offsetIdx","uniform","uniformInfo","warn","dataSize","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","alignment","UNIFORM_BUFFER_OFFSET_ALIGNMENT","bufferOffset","bufferDynamicOffset","bindBufferRange","bufferSize","uniform1i","bindSampler","draw","vertexCount","instanceCount","firstVertex","firstInstance","drawArraysInstanced","topology","drawIndexed","indexCount","firstIndex","drawElementsInstanced","indexFormat","setViewport","minDepth","maxDepth","setScissorRect","setBlendConst","blendColor","setStencilRef","ref","stencilFrontCompare","stencilBackCompare","stencilReadMask","stencilFuncSeparate","FRONT","BACK"],"sources":["../../../js/gpu/gl2/gl2.ts"],"sourcesContent":["import { MUGL_DEBUG, MUGL_FINALIZER } from '../../config';\nimport * as GLenum from '../gl-const';\nimport { Color, Extent2D, Extent3D, Future, FutureStatus, UInt, UIntArray } from '../primitive';\nimport {\n  BindingType, BufferUsage, ColorWrite, MipmapHint, ShaderStage, TextureUsage\n} from '../type';\nimport {\n  BindGroupDescriptor, BindGroupLayoutDescriptor, BufferDescriptor, DefaultRenderPassDescriptor,\n  ImageCopyExternalImage, ImageCopyTexture, ImageDataLayout, RenderPassDescriptor, RenderPipelineDescriptor,\n  SamplerDescriptor, ShaderDescriptor, TextureDescriptor\n} from '../descriptor';\nimport {\n  BindGroup, BindGroupLayout, Buffer, Device, RenderPass, RenderPipeline, Sampler, Shader, Texture\n} from '../resource';\nimport {\n  glClearType, glTexelFormat, glTexelSize, glTexelType, hasStencil, indexByteSize, is3DTexture, isDepthStencil,\n  vertexSize, vertexType, vertexNormalized,\n} from '../gl-util';\nimport {\n  WebGL2Device, WebGL2Buffer, WebGL2Texture, WebGL2Sampler, WebGL2Shader, WebGL2RenderPass, WebGL2BindGroupLayout,\n  WebGL2BindGroup, WebGL2RenderPipeline, UniformCache, WebGL2Attribute\n} from './model';\nimport { Canvas, WebGL2Feature, WebGL2FeatureNames } from './type';\nimport {\n  initWebGL2State, framebufferTexture, createResolveFrameBuffer, compileShaderProgram, createPipelineState,\n  getBufferSubData, blitFramebuffer, applyPipelineState, vertexAttribs, glToggle, isDeviceLost, applyColorMask,\n  applyDepthMask, applyStencilMask\n} from './helper';\n\n//#region Constants\n\nconst BYTE_MASK = 0xFF;\n\n//#endregion Constants\n\n//#region Device\n\ntype GPUFinalizer = FinalizationRegistry<{\n  finalizer: (gl: WebGL2RenderingContext) => void,\n  gl: WebGL2RenderingContext,\n}>;\n\nlet gpuFinalizer: GPUFinalizer | null = null;\n\nif (MUGL_FINALIZER) {\n  gpuFinalizer = new FinalizationRegistry(({ finalizer, gl }) => {\n    finalizer(gl);\n  });\n}\n\nexport { isDeviceLost } from './helper';\n\n/**\n * Requests a WebGL2 {@link Device}.\n * @param canvas the canvas to be used\n * @param options WebGL context initialization options\n * @param features WebGL features to enable\n * @returns WebGL2 GPU device instance, or null if WebGL2 is not supported\n */\nexport function requestWebGL2Device(\n  canvas: Canvas, options: WebGLContextAttributes = {}, features: WebGL2Feature = 0\n): Device | null {\n  const gl: WebGL2RenderingContext | null = canvas.getContext('webgl2', options);\n  if (gl) {\n    let enabledFeatures = 0;\n    for (const feature in WebGL2FeatureNames) {\n      if ((features & +feature) && gl.getExtension(WebGL2FeatureNames[+feature])) {\n        enabledFeatures = enabledFeatures | +feature;\n      }\n    }\n\n    const extDrawBuffersi: OES_draw_buffers_indexed | null = (enabledFeatures & WebGL2Feature.DrawBuffersIndexed) ?\n      gl.getExtension(WebGL2FeatureNames[WebGL2Feature.DrawBuffersIndexed]) : null;\n    const state = initWebGL2State(gl);\n    const finalizer = (gl: WebGL2RenderingContext) => {\n      gl.deleteFramebuffer(state.copyFrameBuffer);\n    };\n\n    const device = {\n      canvas,\n      gl,\n      features: enabledFeatures,\n      extDrawBuffersi,\n      pass: null,\n      state,\n      destroy() {\n        finalizer(this.gl);\n      }\n    } as WebGL2Device;\n\n    if (MUGL_FINALIZER) {\n      (gpuFinalizer as GPUFinalizer).register(device, { finalizer, gl });\n    }\n\n    return device;\n  }\n  return null;\n}\n\n/**\n * Resets the device state.\n * @param device the GPU device\n */\nexport function resetDevice(device: Device): void {\n  (device as WebGL2Device).destroy();\n  Object.assign((device as WebGL2Device).state, initWebGL2State((device as WebGL2Device).gl));\n}\n\n/**\n * Gets the enabled features of the device.\n * @param device the GPU device\n * @returns enabled features bitflag\n */\nexport function getDeviceFeatures(device: Device): WebGL2Feature {\n  return (device as WebGL2Device).features;\n}\n\n//#endregion Device\n\n//#region Buffer\n\n/**\n * Creates a new buffer object.\n * @param device the GPU device\n * @param desc the buffer descriptor\n * @returns new buffer object\n */\nexport function createBuffer(device: Device, desc: BufferDescriptor): Buffer {\n  const type = (desc.usage & BufferUsage.Uniform) ? GLenum.UNIFORM_BUFFER :\n    (desc.usage & BufferUsage.Index) ? GLenum.ELEMENT_ARRAY_BUFFER : GLenum.ARRAY_BUFFER;\n  const usage = (desc.usage & BufferUsage.Stream) ? GLenum.STREAM_DRAW :\n    (desc.usage & BufferUsage.Dynamic) ? GLenum.DYNAMIC_DRAW : GLenum.STATIC_DRAW;\n\n  const glb = (device as WebGL2Device).gl.createBuffer();\n  (device as WebGL2Device).gl.bindBuffer(type, glb);\n  (device as WebGL2Device).gl.bufferData(type, desc.size, usage);\n\n  const finalizer = (gl: WebGL2RenderingContext) => {\n    gl.deleteBuffer(glb);\n  };\n\n  const buffer = {\n    gl: (device as WebGL2Device).gl, glb, type, size: desc.size,\n    destroy(): void {\n      finalizer(this.gl);\n    }\n  } as WebGL2Buffer;\n\n  if (MUGL_FINALIZER) {\n    (gpuFinalizer as GPUFinalizer).register(buffer, { finalizer, gl: (device as WebGL2Device).gl });\n  }\n\n  return buffer;\n}\n\n//#endregion Buffer\n\n//#region Texture\n\n/**\n * Creates a new texture object.\n * @param device the GPU device\n * @param desc the texture descriptor\n * @returns new texture object\n */\nexport function createTexture(device: Device, desc: TextureDescriptor): Texture {\n  const samples = desc.sampleCount || 1;\n  const type = desc.dimension || GLenum.TEXTURE_2D;\n  const format = desc.format || GLenum.RGBA8;\n  const needTexture = !isDepthStencil(format) || ((desc.usage || 0) & TextureUsage.TextureBinding);\n  const [width, height, _depth] = desc.size || [1, 1, 1];\n  const depth = type === GLenum.TEXTURE_CUBE_MAP ? 6 :\n    type === GLenum.TEXTURE_2D ? 1 : _depth;\n\n  let glt: WebGLTexture | null = null;\n  let glrb: WebGLRenderbuffer | null = null;\n\n  if (samples > 1 || !needTexture) { // MSAA / Depth-stencil renderbuffer\n    // WebGL does not have multisample texture, so renderbuffer is needed to resolve MSAA\n    glrb = (device as WebGL2Device).gl.createRenderbuffer();\n    (device as WebGL2Device).gl.bindRenderbuffer(GLenum.RENDERBUFFER, glrb);\n    if (samples > 1) {\n      (device as WebGL2Device).gl.renderbufferStorageMultisample(GLenum.RENDERBUFFER, samples, format, width, height);\n    } else {\n      (device as WebGL2Device).gl.renderbufferStorage(GLenum.RENDERBUFFER, format, width, height);\n    }\n  }\n\n  if (needTexture) {\n    glt = (device as WebGL2Device).gl.createTexture();\n    (device as WebGL2Device).gl.activeTexture(GLenum.TEXTURE0);\n    (device as WebGL2Device).gl.bindTexture(type, glt);\n\n    if (is3DTexture(type)) {\n      (device as WebGL2Device).gl.texStorage3D(type, desc.mipLevelCount || 1, format, width, height, depth);\n    } else {\n      (device as WebGL2Device).gl.texStorage2D(type, desc.mipLevelCount || 1, format, width, height);\n    }\n  }\n\n  const finalizer = (gl: WebGL2RenderingContext) => {\n    gl.deleteTexture(glt);\n    gl.deleteRenderbuffer(glrb);\n  };\n\n  const texture = {\n    gl: (device as WebGL2Device).gl, glt, glrb, type, format, width, height, depth, samples,\n    destroy(): void {\n      finalizer(this.gl);\n    }\n  } as WebGL2Texture;\n\n  if (MUGL_FINALIZER) {\n    (gpuFinalizer as GPUFinalizer).register(texture, { finalizer, gl: (device as WebGL2Device).gl });\n  }\n\n  return texture;\n}\n\n//#endregion Texture\n\n//#region Sampler\n\n/**\n * Creates a new sampler object.\n * @param device the GPU device\n * @param desc the sampler descriptor\n * @returns new sampler object\n */\nexport function createSampler(device: Device, desc: SamplerDescriptor = {}): Sampler {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const gls = (device as WebGL2Device).gl.createSampler()!;\n  let minFilter = desc.minFilter || GLenum.NEAREST;\n  if (desc.mipmapFilter) {\n    if (desc.mipmapFilter === GLenum.NEAREST) {\n      minFilter = minFilter === GLenum.NEAREST ? GLenum.NEAREST_MIPMAP_NEAREST : GLenum.LINEAR_MIPMAP_NEAREST;\n    } else {\n      minFilter = minFilter === GLenum.NEAREST ? GLenum.NEAREST_MIPMAP_LINEAR : GLenum.LINEAR_MIPMAP_LINEAR;\n    }\n  }\n\n  (device as WebGL2Device).gl.samplerParameteri(gls, GLenum.TEXTURE_MIN_FILTER, minFilter);\n  (device as WebGL2Device).gl.samplerParameteri(gls, GLenum.TEXTURE_MAG_FILTER, desc.magFilter || GLenum.NEAREST);\n  (device as WebGL2Device).gl.samplerParameteri(gls, GLenum.TEXTURE_WRAP_S, desc.addressModeU || GLenum.CLAMP_TO_EDGE);\n  (device as WebGL2Device).gl.samplerParameteri(gls, GLenum.TEXTURE_WRAP_T, desc.addressModeV || GLenum.CLAMP_TO_EDGE);\n  (device as WebGL2Device).gl.samplerParameteri(gls, GLenum.TEXTURE_WRAP_R, desc.addressModeW || GLenum.CLAMP_TO_EDGE);\n  (device as WebGL2Device).gl.samplerParameterf(gls, GLenum.TEXTURE_MAX_LOD, desc.lodMaxClamp || 32);\n  (device as WebGL2Device).gl.samplerParameterf(gls, GLenum.TEXTURE_MIN_LOD, desc.lodMinClamp || 0);\n  if (desc.compare) {\n    (device as WebGL2Device).gl.samplerParameterf(gls, GLenum.TEXTURE_COMPARE_MODE, GLenum.COMPARE_REF_TO_TEXTURE);\n    (device as WebGL2Device).gl.samplerParameterf(gls, GLenum.TEXTURE_COMPARE_FUNC, desc.compare);\n  }\n  if ((desc.maxAnisotropy || 1) > 1) {\n    (device as WebGL2Device).gl.samplerParameterf(\n      gls,\n      GLenum.TEXTURE_MAX_ANISOTROPY_EXT,\n      Math.min(desc.maxAnisotropy || 1, (device as WebGL2Device).gl.getParameter(GLenum.MAX_TEXTURE_MAX_ANISOTROPY_EXT))\n    );\n  }\n\n  const finalizer = (gl: WebGL2RenderingContext) => {\n    gl.deleteSampler(gls);\n  };\n\n  const sampler = {\n    gls,\n    gl: (device as WebGL2Device).gl,\n    destroy(): void {\n      finalizer(this.gl);\n    }\n  } as WebGL2Sampler;\n\n  if (MUGL_FINALIZER) {\n    (gpuFinalizer as GPUFinalizer).register(sampler, { finalizer, gl: (device as WebGL2Device).gl });\n  }\n\n  return sampler;\n}\n\n//#endregion Sampler\n\n//#region Shader\n\n/**\n * Creates a new shader module object.\n * @param device the GPU device\n * @param desc the shader descriptor\n * @returns new shader object\n */\nexport function createShader(device: Device, desc: ShaderDescriptor): Shader {\n  const type = desc.usage === ShaderStage.Vertex ? GLenum.VERTEX_SHADER : GLenum.FRAGMENT_SHADER\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const gls = (device as WebGL2Device).gl.createShader(type)!;\n  (device as WebGL2Device).gl.shaderSource(gls, desc.code);\n  (device as WebGL2Device).gl.compileShader(gls);\n\n  if (MUGL_DEBUG) {\n    console.assert(\n      (device as WebGL2Device).gl.getShaderParameter(gls, GLenum.COMPILE_STATUS) || isDeviceLost(device),\n      `Failed to compile ${desc.usage === ShaderStage.Vertex ? 'vertex' : 'fragment'} shader: ${(device as WebGL2Device).gl.getShaderInfoLog(gls)}`\n    );\n  }\n\n  const finalizer = (gl: WebGL2RenderingContext) => {\n    gl.deleteShader(gls);\n  };\n\n  const shader = {\n    gl: (device as WebGL2Device).gl,\n    gls,\n    destroy(): void {\n      finalizer(this.gl);\n    }\n  } as WebGL2Shader;\n\n  if (MUGL_FINALIZER) {\n    (gpuFinalizer as GPUFinalizer).register(shader, { finalizer, gl: (device as WebGL2Device).gl });\n  }\n\n  return shader;\n}\n\n//#endregion Buffer\n\n//#region RenderPass\n\n/**\n * Creates a new render pass object.\n * @param device the GPU device\n * @param desc the render pass descriptor.\n * @returns new render pass\n */\nexport function createRenderPass(device: Device, desc: RenderPassDescriptor = {}): RenderPass {\n  let glfb: WebGLFramebuffer | null = null;\n  const glrfb: (WebGLFramebuffer | null)[] = [];\n  const depth = desc.depthStencil ? (desc.depthStencil.texture as WebGL2Texture) : null;\n  const withStencil = (depth && hasStencil(depth.format)) || false;\n\n  if (desc.colors && desc.colors.length) {\n    // An offscreen pass, need to create a framebuffer with color- and depth attachments\n    glfb = (device as WebGL2Device).gl.createFramebuffer();\n    (device as WebGL2Device).gl.bindFramebuffer(GLenum.FRAMEBUFFER, glfb);\n\n    for (let i = 0; i < desc.colors.length; ++i) {\n      if ((desc.colors[i].view.texture as WebGL2Texture).samples > 1) {\n        // Attach multisample renderbuffer for MSAA offscreen rendering\n        (device as WebGL2Device).gl.framebufferRenderbuffer(GLenum.FRAMEBUFFER, GLenum.COLOR_ATTACHMENT0 + i, GLenum.RENDERBUFFER,\n          (desc.colors[i].view.texture as WebGL2Texture).glrb);\n      } else {\n        framebufferTexture((device as WebGL2Device).gl, GLenum.COLOR_ATTACHMENT0 + i, desc.colors[i].view);\n      }\n    }\n\n    // TODO: [Feature] implement multiview\n    if (desc.colors.length > 1) {\n      (device as WebGL2Device).gl.drawBuffers(desc.colors.map((_, i) => GLenum.COLOR_ATTACHMENT0 + i));\n    }\n\n    // Attach optional depth-stencil buffer to framebuffer\n    if (depth) {\n      if (depth.glrb) { // Use renderbuffer if exist\n        (device as WebGL2Device).gl.framebufferRenderbuffer(GLenum.FRAMEBUFFER, withStencil ? GLenum.DEPTH_STENCIL_ATTACHMENT : GLenum.DEPTH_ATTACHMENT,\n          GLenum.RENDERBUFFER, depth.glrb);\n      } else { // Use depth texture\n        if (MUGL_DEBUG && !isDepthStencil(depth.format)) {\n          console.error('Invalid depth texture format', depth);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        framebufferTexture((device as WebGL2Device).gl, withStencil ? GLenum.DEPTH_STENCIL_ATTACHMENT : GLenum.DEPTH_ATTACHMENT, desc.depthStencil!);\n      }\n    }\n\n    if (MUGL_DEBUG) {\n      console.assert(\n        (device as WebGL2Device).gl.checkFramebufferStatus(GLenum.FRAMEBUFFER) === GLenum.FRAMEBUFFER_COMPLETE || isDeviceLost(device),\n        'Framebuffer completeness check failed'\n      );\n    }\n\n    // WebGL has no support for multisample textures. We will render to MSAA renderbuffers\n    // and blit to the resolve renderbuffers which have textures attached.\n    for (let i = 0; i < desc.colors.length; ++i) {\n      glrfb.push((desc.colors[i].view.texture as WebGL2Texture).samples > 1 ?\n        createResolveFrameBuffer((device as WebGL2Device).gl, GLenum.COLOR_ATTACHMENT0, desc.colors[i].view) : null);\n    }\n    glrfb.push(depth && depth.samples > 1 && depth.glt ?\n      createResolveFrameBuffer((device as WebGL2Device).gl, withStencil ?\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        GLenum.DEPTH_STENCIL_ATTACHMENT : GLenum.DEPTH_ATTACHMENT, desc.depthStencil!) : null);\n  }\n\n  const finalizer = (gl: WebGL2RenderingContext) => {\n    gl.deleteFramebuffer(glfb);\n    for (const fb of glrfb) {\n      gl.deleteFramebuffer(fb);\n    }\n  };\n\n  const pass = {\n    gl: (device as WebGL2Device).gl,\n    glfb, glrfb, depth,\n    color: desc.colors ? desc.colors.map((c) => c.view.texture as WebGL2Texture) : [],\n    clearColors: desc.colors ? desc.colors.map((c) => c.clear) : [],\n    clearColor: desc.clearColor,\n    clearDepth: desc.clearDepth,\n    clearStencil: desc.clearStencil,\n    destroy(): void {\n      finalizer(this.gl);\n    }\n  } as WebGL2RenderPass;\n\n  if (MUGL_FINALIZER) {\n    (gpuFinalizer as GPUFinalizer).register(pass, { finalizer, gl: (device as WebGL2Device).gl });\n  }\n\n  return pass;\n}\n\n//#endregion RenderPass\n\n//#region BindGroup\n\n/**\n * Creates a new pipeline bind group layout object.\n * @param device the GPU device\n * @param desc the bind group layout descriptor\n * @returns new bind group layout object\n */\nexport function createBindGroupLayout(device: Device, desc: BindGroupLayoutDescriptor): BindGroupLayout {\n  return {\n    entries: desc.entries.map((entry, binding) => ({ binding, ...entry })),\n    destroy(): void {\n      // noop\n    }\n  } as WebGL2BindGroupLayout;\n}\n\n/**\n * Creates a new pipeline bind group object.\n * @param device the GPU device\n * @param desc the bind group descriptor\n * @returns new bind group object\n */\nexport function createBindGroup(device: Device, desc: BindGroupDescriptor): BindGroup {\n  return {\n    entries: desc.entries.map((entry, binding) => ({ binding, ...entry })),\n    destroy(): void {\n      // noop\n    }\n  } as WebGL2BindGroup;\n}\n\n//#endregion BindGroup\n\n//#region RenderPipeline\n\n/**\n * Creates a new render pipeline state object.\n * @param device the GPU device\n * @param desc the pipeline descriptor\n * @returns new render pipeline object\n */\nexport function createRenderPipeline(device: Device, desc: RenderPipelineDescriptor): RenderPipeline {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const glp = compileShaderProgram(device, (desc.vertex as WebGL2Shader).gls!, (desc.fragment as WebGL2Shader).gls!);\n  const cache: UniformCache[][] = [];\n  const textureSlots: Record<string, number> = {};\n\n  // Populate uniform cache\n  let bufCount = 0;\n  let texCount = 0;\n  if (desc.bindGroups) {\n    for (let i = 0; i < desc.bindGroups.length; ++i) {\n      const entries = (desc.bindGroups[i] as WebGL2BindGroupLayout).entries;\n      cache.push([]);\n\n      for (let j = 0; j < entries.length; ++j) {\n        const entry = entries[j];\n        let loc = null;\n        let index = GLenum.INVALID_INDEX;\n\n        if (entry.type === BindingType.Buffer) {\n          index = (device as WebGL2Device).gl.getUniformBlockIndex(glp, entry.label);\n          (device as WebGL2Device).gl.uniformBlockBinding(glp, index, bufCount++);\n        } else if (entry.type === BindingType.Texture) {\n          loc = (device as WebGL2Device).gl.getUniformLocation(glp, entry.label);\n          textureSlots[entry.label] = texCount++;\n        }\n\n        cache[i][entry.binding] = {\n          ...entry,\n          loc,\n          index,\n          slot: entry.type === BindingType.Buffer ? bufCount - 1 :\n            entry.type === BindingType.Texture ? texCount - 1 : 0,\n        };\n      }\n    }\n\n    // Sampler needs to use the matching texture slot\n    for (let i = 0; i < desc.bindGroups.length; ++i) {\n      const entries = (desc.bindGroups[i] as WebGL2BindGroupLayout).entries;\n      for (let j = 0; j < entries.length; ++j) {\n        if (entries[j].type === BindingType.Sampler) {\n          if (textureSlots[entries[j].label]) {\n            cache[i][entries[j].binding].slot = textureSlots[entries[j].label];\n          }\n        }\n      }\n    }\n  }\n\n  const finalizer = (gl: WebGL2RenderingContext) => {\n    gl.deleteProgram(glp);\n  };\n\n  const pipeline = {\n    gl: (device as WebGL2Device).gl,\n    glp,\n    buffers: desc.buffers,\n    cache,\n    state: createPipelineState(desc),\n    destroy(): void {\n      finalizer(this.gl);\n    }\n  } as WebGL2RenderPipeline;\n\n\n  if (MUGL_FINALIZER) {\n    (gpuFinalizer as GPUFinalizer).register(pipeline, { finalizer, gl: (device as WebGL2Device).gl });\n  }\n\n  return pipeline;\n}\n\n//#endregion RenderPipeline\n\n//#region Read/Write\n\n/**\n * Reads data from a buffer.\n * @param device the GPU device\n * @param buffer the GPU buffer to read from\n * @param out the output CPU buffer\n * @param offset othe byte offset into GPU buffer to begin reading from. Defaults to 0\n * @returns a future\n */\nexport function readBuffer(device: Device, buffer: Buffer, out: Uint8Array, offset: UInt = 0): Future {\n  const future = { status: FutureStatus.Pending };\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  getBufferSubData((device as WebGL2Device).gl, (buffer as WebGL2Buffer).type, (buffer as WebGL2Buffer).glb!, offset, out.byteLength)\n    .then(\n      data => {\n        out.set(data);\n        future.status = FutureStatus.Done;\n      },\n      () => (future.status = FutureStatus.Error)\n    );\n  return future;\n}\n\n/**\n * Writes data to a buffer.\n * @param device the GPU device\n * @param buffer the buffer to write to\n * @param data the buffer data\n * @param offset the byte offset into GPU buffer to begin writing to. Defaults to 0\n */\nexport function writeBuffer(device: Device, buffer: Buffer, data: ArrayBufferView, offset: UInt = 0): void {\n  (device as WebGL2Device).gl.bindBuffer((buffer as WebGL2Buffer).type, (buffer as WebGL2Buffer).glb);\n  (device as WebGL2Device).gl.bufferSubData((buffer as WebGL2Buffer).type, offset, data);\n}\n\n/**\n * Copies data from a buffer to another buffer.\n * @param device the GPU device\n * @param src the buffer to read from\n * @param dst the buffer to write to\n * @param size the byte size of the GPU buffer to read. Defaults to the whole buffer\n * @param srcOffset the byte offset into src buffer to begin reading from. Defaults to 0\n * @param dstOffset the byte offset into dst buffer to begin writing to. Defaults to 0\n */\nexport function copyBuffer(\n  device: Device, src: Buffer, dst: Buffer, size: UInt = (src as WebGL2Buffer).size, srcOffset: UInt = 0, dstOffset: UInt = 0\n): void {\n  (device as WebGL2Device).gl.bindBuffer(GLenum.COPY_READ_BUFFER, (src as WebGL2Buffer).glb);\n  (device as WebGL2Device).gl.bindBuffer(GLenum.COPY_WRITE_BUFFER, (dst as WebGL2Buffer).glb);\n  (device as WebGL2Device).gl.copyBufferSubData(GLenum.COPY_READ_BUFFER, GLenum.COPY_WRITE_BUFFER, srcOffset, dstOffset, size);\n}\n\n/**\n * Generates mipmap for a texture.\n * @param device the GPU device\n * @param texture the texture\n * @param hint mipmap quality hint\n */\nexport function generateMipmap(device: Device, texture: Texture, hint: MipmapHint = GLenum.DONT_CARE): void {\n  (device as WebGL2Device).gl.activeTexture(GLenum.TEXTURE0);\n  (device as WebGL2Device).gl.bindTexture((texture as WebGL2Texture).type, (texture as WebGL2Texture).glt);\n  (device as WebGL2Device).gl.hint(GLenum.GENERATE_MIPMAP_HINT, hint);\n  (device as WebGL2Device).gl.generateMipmap((texture as WebGL2Texture).type);\n}\n\n/**\n * Writes subregion of data array to a texture.\n * @param device the GPU device\n * @param texture the texture subregion to write to.\n * @param data the texture data\n * @param layout the data layout\n * @param size the size of the data subregion to write\n */\nexport function writeTexture(\n  device: Device,\n  { texture, mipLevel = 0, origin: [x, y, z] = [0, 0, 0] }: ImageCopyTexture,\n  data: ArrayBufferView,\n  { offset = 0, bytesPerRow, rowsPerImage = 0 }: ImageDataLayout,\n  [width, height, depth]: Extent3D = [(texture as WebGL2Texture).width - x, (texture as WebGL2Texture).height - y, (texture as WebGL2Texture).depth - z]\n): void {\n  const glFormat = glTexelFormat((texture as WebGL2Texture).format);\n  const glType = glTexelType((texture as WebGL2Texture).format);\n  const isCube = (texture as WebGL2Texture).type === GLenum.TEXTURE_CUBE_MAP;\n  const target = isCube ? GLenum.TEXTURE_CUBE_MAP_POSITIVE_X + z : (texture as WebGL2Texture).type;\n\n  (device as WebGL2Device).gl.activeTexture(GLenum.TEXTURE0);\n  (device as WebGL2Device).gl.bindTexture((texture as WebGL2Texture).type, (texture as WebGL2Texture).glt);\n\n  const pixelSize = glTexelSize((texture as WebGL2Texture).format);\n  const imageHeight = rowsPerImage || height;\n  const pixelsPerRow = Math.floor(bytesPerRow / pixelSize);\n  const offsetAligned = offset - offset % bytesPerRow;\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_IMAGE_HEIGHT, imageHeight);\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_ROW_LENGTH, pixelsPerRow);\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_SKIP_PIXELS, Math.floor((offset % bytesPerRow) / pixelSize));\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_SKIP_ROWS, 0);\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_SKIP_IMAGES, 0);\n\n  if (is3DTexture((texture as WebGL2Texture).type)) {\n    (device as WebGL2Device).gl.texSubImage3D(target, mipLevel, x, y, z, width, height, depth, (texture as WebGL2Texture).format, glType, data, offsetAligned);\n  } else if (isCube) {\n    for (let slice = z; slice < z + depth; ++slice) {\n      (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_SKIP_ROWS, slice * pixelsPerRow * imageHeight);\n      (device as WebGL2Device).gl.texSubImage2D(target + slice, mipLevel, x, y, width, height, glFormat, glType, data, offsetAligned);\n    }\n  } else { // 2D texture\n    (device as WebGL2Device).gl.texSubImage2D(target, mipLevel, x, y, width, height, glFormat, glType, data, offsetAligned);\n  }\n}\n\n/**\n * Uploads an image subregion to a texture.\n * @param device the GPU device\n * @param src the image subregion to write\n * @param dst the texture subregion to write to.\n * @param size the size of image subregion to write\n */\nexport function copyExternalImageToTexture(\n  device: Device,\n  { src, origin: [srcX, srcY] = [0, 0] }: ImageCopyExternalImage,\n  { texture, mipLevel = 0, origin: [x, y, z] = [0, 0, 0] }: ImageCopyTexture,\n  [width, height]: Extent2D = [src.width - srcX, src.height - srcY]\n): void {\n  const glType = glTexelType((texture as WebGL2Texture).format);\n  const isCube = (texture as WebGL2Texture).type === GLenum.TEXTURE_CUBE_MAP;\n  const target = isCube ? GLenum.TEXTURE_CUBE_MAP_POSITIVE_X + z : (texture as WebGL2Texture).type;\n\n  (device as WebGL2Device).gl.activeTexture(GLenum.TEXTURE0);\n  (device as WebGL2Device).gl.bindTexture((texture as WebGL2Texture).type, (texture as WebGL2Texture).glt);\n\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_SKIP_PIXELS, srcX);\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_SKIP_ROWS, srcY);\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_SKIP_IMAGES, 0);\n  (device as WebGL2Device).gl.pixelStorei(GLenum.UNPACK_IMAGE_HEIGHT, 0);\n\n  if (is3DTexture((texture as WebGL2Texture).type)) {\n    (device as WebGL2Device).gl.texSubImage3D(target, mipLevel, x, y, z, width, height, 1, (texture as WebGL2Texture).format, glType, src);\n  } else {\n    (device as WebGL2Device).gl.texSubImage2D(target, mipLevel, x, y, width, height, glTexelFormat((texture as WebGL2Texture).format), glType, src);\n  }\n}\n\n/**\n * Copies subregion of a texture to another texture.\n * @param device the GPU device\n * @param src the texture subregion to read from.\n * @param dst the texture subregion to write to.\n * @param size the size of the texture subregion to copy\n */\nexport function copyTexture(\n  device: Device,\n  { texture, mipLevel = 0, origin: [x, y, z] = [0, 0, 0] }: ImageCopyTexture,\n  { texture: dstTexture, mipLevel: dstMipLevel = 0, origin: [dstX, dstY, dstZ] = [0, 0, 0] }: ImageCopyTexture,\n  [width, height, depth]: Extent3D = [(texture as WebGL2Texture).width - x, (texture as WebGL2Texture).height - y, (texture as WebGL2Texture).depth - z]\n): void {\n  // Bind dst\n  const isCube = (dstTexture as WebGL2Texture).type === GLenum.TEXTURE_CUBE_MAP;\n  const target = isCube ? GLenum.TEXTURE_CUBE_MAP_POSITIVE_X + dstZ : (dstTexture as WebGL2Texture).type;\n  (device as WebGL2Device).gl.activeTexture(GLenum.TEXTURE0);\n  (device as WebGL2Device).gl.bindTexture((dstTexture as WebGL2Texture).type, (dstTexture as WebGL2Texture).glt);\n\n  // Bind src to framebuffer then copy to dst\n  (device as WebGL2Device).gl.readBuffer(GLenum.COLOR_ATTACHMENT0);\n  (device as WebGL2Device).gl.bindFramebuffer(GLenum.FRAMEBUFFER, (device as WebGL2Device).state.copyFrameBuffer);\n\n  if (is3DTexture((texture as WebGL2Texture).type) || (texture as WebGL2Texture).type === GLenum.TEXTURE_CUBE_MAP) {\n    for (let slice = z; slice < z + depth; ++slice) {  // Copy each slice. TODO: Can be expensive for large 3D textures!\n      framebufferTexture((device as WebGL2Device).gl, GLenum.COLOR_ATTACHMENT0, { texture, mipLevel, slice });\n      if (MUGL_DEBUG) {\n        console.assert(\n          (device as WebGL2Device).gl.checkFramebufferStatus(GLenum.FRAMEBUFFER) === GLenum.FRAMEBUFFER_COMPLETE || (device as WebGL2Device).gl.isContextLost(),\n          'Framebuffer completeness check failed for copyTexture'\n        );\n      }\n      if (is3DTexture((dstTexture as WebGL2Texture).type)) {\n        (device as WebGL2Device).gl.copyTexSubImage3D(target + (isCube ? slice : 0), dstMipLevel, dstX, dstY, dstZ, x, y, width, height);\n      } else {\n        (device as WebGL2Device).gl.copyTexSubImage2D(target + (isCube ? slice : 0), dstMipLevel, dstX, dstY, x, y, width, height);\n      }\n    }\n  } else { // src is 2D texture\n    const slice = 0;\n    framebufferTexture((device as WebGL2Device).gl, GLenum.COLOR_ATTACHMENT0, { texture, mipLevel, slice });\n    if (MUGL_DEBUG) {\n      console.assert(\n        (device as WebGL2Device).gl.checkFramebufferStatus(GLenum.FRAMEBUFFER) === GLenum.FRAMEBUFFER_COMPLETE || (device as WebGL2Device).gl.isContextLost(),\n        'Framebuffer completeness check failed for copyTexture'\n      );\n    }\n    if (is3DTexture((dstTexture as WebGL2Texture).type)) {\n      (device as WebGL2Device).gl.copyTexSubImage3D(target + (isCube ? slice : 0), dstMipLevel, dstX, dstY, dstZ, x, y, width, height);\n    } else {\n      (device as WebGL2Device).gl.copyTexSubImage2D(target + (isCube ? slice : 0), dstMipLevel, dstX, dstY, x, y, width, height);\n    }\n  }\n\n  // Reset to original framebuffer\n  (device as WebGL2Device).gl.bindFramebuffer(\n    GLenum.FRAMEBUFFER,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    (device as WebGL2Device).pass ? (device as WebGL2Device).pass!.glfb : null\n  );\n}\n\n/**\n * Copies subregion of a texture to a buffer.\n * @param device the GPU device\n * @param src the texture subregion to read from.\n * @param dst the buffer to write to\n * @param layout the buffer data layout to use for storing the texture\n * @param size the size of the texture subregion to copy\n */\nexport function copyTextureToBuffer(\n  device: Device,\n  { texture, mipLevel = 0, origin: [x, y, z] = [0, 0, 0] }: ImageCopyTexture,\n  dst: Buffer,\n  { offset = 0, bytesPerRow, rowsPerImage = 0 }: ImageDataLayout,\n  [width, height, depth]: Extent3D = [(texture as WebGL2Texture).width - x, (texture as WebGL2Texture).height - y, (texture as WebGL2Texture).depth - z]\n): void {\n  (device as WebGL2Device).gl.bindBuffer(GLenum.PIXEL_PACK_BUFFER, dst);\n  (device as WebGL2Device).gl.readBuffer(GLenum.COLOR_ATTACHMENT0);\n  (device as WebGL2Device).gl.bindFramebuffer(GLenum.FRAMEBUFFER, (device as WebGL2Device).state.copyFrameBuffer);\n\n  // TODO: validate formats. Not all formats can be read.\n  // See: https://webgl2fundamentals.org/webgl/lessons/webgl-readpixels.html\n  const type = glTexelType((texture as WebGL2Texture).format);\n  const format = glTexelFormat((texture as WebGL2Texture).format);\n  const pixelSize = glTexelSize((texture as WebGL2Texture).format);\n  const imageHeight = rowsPerImage || height;\n  const pixelsPerRow = Math.floor(bytesPerRow / pixelSize);\n  const offsetAligned = offset - offset % bytesPerRow;\n  (device as WebGL2Device).gl.pixelStorei(GLenum.PACK_ROW_LENGTH, pixelsPerRow);\n  (device as WebGL2Device).gl.pixelStorei(GLenum.PACK_SKIP_PIXELS, Math.floor((offset % bytesPerRow) / pixelSize));\n  (device as WebGL2Device).gl.pixelStorei(GLenum.PACK_SKIP_ROWS, 0);\n\n  if (is3DTexture((texture as WebGL2Texture).type) || (texture as WebGL2Texture).type === GLenum.TEXTURE_CUBE_MAP) {\n    for (let slice = z; slice < z + depth; ++slice) {  // Copy each slice. TODO: Can be expensive for large 3D textures!\n      framebufferTexture((device as WebGL2Device).gl, GLenum.COLOR_ATTACHMENT0, { texture, mipLevel, slice });\n      if (MUGL_DEBUG) {\n        console.assert(\n          (device as WebGL2Device).gl.checkFramebufferStatus(GLenum.FRAMEBUFFER) === GLenum.FRAMEBUFFER_COMPLETE || (device as WebGL2Device).gl.isContextLost(),\n          'Framebuffer completeness check failed for copyTexture'\n        );\n      }\n      (device as WebGL2Device).gl.readPixels(x, y, width, height, format, type, offsetAligned + (slice - z) * bytesPerRow * imageHeight);\n    }\n  } else { // src is 2D texture\n    const slice = 0;\n    framebufferTexture((device as WebGL2Device).gl, GLenum.COLOR_ATTACHMENT0, { texture, mipLevel, slice });\n    if (MUGL_DEBUG) {\n      console.assert(\n        (device as WebGL2Device).gl.checkFramebufferStatus(GLenum.FRAMEBUFFER) === GLenum.FRAMEBUFFER_COMPLETE || (device as WebGL2Device).gl.isContextLost(),\n        'Framebuffer completeness check failed for copyTexture'\n      );\n    }\n    (device as WebGL2Device).gl.readPixels(x, y, width, height, format, type, offsetAligned);\n  }\n\n  // Reset to original framebuffer\n  (device as WebGL2Device).gl.bindFramebuffer(\n    GLenum.FRAMEBUFFER,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    (device as WebGL2Device).pass ? (device as WebGL2Device).pass!.glfb : null\n  );\n}\n\n//#endregion Read/Write\n\n//#region Render\n\n/**\n * Starts a render pass.\n * @param device the GPU device\n * @param pass the render pass\n */\nexport function beginRenderPass(device: Device, pass: RenderPass): void {\n  let width = (device as WebGL2Device).gl.drawingBufferWidth;\n  let height = (device as WebGL2Device).gl.drawingBufferHeight;\n  if ((pass as WebGL2RenderPass).color.length) { // Offscreen pass\n    width = (pass as WebGL2RenderPass).color[0].width;\n    height = (pass as WebGL2RenderPass).color[0].height;\n  }\n\n  // Bind the pass framebuffer\n  (device as WebGL2Device).gl.bindFramebuffer(GLenum.FRAMEBUFFER, (pass as WebGL2RenderPass).glfb);\n\n  // Reset viewport and scissor. Necessary for buffer clearing\n  (device as WebGL2Device).gl.viewport(0, 0, width, height);\n  (device as WebGL2Device).gl.depthRange(0, 1);\n  if ((device as WebGL2Device).state.scissor) {\n    (device as WebGL2Device).state.scissor = false;\n    glToggle((device as WebGL2Device).gl, GLenum.SCISSOR_TEST, false);\n  }\n\n  // Clear color/depth/stencil, override masks as necessary to allow clearing\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */\n  let clearMask = 0;\n  if (!isNaN((pass as WebGL2RenderPass).clearDepth!)) {\n    clearMask |= GLenum.DEPTH_BUFFER_BIT;\n    (device as WebGL2Device).gl.clearDepth((pass as WebGL2RenderPass).clearDepth!);\n    applyDepthMask((device as WebGL2Device).gl, (device as WebGL2Device).state.state.depthWrite, true);\n    (device as WebGL2Device).state.state.depthWrite = true;\n  }\n  if (!isNaN((pass as WebGL2RenderPass).clearStencil!)) {\n    clearMask |= GLenum.STENCIL_BUFFER_BIT;\n    (device as WebGL2Device).gl.clearStencil((pass as WebGL2RenderPass).clearStencil!);\n    applyStencilMask((device as WebGL2Device).gl, (device as WebGL2Device).state.state.stencilWriteMask, BYTE_MASK);\n    (device as WebGL2Device).state.state.stencilWriteMask = BYTE_MASK;\n  }\n\n  // This resets the color mask for all draw buffers\n  applyColorMask((device as WebGL2Device).gl, (device as WebGL2Device).state.state.blendWriteMask, ColorWrite.All);\n  (device as WebGL2Device).state.state.blendWriteMask = ColorWrite.All;\n\n  if ((pass as WebGL2RenderPass).color.length) { // Offscreen pass\n    for (let i = 0; i < (pass as WebGL2RenderPass).color.length; ++i) {\n      if ((pass as WebGL2RenderPass).clearColors[i]) {\n        const type = glClearType((pass as WebGL2RenderPass).color[i].format);\n        if (type === GLenum.INT) {\n          (device as WebGL2Device).gl.clearBufferiv(GLenum.COLOR, i, (pass as WebGL2RenderPass).clearColors[i]!);\n        } else if (type === GLenum.UNSIGNED_INT) {\n          (device as WebGL2Device).gl.clearBufferuiv(GLenum.COLOR, i, (pass as WebGL2RenderPass).clearColors[i]!);\n        } else { // type === GLenum.FLOAT\n          (device as WebGL2Device).gl.clearBufferfv(GLenum.COLOR, i, (pass as WebGL2RenderPass).clearColors[i]!);\n        }\n      }\n    }\n  } else if ((pass as WebGL2RenderPass).clearColor) { // for default pass\n    clearMask |= GLenum.COLOR_BUFFER_BIT;\n    (device as WebGL2Device).gl.clearColor(...(pass as WebGL2RenderPass).clearColor!);\n  }\n  /* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n  if (clearMask) {\n    (device as WebGL2Device).gl.clear(clearMask);\n  }\n\n  (device as WebGL2Device).pass = pass as WebGL2RenderPass;\n}\n\n/**\n * Convenient method to start a default render pass.\n * @param device the GPU device\n * @param desc the render pass descriptor\n */\nexport function beginDefaultPass(device: Device, desc: DefaultRenderPassDescriptor = {}): void {\n  // Unbind any framebuffer\n  (device as WebGL2Device).gl.bindFramebuffer(GLenum.FRAMEBUFFER, null);\n\n  // Reset viewport and scissor. Necessary for buffer clearing\n  (device as WebGL2Device).gl.viewport(0, 0, (device as WebGL2Device).gl.drawingBufferWidth, (device as WebGL2Device).gl.drawingBufferHeight);\n  (device as WebGL2Device).gl.depthRange(0, 1);\n  if ((device as WebGL2Device).state.scissor) {\n    (device as WebGL2Device).state.scissor = false;\n    glToggle((device as WebGL2Device).gl, GLenum.SCISSOR_TEST, false);\n  }\n\n  // Clear color/depth/stencil, override masks as necessary to allow clearing\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */\n  let clearMask = 0;\n  if (!isNaN(desc.clearDepth!)) {\n    clearMask |= GLenum.DEPTH_BUFFER_BIT;\n    (device as WebGL2Device).gl.clearDepth(desc.clearDepth!);\n    applyDepthMask((device as WebGL2Device).gl, (device as WebGL2Device).state.state.depthWrite, true);\n    (device as WebGL2Device).state.state.depthWrite = true;\n  }\n  if (!isNaN(desc.clearStencil!)) {\n    clearMask |= GLenum.STENCIL_BUFFER_BIT;\n    (device as WebGL2Device).gl.clearStencil(desc.clearStencil!);\n    applyStencilMask((device as WebGL2Device).gl, (device as WebGL2Device).state.state.stencilWriteMask, BYTE_MASK);\n    (device as WebGL2Device).state.state.stencilWriteMask = BYTE_MASK;\n  }\n  if (desc.clearColor) {\n    clearMask |= GLenum.COLOR_BUFFER_BIT;\n    (device as WebGL2Device).gl.clearColor(...desc.clearColor!);\n    applyColorMask((device as WebGL2Device).gl, (device as WebGL2Device).state.state.blendWriteMask, ColorWrite.All);\n    (device as WebGL2Device).state.state.blendWriteMask = ColorWrite.All;\n  }\n  /* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n  if (clearMask) {\n    (device as WebGL2Device).gl.clear(clearMask);\n  }\n\n  (device as WebGL2Device).pass = null;\n}\n\n/**\n * Submits the current render pass.\n * @param device the GPU device\n */\nexport function submitRenderPass(device: Device): void {\n  if ((device as WebGL2Device).pass) {\n    // Blit main framebuffer content to MSAA resolve framebuffers so that texture contents are updated\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    for (let i = 0; i < (device as WebGL2Device).pass!.color.length; ++i) {\n      if ((device as WebGL2Device).pass!.glrfb[i]) {\n        blitFramebuffer((device as WebGL2Device).gl, (device as WebGL2Device).pass!.glfb, (device as WebGL2Device).pass!.glrfb[i],\n          (device as WebGL2Device).pass!.color[i], GLenum.COLOR_BUFFER_BIT, GLenum.COLOR_ATTACHMENT0 + i);\n      }\n    }\n    const depthFb = (device as WebGL2Device).pass!.glrfb[(device as WebGL2Device).pass!.glrfb.length - 1];\n    if ((device as WebGL2Device).pass!.depth && depthFb) {\n      blitFramebuffer((device as WebGL2Device).gl, (device as WebGL2Device).pass!.glfb, depthFb,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        (device as WebGL2Device).pass!.depth!, GLenum.DEPTH_BUFFER_BIT | GLenum.STENCIL_BUFFER_BIT);\n    }\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n  }\n  (device as WebGL2Device).pass = null;\n}\n\n/**\n * Binds a RenderPipeline to the current render pass.\n * @param device the GPU device\n * @param pipeline the pipeline to bind\n */\nexport function setRenderPipeline(device: Device, pipeline: RenderPipeline): void {\n  // Optimization: pipeline unchanged, skip other updates\n  if ((device as WebGL2Device).state.pipeline === pipeline) {\n    return;\n  }\n\n  // Update shader program\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  if (!(device as WebGL2Device).state.pipeline || (device as WebGL2Device).state.pipeline!.glp !== (pipeline as WebGL2RenderPipeline).glp) {\n    (device as WebGL2Device).gl.useProgram((pipeline as WebGL2RenderPipeline).glp);\n  }\n\n  // Update pipeline state cache\n  applyPipelineState(\n    (device as WebGL2Device).gl, (device as WebGL2Device).extDrawBuffersi,\n    (device as WebGL2Device).state.state, (pipeline as WebGL2RenderPipeline).state,\n    (device as WebGL2Device).state.stencilRef\n  );\n  Object.assign((device as WebGL2Device).state.state, (pipeline as WebGL2RenderPipeline).state);\n\n  // Update buffer attributes cache\n  const attribEnabled: UInt[] = []; // Attribute enabled state bit flags (1 = originally enabled, 2 = should be enabled)\n  for (const { attributes } of (device as WebGL2Device).state.buffers) {\n    for (const { ptr } of attributes) {\n      attribEnabled[ptr[0]] = 1; // 1 = originally enabled, should disable if not used\n    }\n  }\n  (device as WebGL2Device).state.buffers = Array((pipeline as WebGL2RenderPipeline).buffers.length);\n  for (let slot = 0; slot < (pipeline as WebGL2RenderPipeline).buffers.length; ++slot) {\n    const { attributes, stride, stepMode = 0 } = (pipeline as WebGL2RenderPipeline).buffers[slot];\n    const bufAttrs: WebGL2Attribute[] = [];\n    (device as WebGL2Device).state.buffers[slot] = {\n      glb: null, attributes: bufAttrs, stride, step: stepMode, offset: 0, instanceOffset: 0\n    };\n    for (const { format, offset, shaderLocation } of attributes) {\n      attribEnabled[shaderLocation] = (attribEnabled[shaderLocation] || 0) + 2; // 2 = should be enabled\n      bufAttrs.push({\n        buffer: slot,\n        ptr: [\n          shaderLocation,\n          vertexSize(format),\n          vertexType(format),\n          vertexNormalized(format),\n          stride,\n          offset\n        ],\n        step: stepMode\n      });\n    }\n  }\n\n  // Enable / disable vertex attributes\n  // attribEnabled: 0 = unused, 1 = originally enabled, now should disable, 2 = originally disabled, should enable, 3 = keep enabled\n  for (let i = 0; i < attribEnabled.length; ++i) {\n    if (attribEnabled[i] === 2) {\n      (device as WebGL2Device).gl.enableVertexAttribArray(i);\n    } else if (attribEnabled[i] === 1) {\n      (device as WebGL2Device).gl.disableVertexAttribArray(i);\n    }\n  }\n\n  // Set pipeline as current\n  (device as WebGL2Device).state.pipeline = pipeline as WebGL2RenderPipeline;\n}\n\n/**\n * Binds an index buffer to the current render pass.\n * @param device the GPU device\n * @param buffer the buffer to bind\n */\nexport function setIndex(device: Device, buffer: Buffer): void {\n  if ((buffer as WebGL2Buffer).glb !== (device as WebGL2Device).state.index) {\n    (device as WebGL2Device).gl.bindBuffer(GLenum.ELEMENT_ARRAY_BUFFER, ((device as WebGL2Device).state.index = (buffer as WebGL2Buffer).glb));\n  }\n}\n\n/**\n * Binds a vertex buffer to a slot in the current render pass.\n * @param device the GPU device\n * @param slot the vertex slot to bind to\n * @param buffer the buffer to bind\n */\nexport function setVertex(device: Device, slot: number, buffer: Buffer, offset: UInt = 0): void {\n  const buf = (device as WebGL2Device).state.buffers[slot];\n  if (buf && (buf.glb !== (buffer as WebGL2Buffer).glb || buf.offset !== offset)) {\n    buf.glb = (buffer as WebGL2Buffer).glb;\n    buf.offset = offset;\n    buf.instanceOffset = 0;\n    vertexAttribs((device as WebGL2Device).gl, buf, offset);\n  }\n}\n\n/**\n * Binds a bind group to the current render pass.\n * @param device the GPU device\n * @param slot the bind group slot to bind to\n * @param bindGroup the bind group to use\n * @param offsets the dynamic offsets for dynamic buffers in this bind group\n */\nexport function setBindGroup(device: Device, slot: UInt, bindGroup: BindGroup, offsets: UIntArray = []): void {\n  if (!(device as WebGL2Device).state.pipeline) {\n    return; // Skipping updates. No effect if pipeline not bound\n  }\n\n  for (let i = 0, offsetIdx = 0; i < (bindGroup as WebGL2BindGroup).entries.length; ++i) {\n    const uniform = (bindGroup as WebGL2BindGroup).entries[i];\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const uniformInfo = (device as WebGL2Device).state.pipeline!.cache[slot] && (device as WebGL2Device).state.pipeline!.cache[slot][uniform.binding];\n    if (!uniformInfo) { // No such uniform\n      if (MUGL_DEBUG) {\n        console.warn(`Undefined uniform binding: ${uniform.binding}, slot: ${slot}`);\n      }\n      continue;\n    }\n\n    if (MUGL_DEBUG) {\n      if (uniform.buffer) {\n        console.assert(uniformInfo.type === BindingType.Buffer,\n          `Cannot bind buffer to uniform: ${uniformInfo.label}, binding: ${uniformInfo.binding}, slot: ${slot}`);\n\n        console.assert((uniform.buffer as WebGL2Buffer).type === GLenum.UNIFORM_BUFFER,\n          `Invalid buffer type bound to uniform buffer: ${uniformInfo.label}, binding: ${uniformInfo.binding}, slot: ${slot}`);\n\n        const dataSize = (device as WebGL2Device).gl.getActiveUniformBlockParameter(\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          (device as WebGL2Device).state.pipeline!.glp!,\n          uniformInfo.index,\n          GLenum.UNIFORM_BLOCK_DATA_SIZE\n        );\n        const alignment = (device as WebGL2Device).gl.getParameter(GLenum.UNIFORM_BUFFER_OFFSET_ALIGNMENT);\n        console.assert((uniform.buffer as WebGL2Buffer).size >= dataSize,\n          `Uniform buffer not large enough: ${uniformInfo.label}, binding: ${uniformInfo.binding}, slot: ${slot}, UNIFORM_BLOCK_DATA_SIZE: ${dataSize}, UNIFORM_BUFFER_OFFSET_ALIGNMENT: ${alignment}, size: ${(uniform.buffer as WebGL2Buffer).size}`);\n      } else if (uniform.texture) {\n        console.assert(uniformInfo.type === BindingType.Texture,\n          `Cannot bind texture to uniform: ${uniformInfo.label}, binding: ${uniformInfo.binding}, slot: ${slot}`);\n      } else if (uniform.sampler) {\n        console.assert(uniformInfo.type === BindingType.Sampler,\n          `Cannot bind sampler to uniform: ${uniformInfo.label}, binding: ${uniformInfo.binding}, slot: ${slot}`);\n      } else {\n        console.assert(false, `Either a buffer, texture, or sampler must be specified: ${uniformInfo.label}, binding: ${uniformInfo.binding}, slot: ${slot}`);\n      }\n    }\n\n    if (uniform.buffer) {\n      let offset = uniform.bufferOffset || 0;\n      if (uniformInfo.bufferDynamicOffset) {\n        offset += offsets[offsetIdx] || 0;\n        ++offsetIdx;\n      }\n\n      (device as WebGL2Device).gl.bindBufferRange(\n        GLenum.UNIFORM_BUFFER,\n        uniformInfo.slot,\n        (uniform.buffer as WebGL2Buffer).glb,\n        offset,\n        uniform.bufferSize || ((uniform.buffer as WebGL2Buffer).size - offset)\n      );\n    } else if (uniform.texture) {\n      (device as WebGL2Device).gl.activeTexture(GLenum.TEXTURE0 + uniformInfo.slot);\n      (device as WebGL2Device).gl.bindTexture((uniform.texture as WebGL2Texture).type, (uniform.texture as WebGL2Texture).glt);\n      (device as WebGL2Device).gl.uniform1i(uniformInfo.loc, uniformInfo.slot);\n    } else if (uniform.sampler) {\n      (device as WebGL2Device).gl.bindSampler(uniformInfo.slot, (uniform.sampler as WebGL2Sampler).gls);\n    }\n  }\n}\n\n/**\n * Submits a draw call in the current render pass.\n * @param device the GPU device\n * @param vertexCount the number of vertices to draw\n * @param instanceCount the number of instances to draw. Defaults to 1\n * @param firstVertex the offset to the first vertex to draw. Defaults to 0\n * @param firstInstance the offset to the first instance to draw. Defaults to 0\n */\nexport function draw(device: Device, vertexCount: number, instanceCount = 1, firstVertex = 0, firstInstance: UInt = 0): void {\n  for (const buf of (device as WebGL2Device).state.buffers) {\n    if (buf.step && buf.instanceOffset !== firstInstance) {\n      buf.instanceOffset = firstInstance;\n      vertexAttribs((device as WebGL2Device).gl, buf, firstInstance * buf.stride);\n    }\n  }\n  (device as WebGL2Device).gl.drawArraysInstanced((device as WebGL2Device).state.state.topology, firstVertex, vertexCount, instanceCount);\n}\n\n/**\n * Submits an indexed draw call in the current render pass.\n * @param device the GPU device\n * @param indexCount the number of vertices to draw\n * @param instanceCount the number of instances to draw. Defaults to 1\n * @param firstIndex the offset to the first vertex to draw. Defaults to 0\n * @param firstInstance the offset to the first instance to draw. Defaults to 0\n */\nexport function drawIndexed(device: Device, indexCount: number, instanceCount = 1, firstIndex = 0, firstInstance: UInt = 0): void {\n  for (const buf of (device as WebGL2Device).state.buffers) {\n    if (buf.step && buf.instanceOffset !== firstInstance) {\n      buf.instanceOffset = firstInstance;\n      vertexAttribs((device as WebGL2Device).gl, buf, firstInstance * buf.stride);\n    }\n  }\n  (device as WebGL2Device).gl.drawElementsInstanced(\n    (device as WebGL2Device).state.state.topology, indexCount, (device as WebGL2Device).state.state.indexFormat,\n    firstIndex * indexByteSize((device as WebGL2Device).state.state.indexFormat), instanceCount\n  );\n}\n\n/**\n * Sets the 3D viewport area for the current render pass.\n * @param device the GPU device\n * @param x x offset\n * @param y y offset\n * @param width width\n * @param height height\n * @param minDepth min depth. Defaults to 0\n * @param maxDepth max depth. Defaults to 1\n */\nexport function setViewport(device: Device, x: number, y: number, width: number, height: number, minDepth = 0, maxDepth = 1): void {\n  (device as WebGL2Device).gl.viewport(x, y, width, height);\n  (device as WebGL2Device).gl.depthRange(minDepth, maxDepth);\n}\n\n/**\n * Sets the scissor rectangle for the current render pass.\n * @param device the GPU device\n * @param x x offset\n * @param y y offset\n * @param width width\n * @param height height\n */\nexport function setScissorRect(device: Device, x: number, y: number, width: number, height: number): void {\n  if (!(device as WebGL2Device).state.scissor) {\n    glToggle((device as WebGL2Device).gl, GLenum.SCISSOR_TEST, true);\n    (device as WebGL2Device).state.scissor = true;\n  }\n  (device as WebGL2Device).gl.scissor(x, y, width, height);\n}\n\n/**\n * Sets the blend-constant color for the current render pass.\n * @param device the GPU device\n * @param color the blend color\n */\nexport function setBlendConst(device: Device, color: Color): void {\n  (device as WebGL2Device).gl.blendColor(...color);\n}\n\n/**\n * Sets the stencil reference value for the current render pass.\n * @param device the GPU device\n * @param ref the stencil reference value.\n */\nexport function setStencilRef(device: Device, ref: UInt): void {\n  if ((device as WebGL2Device).state.stencilRef !== ref) {\n    const { stencilFrontCompare, stencilBackCompare, stencilReadMask } = (device as WebGL2Device).state.state;\n    (device as WebGL2Device).gl.stencilFuncSeparate(GLenum.FRONT, stencilFrontCompare, ref, stencilReadMask);\n    (device as WebGL2Device).gl.stencilFuncSeparate(GLenum.BACK, stencilBackCompare, ref, stencilReadMask);\n    (device as WebGL2Device).state.stencilRef = ref;\n  }\n}\n\n//#endregion Render\n"],"mappings":"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"}