{"version":3,"file":"gpu.js","names":[],"sources":["../../js/gpu/gpu.ts"],"sourcesContent":["import {\n  BindGroupDescriptor, BindGroupLayoutDescriptor, BufferDescriptor, DefaultRenderPassDescriptor,\n  ImageCopyExternalImage, ImageCopyTexture, ImageDataLayout, RenderPassDescriptor, RenderPipelineDescriptor,\n  SamplerDescriptor, ShaderDescriptor, TextureDescriptor\n} from './descriptor';\nimport {\n  BindGroup, BindGroupLayout, Device, Buffer, RenderPass, RenderPipeline, Sampler, Shader, Texture\n} from './resource';\nimport { Color, Extent2D, Extent3D, Float, Future, UInt, UIntArray } from './primitive';\n\n/**\n * Minimal WebGPU-like rendering interface.\n */\nexport interface GPU {\n  /**\n   * Resets the device state.\n   * @param device the GPU device\n   */\n  resetDevice(device: Device): void;\n\n  /**\n   * Returns if device context is lost.\n   * @param device the GPU device\n   * @returns true if device context is lost\n   */\n  isDeviceLost(device: Device): boolean;\n\n  /**\n   * Gets the enabled features of the device.\n   * @param device the GPU device\n   * @returns enabled features bitflag\n   */\n  getDeviceFeatures(device: Device): UInt;\n\n  /**\n   * Creates a new buffer object.\n   * @param device the GPU device\n   * @param desc the buffer descriptor\n   * @returns new buffer object\n   */\n  createBuffer(device: Device, desc: BufferDescriptor): Buffer;\n\n  /**\n   * Creates a new texture object.\n   * @param device the GPU device\n   * @param desc the texture descriptor\n   * @returns new texture object\n   */\n  createTexture(device: Device, desc: TextureDescriptor): Texture;\n\n  /**\n   * Creates a new sampler object.\n   * @param device the GPU device\n   * @param desc the sampler descriptor\n   * @returns new sampler object\n   */\n  createSampler(device: Device, desc: SamplerDescriptor): Sampler;\n\n  /**\n   * Creates a new shader module object.\n   * @param device the GPU device\n   * @param desc the shader descriptor\n   * @returns new shader object\n   */\n  createShader(device: Device, desc: ShaderDescriptor): Shader;\n\n  /**\n   * Creates a new pipeline bind group layout object.\n   * @param device the GPU device\n   * @param desc the bind group layout descriptor\n   * @returns new bind group layout object\n   */\n  createBindGroupLayout(device: Device, desc: BindGroupLayoutDescriptor): BindGroupLayout;\n\n  /**\n   * Creates a new pipeline bind group object.\n   * @param device the GPU device\n   * @param desc the bind group descriptor\n   * @returns new bind group object\n   */\n  createBindGroup(device: Device, desc: BindGroupDescriptor): BindGroup;\n\n  /**\n   * Creates a new render pipeline state object.\n   * @param device the GPU device\n   * @param desc the pipeline descriptor\n   * @returns new render pipeline object\n   */\n  createRenderPipeline(device: Device, desc: RenderPipelineDescriptor): RenderPipeline\n\n  /**\n   * Creates a new render pass object.\n   * @param device the GPU device\n   * @param desc the render pass descriptor.\n   * @returns new render pass\n   */\n  createRenderPass(device: Device, desc: RenderPassDescriptor): RenderPass;\n\n  /**\n   * Reads data from a buffer.\n   * @param device the GPU device\n   * @param buffer the GPU buffer to read from\n   * @param out the output CPU buffer\n   * @param offset othe byte offset into GPU buffer to begin reading from. Defaults to 0\n   * @returns a future\n   */\n  readBuffer(device: Device, buffer: Buffer, out: Uint8Array, offset?: UInt): Future;\n\n  /**\n   * Writes data to a buffer.\n   * @param device the GPU device\n   * @param buffer the buffer to write to\n   * @param data the buffer data\n   * @param offset the byte offset into GPU buffer to begin writing to. Defaults to 0\n   */\n  writeBuffer(device: Device, buffer: Buffer, data: ArrayBufferView, offset?: UInt): void;\n\n  /**\n   * Copies data from a buffer to another buffer.\n   * @param device the GPU device\n   * @param src the buffer to read from\n   * @param dst the buffer to write to\n   * @param size the byte size of the GPU buffer to read. Defaults to the whole buffer\n   * @param srcOffset the byte offset into src buffer to begin reading from. Defaults to 0\n   * @param dstOffset the byte offset into dst buffer to begin writing to. Defaults to 0\n   */\n  copyBuffer(device: Device, src: Buffer, dst: Buffer, size?: UInt, srcOffset?: UInt, dstOffset?: UInt): void;\n\n  /**\n   * Writes subregion of data array to a texture.\n   * @param device the GPU device\n   * @param texture the texture subregion to write to.\n   * @param data the texture data\n   * @param layout the data layout\n   * @param size the size of the data subregion to write\n   */\n  writeTexture(device: Device, texture: ImageCopyTexture, data: ArrayBufferView, layout: ImageDataLayout, size?: Extent3D): void;\n\n  /**\n   * Uploads an image subregion to a texture.\n   * @param device the GPU device\n   * @param src the image subregion to write\n   * @param dst the texture subregion to write to.\n   * @param size the size of image subregion to write\n   */\n  copyExternalImageToTexture(device: Device, src: ImageCopyExternalImage, dst: ImageCopyTexture, size?: Extent2D): void;\n\n  /**\n   * Copies subregion of a texture to another texture.\n   * @param device the GPU device\n   * @param src the texture subregion to read from.\n   * @param dst the texture subregion to write to.\n   * @param size the size of the texture subregion to copy\n   */\n  copyTexture(device: Device, src: ImageCopyTexture, dst: ImageCopyTexture, size?: Extent3D): void;\n\n  /**\n   * Copies subregion of a texture to a buffer.\n   * @param device the GPU device\n   * @param src the texture subregion to read from.\n   * @param dst the buffer to write to\n   * @param layout the buffer data layout to use for storing the texture\n   * @param size the size of the texture subregion to copy\n   */\n  copyTextureToBuffer(device: Device, src: ImageCopyTexture, dst: Buffer, layout: ImageDataLayout, size?: Extent3D): void;\n\n  /**\n   * Starts a render pass.\n   * @param device the GPU device\n   * @param pass the render pass\n   */\n  beginRenderPass(device: Device, pass: RenderPass): void;\n\n  /**\n   * Convenient method to start a default render pass.\n   * @param device the GPU device\n   * @param desc the render pass descriptor\n   */\n  beginDefaultPass(device: Device, desc?: DefaultRenderPassDescriptor): void;\n\n  /**\n   * Submits the current render pass.\n   * @param device the GPU device\n   */\n  submitRenderPass(device: Device): void;\n\n  /**\n   * Binds a RenderPipeline to the current render pass.\n   * @param device the GPU device\n   * @param pipeline the pipeline to bind\n   */\n  setRenderPipeline(device: Device, pipeline: RenderPipeline): void;\n\n  /**\n   * Binds an index buffer to the current render pass.\n   * @param device the GPU device\n   * @param buffer the buffer to bind\n   */\n  setIndex(device: Device, buffer: Buffer): void;\n\n  /**\n   * Binds a vertex buffer to a slot in the current render pass.\n   * @param device the GPU device\n   * @param slot the vertex slot to bind to\n   * @param buffer the buffer to bind\n   */\n  setVertex(device: Device, slot: UInt, buffer: Buffer, offset?: UInt): void;\n\n  /**\n   * Binds a bind group to the current render pass.\n   * @param device the GPU device\n   * @param slot the bind group slot to bind to\n   * @param bindGroup the bind group to use\n   * @param offsets the dynamic offsets for dynamic buffers in this bind group\n   */\n  setBindGroup(device: Device, slot: UInt, bindGroup: BindGroup, offsets?: UIntArray): void;\n\n  /**\n   * Submits a draw call in the current render pass.\n   * @param device the GPU device\n   * @param vertexCount the number of vertices to draw\n   * @param instanceCount the number of instances to draw. Defaults to 1\n   * @param firstVertex the offset to the first vertex to draw. Defaults to 0\n   * @param firstInstance the offset to the first instance to draw. Defaults to 0\n   */\n  draw(device: Device, vertexCount: UInt, instanceCount?: UInt, firstVertex?: UInt, firstInstance?: UInt): void;\n\n  /**\n   * Submits an indexed draw call in the current render pass.\n   * @param device the GPU device\n   * @param indexCount the number of vertices to draw\n   * @param instanceCount the number of instances to draw. Defaults to 1\n   * @param firstIndex the offset to the first vertex to draw. Defaults to 0\n   * @param firstInstance the offset to the first instance to draw. Defaults to 0\n   */\n  drawIndexed(device: Device, indexCount: UInt, instanceCount?: UInt, firstIndex?: UInt, firstInstance?: UInt): void;\n\n  /**\n   * Sets the 3D viewport area for the current render pass.\n   * @param device the GPU device\n   * @param x x offset\n   * @param y y offset\n   * @param width width\n   * @param height height\n   * @param minDepth min depth. Defaults to 0\n   * @param maxDepth max depth. Defaults to 1\n   */\n  setViewport(device: Device, x: UInt, y: UInt, width: UInt, height: UInt, minDepth?: Float, maxDepth?: Float): void;\n\n  /**\n   * Sets the scissor rectangle for the current render pass.\n   * @param device the GPU device\n   * @param x x offset\n   * @param y y offset\n   * @param width width\n   * @param height height\n   */\n  setScissorRect(device: Device, x: UInt, y: UInt, width: UInt, height: UInt): void;\n\n  /**\n   * Sets the blend-constant color for the current render pass.\n   * @param device the GPU device\n   * @param color the blend color\n   */\n  setBlendConst(device: Device, color: Color): void;\n\n  /**\n   * Sets the stencil reference value for the current render pass.\n   * @param device the GPU device\n   * @param ref the stencil reference value.\n   */\n  setStencilRef(device: Device, ref: UInt): void;\n}\n"],"mappings":""}