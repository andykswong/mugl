{"version":3,"file":"descriptor.js","names":[],"sources":["../../js/gpu/descriptor.ts"],"sourcesContent":["import {\n  Color, Extent3D, Float, ImageSource, Origin2D, Origin3D, UInt,\n} from './primitive';\nimport {\n  AddressMode, BindingType, BlendFactor, BlendOperation, BufferUsage, ColorWrite, CompareFunction, CullMode,\n  FilterMode, FrontFace, IndexFormat, PrimitiveTopology, SamplerBindingType, ShaderStage, StencilOperation,\n  TextureDimension, TextureFormat, TextureSampleType, TextureUsage, VertexFormat, VertexStepMode\n} from './type';\nimport { BindGroupLayout, Buffer, Sampler, Shader, Texture } from './resource';\n\n/**\n * Descriptor of a Buffer.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData\n * @see https://www.w3.org/TR/webgpu/#GPUBufferDescriptor\n */\nexport interface BufferDescriptor {\n  /** Buffer size in bytes */\n  size: UInt;\n\n  /** Buffer usage */\n  usage: BufferUsage;\n}\n\n/**\n * Descriptor of a Texture.\n * @see https://www.w3.org/TR/webgpu/#texture-creation\n */\nexport interface TextureDescriptor {\n  /** Size of texture. Defaults to [1, 1, 1]. */\n  size?: Extent3D;\n\n  /** The number of mipmap levels. Defaults to 1. */\n  mipLevelCount?: UInt;\n\n  /** The number of samples for MSAA render targets. Defaults to 1. */\n  sampleCount?: UInt;\n\n  /** Textue dimension. Defaults to {@link TextureDimension.D2}. */\n  dimension?: TextureDimension;\n\n  /** Format of the texture. Defaults to {@link TextureFormat.RGBA8}. */\n  format?: TextureFormat;\n\n  /** Specifies the usage of the texture. Defaults to {@link TextureUsage.TextureBinding}. */\n  usage?: TextureUsage;\n}\n\n/**\n* The texture view for render pass attachment.\n* @see https://www.w3.org/TR/webgpu/#texture-view-creation\n*/\nexport interface TextureView {\n  /** The texture to bind */\n  texture: Texture;\n\n  /** Rendering mip level. Defaults to 0 */\n  mipLevel?: UInt;\n\n  /** Rendering texture slice. Defaults to 0 */\n  slice?: UInt;\n}\n\n/**\n* Defines the texture with origin offset for a texture write operation.\n* @see https://www.w3.org/TR/webgpu/#dictdef-gpuimagecopytexture\n*/\nexport interface ImageCopyTexture {\n  /** The texture to write to. */\n  texture: Texture;\n\n  /** The texture mip level to write to. Defaults to 0 */\n  mipLevel?: UInt;\n\n  /** The origin offset of the texture for a write operation. Defaults to [0, 0, 0].  */\n  origin?: Origin3D;\n}\n\n/**\n* Defines the source image with origin offset to be copied into a texture.\n* @see https://www.w3.org/TR/webgpu/#dictdef-gpuimagecopyexternalimage\n*/\nexport interface ImageCopyExternalImage {\n  /** The source image. */\n  src: ImageSource;\n\n  /** The origin offset of the image. Defaults to [0, 0].  */\n  origin?: Origin2D;\n}\n\n/**\n* Defines the layout of a texture image buffer data for a texture write.\n* @see https://www.w3.org/TR/webgpu/#dictdef-gpuimagedatalayout\n*/\nexport interface ImageDataLayout {\n  /** The data offset in bytes. Defaults to 0. */\n  offset?: UInt;\n\n  /** The stride in bytes between the beginning of each block row and the subsequent block row. */\n  bytesPerRow: UInt;\n\n  /**\n   * Number of block rows per single image slice of the texture.\n   * rowsPerImage Ã— pixelsPerRow is the stride between image slices. Required only for depth > 1. Defaults to 0.\n   */\n  rowsPerImage?: UInt;\n}\n\n/**\n * Descriptor of a texture sampler.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n * @see https://www.w3.org/TR/webgpu/#sampler-creation\n */\nexport interface SamplerDescriptor {\n  /** Texture address mode for texture width coordinates. Defaults to {@link AddressMode.ClampToEdge} */\n  addressModeU?: AddressMode;\n\n  /** Texture address mode for texture height coordinates. Defaults to {@link AddressMode.ClampToEdge} */\n  addressModeV?: AddressMode;\n\n  /** Texture address mode for texture depth coordinates. Defaults to {@link AddressMode.ClampToEdge} */\n  addressModeW?: AddressMode;\n\n  /** Texture filter mode for magnification. Defaults to {@link FilterMode.Nearest} */\n  magFilter?: FilterMode;\n\n  /** Texture filter mode for minimifaction. Defaults to {@link FilterMode.Nearest} */\n  minFilter?: FilterMode;\n\n  /** Texture filter mode for sampling between two mipmap levels. Defaults to {@link FilterMode.Nearest} */\n  mipmapFilter?: FilterMode;\n\n  /** Minimum levels of detail. Defaults to 0. */\n  lodMinClamp?: Float;\n\n  /** Maximum levels of detail. Defaults to 32. */\n  lodMaxClamp?: Float;\n\n  /** Specifies the behavior of a comparison sampler. Defaults to null. */\n  compare?: CompareFunction | null;\n\n  /** Max anisotropy level. Defaults to 1. Requires EXT_texture_filter_anisotropic extension. */\n  maxAnisotropy?: UInt;\n}\n\n/**\n * Descriptor of a shader.\n * @see https://www.w3.org/TR/webgpu/#shader-module-creation\n */\nexport interface ShaderDescriptor {\n  /** The shader source code. */\n  code: string;\n\n  /** The stage of the shader. */\n  usage: ShaderStage;\n}\n\n/**\n * Descriptor of render pipeline states.\n * @see https://www.w3.org/TR/webgpu/#render-pipeline-creation\n */\nexport interface RenderPipelineState {\n  /** The color target states. Defaults to null, which disables blending. */\n  targets?: ColorTargetStates | null;\n\n  /** The primitive states. Defaults to empty. */\n  primitive?: PrimitiveState;\n\n  /** The depth stencil states. Defaults to null, which disables depth/stencil test. */\n  depthStencil?: DepthStencilState | null;\n\n  /** The multisample states. Defaults to empty. */\n  multisample?: MultisampleState;\n}\n\n/**\n * Descriptor of a GPU render pipeline resource.\n * @see https://www.w3.org/TR/webgpu/#render-pipeline-creation\n */\nexport interface RenderPipelineDescriptor extends RenderPipelineState {\n  /** The vertex shader. */\n  vertex: Shader;\n\n  /** The fragment shader. */\n  fragment: Shader;\n\n  /** The vertex buffer layouts. */\n  buffers: VertexBufferLayout[];\n\n  /** The bind group layouts. Defaults to empty. */\n  bindGroups?: BindGroupLayout[];\n}\n\n/**\n * Descriptor of render pipeline mutlisample state.\n * @see https://www.w3.org/TR/webgpu/#multisample-state\n */\nexport interface MultisampleState {\n  /** The number of samples for MSAA render targets. Defaults to 1. */\n  sampleCount?: UInt;\n\n  /** Enables alpha to coverage mode. Defaults to false. */\n  alphaToCoverage?: boolean;\n}\n\n/**\n * Descriptor of the primitive state of a render pipeline.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpuprimitivestate\n */\nexport interface PrimitiveState {\n  /** The primitive topology. Defaults to {@link PrimitiveTopology.Triangles} */\n  topology?: PrimitiveTopology;\n\n  /** The index format. Defaults to {@link IndexFormat.UInt16} */\n  indexFormat?: IndexFormat;\n\n  /** The front face. Default to {@link FrontFace.CCW} */\n  frontFace?: FrontFace;\n\n  /** The face culling mode. Default to {@link CullMode.None} */\n  cullMode?: CullMode;\n}\n\n/**\n * Descriptor of vertex buffer layout.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpuvertexbufferlayout\n */\nexport interface VertexBufferLayout {\n  /** The attribute descriptors */\n  attributes: VertexAttribute[];\n\n  /** Stride in bytes. */\n  stride: UInt;\n\n  /** Specify if this buffer's data is instanced. Defaults to {@link VertexStepMode.Vertex}. */\n  stepMode?: VertexStepMode;\n}\n\n/**\n * Descriptor of vertex buffer attribute formats.\n */\nexport interface VertexBufferFormats {\n  /** The vertex attribute format. */\n  attributes: VertexFormat[];\n\n  /** Specify if this buffer's data is instanced. Defaults to false. */\n  instanced?: boolean;\n}\n\n/**\n * Descriptor of vertex attributes.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpuvertexbufferlayout\n */\nexport interface VertexAttribute {\n  /** Vertex format */\n  format: VertexFormat;\n\n  /** Offset in buffer in bytes. */\n  offset: UInt;\n\n  /** Shader location to bind to. */\n  shaderLocation: UInt;\n}\n\n/**\n * Descriptor of the depth stencil state.\n * @see https://www.w3.org/TR/webgpu/#depth-stencil-state\n */\nexport interface DepthStencilState {\n  /** The depth-stencil format. Defaults to {@link TextureFormat.Depth16} */\n  format?: TextureFormat;\n\n  /** Depth-writes enabled? Defaults to false */\n  depthWrite?: boolean;\n\n  /** Depth-compare function. Defaults to {@link CompareFunction.Always} */\n  depthCompare?: CompareFunction;\n\n  /** Stencil front face state. */\n  stencilFront?: StencilFaceState;\n\n  /** Stencil back face state. */\n  stencilBack?: StencilFaceState;\n\n  /** Stencil read mask. Defaults to 0xFFFFFFFF */\n  stencilReadMask?: UInt;\n\n  /** Stencil write mask. Defaults to 0xFFFFFFFF */\n  stencilWriteMask?: UInt;\n\n  /** The depth bias aka polygonOffsetUnits. Defaults to 0. */\n  depthBias?: Float;\n\n  /** The depth bias slope scale aka polygonOffsetFactor. Defaults to 0. */\n  depthBiasSlopeScale?: Float;\n\n  /** The depth bias clamp value. Defaults to 0. */\n  depthBiasClamp?: Float;\n}\n\n/**\n * Descriptor of the stencil face state.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpudepthstencilstate\n */\nexport interface StencilFaceState {\n  /** Stencil compare function. Defaults to {@link CompareFunction.Always} */\n  compare?: CompareFunction;\n\n  /** Stencil fail operation. Defaults to {@link StencilOperation.Keep} */\n  failOp?: StencilOperation;\n\n  /** Stencil depth fail operation. Defaults to {@link StencilOperation.Keep} */\n  depthFailOp?: StencilOperation;\n\n  /** Stencil pass operation. Defaults to {@link StencilOperation.Keep} */\n  passOp?: StencilOperation;\n}\n\n/**\n * Descriptor of the color target states.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpucolortargetstate\n */\nexport interface ColorTargetStates {\n  /** The render targets for offscreen pass. Defaults to null. */\n  targets?: ColorTargetState[] | null;\n\n  /** Color-channels to write. Defaults to {@link ColorWrite.All} */\n  writeMask?: ColorWrite;\n\n  /** Blend component for RGB color. */\n  blendColor?: BlendComponent;\n\n  /** Blend component for RGB color. */\n  blendAlpha?: BlendComponent;\n}\n\n/**\n * Descriptor of the color states of a target.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpucolortargetstate\n */\nexport interface ColorTargetState {\n  /** The texture format for this render target. */\n  format: TextureFormat;\n\n  /** Color-channels to write. Defaults to {@link ColorWrite.All} */\n  writeMask?: ColorWrite;\n\n  /** Blend component for RGB color. */\n  blendColor?: BlendComponent;\n\n  /** Blend component for RGB color. */\n  blendAlpha?: BlendComponent;\n}\n\n/**\n * Descriptor of the blend component state of a color target.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpublendcomponent\n */\nexport interface BlendComponent {\n  /** Blend operation. Defaults to {@link BlendOperation.Add} */\n  operation?: BlendOperation;\n\n  /** Blend source factor. Defaults to {@link BlendFactor.One} */\n  srcFactor?: BlendFactor;\n\n  /** Blend destination factor. Defaults to {@link BlendFactor.Zero} */\n  dstFactor?: BlendFactor;\n}\n\n/**\n * Descriptor of a default Render Pass.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpurenderpassdescriptor\n */\nexport interface DefaultRenderPassDescriptor {\n  /**\n   * The color load operation. Only applicale to a default pass. Defaults to null, which does not clear the buffers.\n   * If a color is specified, it represents the clear color.\n   */\n  clearColor?: Color | null;\n\n  /**\n   * The depth load operation. Defaults to NaN, which does not clear the buffer.\n   * If a number is specified, it represents the clear value.\n   */\n  clearDepth?: Float;\n\n  /**\n   * The stencil load operation. Defaults to NaN, which does not clear the buffer.\n   * If a number is specified, it represents the clear value.\n   */\n  clearStencil?: UInt;\n}\n\n/**\n * Descriptor of a Render Pass.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpurenderpassdescriptor\n */\nexport interface RenderPassDescriptor extends DefaultRenderPassDescriptor {\n  /** List of color attachments. If null or empty, defaults to render to screen. */\n  colors?: ColorAttachment[] | null;\n\n  /** The depth/stencil attachment. Defaults to null. */\n  depthStencil?: TextureView | null;\n}\n\n/**\n * Descriptor of a color attachment in a render pass.\n * @see https://www.w3.org/TR/webgpu/#dictdef-gpurenderpassdescriptor\n */\nexport interface ColorAttachment {\n  /** The color attachment. */\n  view: TextureView;\n\n  /**\n   * The color load operation for this attachment. Defaults to null, which does not clear the buffers.\n   * If a color is specified, it represents the clear color.\n   */\n  clear?: Color | null;\n}\n\n/**\n * Descriptor of a bind group layout object.\n */\nexport interface BindGroupLayoutDescriptor {\n  /** The layouts of entries of a bind group. */\n  entries: BindGroupLayoutEntry[];\n}\n\n/**\n * Descriptor of a bind group layout entry.\n */\nexport interface BindGroupLayoutEntry {\n  /** Bind group entry name. */\n  label: string;\n\n  /** Binding location. Defaults to the position of the entry. */\n  binding?: UInt;\n\n  /** The stages that this resource is visible. Defaults to {@link ShaderStage.Vertex} | {@link ShaderStage.Fragment} */\n  visibility?: ShaderStage;\n\n  /** The type of binding. */\n  type: BindingType;\n\n  /** Whether buffer has dynamic offset. Defaults to false. */\n  bufferDynamicOffset?: boolean;\n\n  /** Type of sampler. Not used currently */\n  samplerType?: SamplerBindingType;\n\n  /** Type of texture sample. Not used currently */\n  textureSampleType?: TextureSampleType;\n\n  /** Dimension of texture. Defaults to {@link TextureDimension.D2}. */\n  textureDimension?: TextureDimension;\n\n  /** Whether texture is multisampled. Defaults to false. */\n  textureMultisampled?: boolean;\n}\n\n/**\n * Descriptor of a bind group object.\n */\nexport interface BindGroupDescriptor {\n  /** Layout of the bind group */\n  layout: BindGroupLayout;\n\n  /** The entries of a bind group. */\n  entries: BindGroupEntry[];\n}\n\n/**\n* A resource binding.\n* @see https://www.w3.org/TR/webgpu/#bind-group-creation\n* @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform\n* @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferRange\n*/\nexport interface BindGroupEntry {\n  /** Uniform binding location. Defaults to the position of the entry. */\n  binding?: UInt;\n\n  /** The buffer to bind */\n  buffer?: Buffer | null;\n\n  /** The starting offset of the buffer. Defaults to 0 */\n  bufferOffset?: UInt;\n\n  /**\n   * The byte size of data to read from the buffer.\n   * Defaults to the range starting at offset and ending at the end of the buffer.\n   */\n  bufferSize?: UInt;\n\n  /** The texture sampler to bind */\n  sampler?: Sampler | null;\n\n  /** The texture to bind */\n  texture?: Texture | null;\n}\n"],"mappings":""}